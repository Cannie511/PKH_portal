/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);

	__webpack_require__(2);

	__webpack_require__(4);

	__webpack_require__(5);

	__webpack_require__(12);

	__webpack_require__(26);

	__webpack_require__(229);

	__webpack_require__(234);

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	'use strict';

	angular.module('app', ['app.run', 'app.filters', 'app.services', 'app.components', 'app.routes', 'app.config', 'app.constants', 'app.partials']);
	angular.module('app.run', []);
	angular.module('app.routes', []);
	angular.module('app.filters', []);
	angular.module('app.services', []);
	angular.module('app.config', []);
	angular.module('app.constants', []);
	angular.module('app.components', ['ui.router', 'angular-loading-bar', 'restangular', 'ngStorage', 'satellizer', 'ui.bootstrap', 'chart.js', 'mm.acl', 'datatables', 'datatables.bootstrap', 'checklist-model', 'toaster', 'ngAnimate', 'ngSanitize', 'pascalprecht.translate', 'localytics.directives', 'ae-datetimepicker', 'ui.calendar', 'textAngular', 'ngMap']);

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _routes = __webpack_require__(3);

	angular.module('app.run').run(_routes.RoutesRun);

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	'use strict';

	RoutesRun.$inject = ["$rootScope", "$state", "$auth", "AclService", "$timeout", "ContextService"];
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.RoutesRun = RoutesRun;
	function RoutesRun($rootScope, $state, $auth, AclService, $timeout,
	// API, 
	ContextService) {
	    'ngInject';

	    AclService.resume();

	    /*eslint-disable */
	    var stateChangeStart = function stateChangeStart(event, toState) {
	        if (toState.data && toState.data.auth) {
	            if (!$auth.isAuthenticated()) {
	                event.preventDefault();
	                return $state.go('login');
	            }
	        }

	        $rootScope.bodyClass = 'hold-transition login-page';
	    };

	    var stateChanged = function stateChanged() {
	        $timeout(function () {
	            // fix sidebar
	            var neg = $('.main-header').outerHeight() + $('.main-footer').outerHeight();
	            var window_height = $(window).height();
	            var sidebar_height = $('.sidebar').height();

	            if ($('body').hasClass('fixed')) {
	                $('.content-wrapper, .right-side').css('min-height', window_height - $('.main-footer').outerHeight());
	            } else {
	                if (window_height >= sidebar_height) {
	                    $('.content-wrapper, .right-side').css('min-height', window_height - neg);
	                } else {
	                    $('.content-wrapper, .right-side').css('min-height', sidebar_height);
	                }
	            }

	            // get user current context
	            if ($auth.isAuthenticated() && !$rootScope.me) {
	                ContextService.getContext().then(function (response) {
	                    response = response.plain();
	                    $rootScope.me = response.data;
	                });
	            }
	        }, 500);
	    };

	    var deregisterationCallback = $rootScope.$on('$stateChangeStart', stateChangeStart);
	    $rootScope.$on('$destroy', deregisterationCallback);
	    $rootScope.$on('$stateChangeSuccess', stateChanged);
	    /*eslint-enable */
	}

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	'use strict';

	angular.module('app.constants').constant('appSetting', {
		'debug': true
	});

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _app = __webpack_require__(6);

	var _translate = __webpack_require__(7);

	var _acl = __webpack_require__(8);

	var _routes = __webpack_require__(9);

	var _loading_bar = __webpack_require__(10);

	var _satellizer = __webpack_require__(11);

	angular.module('app.config').config(_app.AppConfig).config(_translate.TranslateConfig).config(_acl.AclConfig).config(_routes.RoutesConfig).config(_loading_bar.LoadingBarConfig).config(_satellizer.SatellizerConfig);

/***/ }),
/* 6 */
/***/ (function(module, exports) {

	"use strict";

	AppConfig.$inject = ["$compileProvider", "$logProvider", "uibPaginationConfig"];
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.AppConfig = AppConfig;
	function AppConfig($compileProvider, $logProvider, uibPaginationConfig /*, datetimepickerProvider*/) {
	    'ngInject';

	    // compile config

	    $compileProvider.debugInfoEnabled(false);

	    // log config
	    $logProvider.debugEnabled(true);

	    // Set pagination
	    uibPaginationConfig.boundaryLinks = true;
	    uibPaginationConfig.firstText = "«";
	    uibPaginationConfig.lastText = "»";
	    uibPaginationConfig.nextText = "›";
	    uibPaginationConfig.previousText = "‹";
	    uibPaginationConfig.numPage = "numPages";
	    uibPaginationConfig.maxSize = 5;
	    uibPaginationConfig.rotate = false;

	    // Set datetimepickerProvider
	    // datetimepickerProvider.setOptions({
	    //     locale: 'en'
	    // });
	}

/***/ }),
/* 7 */
/***/ (function(module, exports) {

	'use strict';

	TranslateConfig.$inject = ["$translateProvider"];
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.TranslateConfig = TranslateConfig;
	function TranslateConfig($translateProvider) {
	    'ngInject';

	    //$translateProvider.useSanitizeValueStrategy('sanitize');

	    $translateProvider.useSanitizeValueStrategy('escaped');
	    $translateProvider.useStaticFilesLoader({
	        prefix: '/backend/lang/',
	        suffix: '.json'
	    });

	    var defaultLang = "en";
	    $translateProvider.preferredLanguage(defaultLang).fallbackLanguage(defaultLang);
	    // $translateProvider.forceAsyncReload(true);
	    // $translateProvider.useLocalStorage();
	}

/***/ }),
/* 8 */
/***/ (function(module, exports) {

	'use strict';

	AclConfig.$inject = ["AclServiceProvider"];
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.AclConfig = AclConfig;
	function AclConfig(AclServiceProvider) {
	    'ngInject';

	    var myConfig = {
	        storage: 'localStorage',
	        // storage: 'sessionStorage',
	        storageKey: 'AppAcl'

	        /*eslint-disable */
	    };AclServiceProvider.config(myConfig);
	    /*eslint-enable */
	}

/***/ }),
/* 9 */
/***/ (function(module, exports) {

	'use strict';

	RoutesConfig.$inject = ["$stateProvider", "$urlRouterProvider"];
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.RoutesConfig = RoutesConfig;
	function RoutesConfig($stateProvider, $urlRouterProvider) {
	    'ngInject';

	    var getView = function getView(viewName) {
	        return './views/app/pages/' + viewName + '/' + viewName + '.page.html';
	    };

	    var getViewServer = function getViewServer(viewName) {
	        return '/views/admin.' + viewName;
	    };

	    var getLayout = function getLayout(layout) {
	        return './views/app/pages/layout/' + layout + '.page.html';
	    };

	    var getStateDefinition = function getStateDefinition(name, options) {
	        var template = '<' + name + '></' + name + '>';
	        var defOption = {
	            url: '/' + name,
	            data: {
	                auth: true
	            },
	            views: {
	                'main@app': {
	                    template: template
	                }
	            }
	        };
	        if (angular.isDefined(options) && options != null) {
	            angular.merge(defOption, options);
	        }

	        return defOption;
	    };

	    $urlRouterProvider.otherwise('/');

	    $stateProvider.state("app", {
	        abstract: true,
	        views: {
	            layout: {
	                templateUrl: getLayout("layout")
	            },
	            "header@app": {
	                templateUrl: getViewServer("header")
	            },
	            "footer@app": {
	                templateUrl: getViewServer("footer")
	            },
	            main: {}
	        },
	        data: {
	            bodyClass: "hold-transition skin-blue sidebar-mini"
	        }
	    }).state("app.landing", {
	        url: "/",
	        data: {
	            auth: true
	        },
	        views: {
	            "main@app": {
	                templateUrl: getView("landing")
	            }
	        }
	    }).state("app.profile", {
	        url: "/profile",
	        data: {
	            auth: true,
	            roles: ["Admin"]
	        },
	        views: {
	            "main@app": {
	                template: "<user-profile></user-profile>"
	            }
	        },
	        params: {
	            alerts: null
	        }
	    }).state("app.userlist", {
	        url: "/user-lists",
	        data: {
	            auth: true,
	            // roles: ['manager']
	            permissions: {
	                only: ["admin.adm0100"],
	                redirectTo: "login"
	            }
	        },
	        views: {
	            "main@app": {
	                template: "<user-lists></user-lists>"
	            }
	        }
	    }).state("app.useredit", {
	        url: "/user-edit/:userId",
	        data: {
	            auth: true
	        },
	        views: {
	            "main@app": {
	                template: "<user-edit></user-edit>"
	            }
	        },
	        params: {
	            alerts: null,
	            userId: null
	        }
	    }).state("app.userroles", {
	        url: "/user-roles",
	        data: {
	            auth: true
	        },
	        views: {
	            "main@app": {
	                template: "<user-roles></user-roles>"
	            }
	        }
	    }).state("app.userpermissions", {
	        url: "/user-permissions",
	        data: {
	            auth: true
	        },
	        views: {
	            "main@app": {
	                template: "<user-permissions></user-permissions>"
	            }
	        }
	    }).state("app.userpermissionsadd", {
	        url: "/user-permissions-add",
	        data: {
	            auth: true
	        },
	        views: {
	            "main@app": {
	                template: "<user-permissions-add></user-permissions-add>"
	            }
	        },
	        params: {
	            alerts: null
	        }
	    }).state("app.userpermissionsedit", {
	        url: "/user-permissions-edit/:permissionId",
	        data: {
	            auth: true
	        },
	        views: {
	            "main@app": {
	                template: "<user-permissions-edit></user-permissions-edit>"
	            }
	        },
	        params: {
	            alerts: null,
	            permissionId: null
	        }
	    }).state("app.userrolesadd", {
	        url: "/user-roles-add",
	        data: {
	            auth: true
	        },
	        views: {
	            "main@app": {
	                template: "<user-roles-add></user-roles-add>"
	            }
	        },
	        params: {
	            alerts: null
	        }
	    }).state("app.userrolesedit", {
	        url: "/user-roles-edit/:roleId",
	        data: {
	            auth: true
	        },
	        views: {
	            "main@app": {
	                template: "<user-roles-edit></user-roles-edit>"
	            }
	        },
	        params: {
	            alerts: null,
	            roleId: null
	        }
	    }).state("login", {
	        url: "/login",
	        views: {
	            layout: {
	                templateUrl: getView("login")
	            },
	            "header@app": {},
	            "footer@app": {}
	        },
	        data: {
	            bodyClass: "hold-transition login-page"
	        },
	        params: {
	            registerSuccess: null,
	            successMsg: null
	        }
	    }).state("loginloader", {
	        url: "/login-loader",
	        views: {
	            layout: {
	                templateUrl: getView("login-loader")
	            },
	            "header@app": {},
	            "footer@app": {}
	        },
	        data: {
	            bodyClass: "hold-transition login-page"
	        }
	    }).state("register", {
	        url: "/register",
	        views: {
	            layout: {
	                templateUrl: getView("register")
	            },
	            "header@app": {},
	            "footer@app": {}
	        },
	        data: {
	            bodyClass: "hold-transition register-page"
	        }
	    }).state("userverification", {
	        url: "/userverification/:status",
	        views: {
	            layout: {
	                templateUrl: getView("user-verification")
	            }
	        },
	        data: {
	            bodyClass: "hold-transition login-page"
	        },
	        params: {
	            status: null
	        }
	    }).state("forgot_password", {
	        url: "/forgot-password",
	        views: {
	            layout: {
	                templateUrl: getView("forgot-password")
	            },
	            "header@app": {},
	            "footer@app": {}
	        },
	        data: {
	            bodyClass: "hold-transition login-page"
	        }
	    }).state("reset_password", {
	        url: "/reset-password/:email/:token",
	        views: {
	            layout: {
	                templateUrl: getView("reset-password")
	            },
	            "header@app": {},
	            "footer@app": {}
	        },
	        data: {
	            bodyClass: "hold-transition login-page"
	        }
	    }).state("app.logout", {
	        url: "/logout",
	        views: {
	            "main@app": {
	                controller: ["$rootScope", "$scope", "$auth", "$state", "AclService", "API", function controller($rootScope, $scope, $auth, $state, AclService, API) {
	                    // let service = API.service('logout', API.all('auth'));
	                    var service = API.all("logout");
	                    service.post().then(function () {});

	                    $auth.logout().then(function () {
	                        delete $rootScope.me;
	                        AclService.flushRoles();
	                        AclService.setAbilities({});
	                        $state.go("login");
	                    });
	                }]
	            }
	        }
	    })
	    /**
	     * CRM: Customer relationship management
	     */
	    // Supplier
	    .state("app.supplierlist", {
	        url: "/supplier-lists",
	        data: {
	            auth: true
	        },
	        views: {
	            "main@app": {
	                template: "<supplier-lists></supplier-lists>"
	            }
	        }
	    }).state("app.supplieradd", {
	        url: "/supplier-add",
	        data: {
	            auth: true
	        },
	        views: {
	            "main@app": {
	                template: "<supplier-add></supplier-add>"
	            }
	        }
	    }).state("app.supplieredit", {
	        url: "/supplier-edit/:id",
	        data: {
	            auth: true
	        },
	        views: {
	            "main@app": {
	                template: "<supplier-edit></supplier-edit>"
	            }
	        }
	    }).state("app.adm0110", getStateDefinition("adm0110")).state("app.crm0130", getStateDefinition("crm0130")).state("app.crm0140", getStateDefinition("crm0140")).state("app.crm0141", getStateDefinition("crm0141")).state("app.crm1300", getStateDefinition("crm1300")).state("app.crm1500", getStateDefinition("crm1500")).state("app.crm1600", getStateDefinition("crm1600")).state("app.crm1700", getStateDefinition("crm1700")).state("app.crm1640", getStateDefinition("crm1640"))
	    //Loai chi phi
	    .state("app.crm1810", getStateDefinition("crm1810")).state("app.crm1811", getStateDefinition("crm1811", {
	        params: { alerts: null, cost_cat_id: null }
	    }))
	    // Phong ban cong ty
	    .state("app.crm1820", getStateDefinition("crm1820")).state("app.crm1821", getStateDefinition("crm1821", {
	        params: { alerts: null, department_id: null }
	    }))
	    // chi phi
	    .state("app.crm1830", getStateDefinition("crm1830")).state("app.crm1831", getStateDefinition("crm1831", {
	        params: { alerts: null, cost_id: null }
	    })).state("app.crm1832", getStateDefinition("crm1831", {
	        url: "/crm1831/{cost_id:int}",
	        params: { alerts: null, cost_id: null }
	    }))
	    //Manage web order : Quản lý thông tin user order online
	    .state("app.crm1900", getStateDefinition("crm1900"))
	    //Manage web order : Quản lý thông tin  order online
	    .state("app.crm1920", getStateDefinition("crm1920"))
	    //Manage web order : Quản lý thông tin  order online chi tiết
	    .state("app.crm1921", getStateDefinition("crm1921", {
	        params: { alerts: null, web_order_id: null }
	    })).state("app.crm1922", getStateDefinition("crm1921", {
	        url: "/crm1921/{web_order_id:int}",
	        params: { alerts: null, web_order_id: null }
	    }))
	    //Nhập hàng
	    .state("app.crm1630", getStateDefinition("crm1630", {
	        params: {
	            alerts: null,
	            import_type: null,
	            supplier_delivery_id: null,
	            store_id: null,
	            import_wh_id: null,
	            type: null
	        }
	    })).state("app.crm1631", getStateDefinition("crm1630", {
	        url: "/crm1630/{type:int}/{import_wh_id:int}",
	        params: { alerts: null, type: null, import_wh_id: null }
	    }))
	    //Thêm packing
	    .state("app.crm1610", getStateDefinition("crm1610", {
	        url: "/crm1610/{supplier_delivery_id:int}/{supplier_order_id:int}",
	        params: {
	            alerts: null,
	            supplier_delivery_id: null,
	            supplier_order_id: null
	        }
	    })).state("app.crm1710", getStateDefinition("crm1710", {
	        params: { alerts: null, promotion_id: null }
	    })).state("app.crm1620", getStateDefinition("crm1620")).state("app.crm1650", getStateDefinition("crm1650"))
	    // Hỗ trợ hóa đơn
	    .state("app.crm0740", getStateDefinition("crm0740", {
	        params: { store_order_id: null, store_delivery_id: null }
	    }))
	    //Thêm packing
	    .state("app.crm1510", getStateDefinition("crm1510", {
	        params: { alerts: null, packing_id: null }
	    }))
	    //Thêm đặt hàng nhà máy
	    .state("app.crm1310", getStateDefinition("crm1310", {
	        params: { alerts: null, supplier_id: null }
	    })).state("app.crm1311", getStateDefinition("crm1310", {
	        url: "/crm1310/{supplier_order_id:int}/{supplier_id:int}",
	        params: {
	            alerts: null,
	            supplier_order_id: null,
	            supplier_id: null
	        }
	    }))
	    //Thêm người giao hàng
	    .state("app.crm1010", getStateDefinition("crm1010", {
	        params: { alerts: null, store_id: null, delivery_id: null }
	    }))
	    // Thêm người giao hàng
	    .state("app.crm1110", getStateDefinition("crm1110", {
	        params: { alerts: null, delivery_vendor_id: null }
	    })).state("app.crm2521", getStateDefinition("crm2521", {
	        params: { alerts: null, supplier_id: null }
	    }))
	    // Tạo thanh toán
	    .state("app.crm0710", getStateDefinition("crm0710", {
	        params: { alerts: null, store_id: null, payment_id: null }
	    })).state("app.crm0711", getStateDefinition("crm0710", {
	        url: "/crm0710/{cpayment_id:int}/{store_id:int}",
	        params: { alerts: null, store_id: null, payment_id: null }
	    }))
	    // Theo dõi công nợ
	    .state("app.crm0720", getStateDefinition("crm0720"))
	    // Thêm tài khoản ngân hàng
	    .state("app.crm1210", getStateDefinition("crm1210", {
	        params: { alerts: null, store_id: null, bank_account_id: null }
	    }))
	    // Danh sách đơn đặt hàng
	    .state("app.crm0200", getStateDefinition("crm0200")).state("app.crm0200_params", getStateDefinition("crm0200", {
	        url: "/crm0201",
	        params: { alerts: null, store_id: null }
	    }))
	    // Tạo đơn đặt hàng
	    .state("app.crm0210", getStateDefinition("crm0210", {
	        params: { alerts: null, store_id: null }
	    })).state("app.crm0211", getStateDefinition("crm0210", {
	        url: "/crm0210/{store_id:int}/{store_order_id:int}",
	        params: { alerts: null, store_id: null, store_order_id: null }
	    }))
	    // Đơn hàng giao thiếu
	    .state("app.crm0220", getStateDefinition("crm0220"))
	    // Sản phẩm cửa hàng đã mua
	    .state("app.crm0230", getStateDefinition("crm0230", {
	        params: { alerts: null, store_id: null }
	    }))
	    // Sản phẩm cửa hàng chưa mua
	    .state("app.crm0231", getStateDefinition("crm0231", {
	        params: { alerts: null, store_id: null }
	    }))
	    // Danh sách xử lý đơn hàng
	    .state("app.crm0240", getStateDefinition("crm0240"))
	    // Danh sách ngày công nợ
	    .state("app.crm0250", getStateDefinition("crm0250"))
	    // Danh sach cua hang
	    .state("app.crm0300", getStateDefinition("crm0300"))
	    // Ban do cua hang
	    .state("app.crm0301", getStateDefinition("crm0301"))
	    // Tao cua hang
	    .state("app.crm0310", getStateDefinition("crm0310", {
	        params: { alerts: null, store_id: null }
	    }))
	    // Tao cua hang
	    .state("app.crm0320", getStateDefinition("crm0320"))
	    // Theo doi doanh so cua hang
	    .state("app.crm0321", getStateDefinition("crm0321"))
	    // Phân công cửa hàng
	    .state("app.crm0340", getStateDefinition("crm0340"))
	    // Danh sach chanh xe
	    .state("app.crm0350", getStateDefinition("crm0350")).state("app.crm0351", getStateDefinition("crm0351", { params: { chanh_id: null } })).state("app.crm0352", getStateDefinition("crm0351", { url: "/crm0351/{chanh_id:int}" }))
	    //Customer service
	    .state("app.crm0500", getStateDefinition("crm0500"))
	    //Customer service Create
	    .state("app.crm0510", getStateDefinition("crm0510", {
	        params: { alerts: null, store_id: null }
	    })).state("app.crm0511", getStateDefinition("crm0510", { url: "/crm0511/{cs_id:int}" }))
	    // Tao man hinh danh sach tai khoan ngan hang
	    .state("app.crm1200", getStateDefinition("crm1200"))
	    // Ghi chú cửa hàng
	    .state("app.crm0330", getStateDefinition("crm0330", { params: { store_id: null } })).state("app.crm0331", getStateDefinition("crm0331", {
	        params: { store_order_id: null, store_delivery_id: null }
	    })).state("app.crm0332", getStateDefinition("crm0331", {
	        url: "/crm0331/{store_id:int}/{store_working_id:int}"
	    }))
	    // Danh sach phieu xuat
	    .state("app.crm0400", getStateDefinition("crm0400")).state("app.crm0400_params", getStateDefinition("crm0400", {
	        url: "/crm0401",
	        params: { alerts: null, store_id: null }
	    }))
	    // Tao phieu xuat hang
	    .state("app.crm0410", getStateDefinition("crm0410", {
	        params: { store_order_id: null, store_delivery_id: null }
	    })).state("app.crm0411", getStateDefinition("crm0410", {
	        url: "/crm0410/{store_order_id:int}/{store_delivery_id:int}"
	    })).state("app.crm0100", getStateDefinition("crm0100"))
	    // .state('app.crm0110', getStateDefinition('crm0110', { params: { product_id: 0 } }))
	    .state("app.crm0110", getStateDefinition("crm0110", { url: "/crm0110/{product_id:int}" }))
	    //Loai san pham
	    .state("app.crm0120", getStateDefinition("crm0120"))
	    //chi tiet loai san pham
	    // .state('app.crm0121', getStateDefinition('crm0121', { params: { product_cat_id: 0 } }))
	    .state("app.crm0121", getStateDefinition("crm0121", {
	        url: "/crm0121/{product_cat1_id:int}"
	    })).state("app.crm0800", getStateDefinition("crm0800")).state("app.crm0810", getStateDefinition("crm0810")).state("app.crm0811", getStateDefinition("crm0810", {
	        url: "/crm0810/{checkWarehouseId:int}"
	    })).state("app.crm0900", getStateDefinition("crm0900")).state("app.crm0910", getStateDefinition("crm0910")).state("app.crm0912", getStateDefinition("crm0912")).state("app.crm0913", getStateDefinition("crm0913", {
	        params: { checkingDate: null, check_warehouse_id: null }
	    })).state("app.crm0913_2", getStateDefinition("crm0913", {
	        url: "/crm0913/{check_warehouse_id:int}"
	    }))
	    // Thời gian tiêu thụ công
	    .state("app.crm0914", getStateDefinition("crm0914"))
	    // Thời gian tiêu thụ sản phẩm
	    .state("app.crm0915", getStateDefinition("crm0915", { params: { pi_no: null } })).state("app.crm0920", getStateDefinition("crm0920")).state("app.crm1000", getStateDefinition("crm1000"))
	    // Danh sach nguoi giao hang
	    .state("app.crm1100", getStateDefinition("crm1100")).state("app.crm2520", getStateDefinition("crm2520")).state("app.crm0700", getStateDefinition("crm0700")).state("app.crm0750", getStateDefinition("crm0750"))
	    // Tạo thanh toán
	    .state("app.crm0751", getStateDefinition("crm0751", {
	        params: {
	            alerts: null,
	            store_order_id: null,
	            payment_id: null
	        }
	    })).state("app.crm0752", getStateDefinition("crm0751", {
	        url: "/crm0751/{store_order_id:int}/{payment_id:int}",
	        params: {
	            alerts: null,
	            store_order_id: null,
	            payment_id: null
	        }
	    }))
	    // Danh sach chi nhanh
	    .state("app.crm2000", getStateDefinition("crm2000")).state("app.crm2010", getStateDefinition("crm2010", {
	        params: { alerts: null, branch_id: null }
	    })).state("app.crm2011", getStateDefinition("crm2010", { url: "/crm2010/{branch_id:int}" }))
	    //Danh sách tỉnh
	    .state("app.crm2100", getStateDefinition("crm2100")).state("app.crm2110", getStateDefinition("crm2110"), {
	        params: { area_id: null }
	    }).state("app.crm2111", getStateDefinition("crm2110", { url: "/crm2110/{area_id:int}" }))
	    //Danh sách khu vực
	    .state("app.crm2200", getStateDefinition("crm2200"))
	    // Danh sách xuất kho chi nhánh nội bộ
	    .state("app.crm2300", getStateDefinition("crm2300"))
	    // Xuất kho chi nhánh nội bộ
	    .state("app.crm2310", getStateDefinition("crm2310", { params: { alerts: null } })).state("app.crm2311", getStateDefinition("crm2310", {
	        url: "/crm2310/{warehouse_exim_id:int}",
	        params: { alerts: null, warehouse_exim_id: null }
	    }))

	    // Nhập kho chi nhánh nội bộ
	    .state("app.crm2320", getStateDefinition("crm2320"))
	    // Danh sách nhập kho chi nhánh nội bộ
	    .state("app.crm2330", getStateDefinition("crm2330"))
	    // Danh sách thời gian đặt hàng gần nhất của cửa hàng
	    .state("app.crm2400", getStateDefinition("crm2400"))
	    // Danh sách vật phẩm
	    .state("app.crm2500", getStateDefinition("crm2500"))
	    // Tạo vật phẩm
	    .state("app.crm2510", getStateDefinition("crm2510")).state("app.crm2511", getStateDefinition("crm2510", {
	        url: "/crm2510/{product_market_id:int}"
	    }))
	    // Danh sách Nhập/Xuất vật phẩm
	    .state("app.crm2530", getStateDefinition("crm2530"))
	    // Nhập/Xuất vật phẩm
	    .state("app.crm2540", getStateDefinition("crm2540", {
	        url: "/crm2540/{product_market_his_id:int}"
	    })).state("app.crm2541", getStateDefinition("crm2540", {
	        params: { warehouse_change_type: null }
	    }))
	    // Tồn kho vật phẩm
	    .state("app.crm2550", getStateDefinition("crm2550"))
	    // Chi tiết cửa hàng
	    .state("app.crm2600", getStateDefinition("crm2600", {
	        url: "/crm2600/{store_id:int}",
	        params: { alerts: null, store_id: null }
	    })).state("app.crm2610", getStateDefinition("crm2610", {
	        url: "/crm2610/{store_id:int}",
	        params: { alerts: null, store_id: null }
	    })).state("app.crm2700", getStateDefinition("crm2700")).state("app.crm2710", getStateDefinition("crm2710"))
	    // Danh sách KPI của hàng
	    .state("app.crm2800", getStateDefinition("crm2800"))
	    // Danh sách KPI 1 của hàng
	    .state("app.crm2810", getStateDefinition("crm2810", {
	        url: "/crm2810/{store_id:int}",
	        params: { alerts: null, store_id: null }
	    }))
	    // Chi tiết KPI của hàng 1 tháng
	    .state("app.crm2820", getStateDefinition("crm2820", {
	        url: "/crm2820/{kpi_id:int}/{month:int}"
	    }))
	    // Danh sách kho
	    .state("app.crm2900", getStateDefinition("crm2900"))
	    // Tao kho
	    .state("app.crm2910", getStateDefinition("crm2910", {
	        params: { alerts: null, warehouse_id: null }
	    })).state("app.crm2911", getStateDefinition("crm2910", {
	        url: "/crm2910/{warehouse_id:int}",
	        params: { alerts: null, warehouse_id: null }
	    }))
	    //Đánh giá đại lý

	    .state("app.crm3000", getStateDefinition("crm3000")).state("app.crm4000", getStateDefinition("crm4000")).state("app.crm4001", getStateDefinition("crm4001")).state("app.crm4002", getStateDefinition("crm4002")).state("app.crm3010", getStateDefinition("crm3010"))

	    //lịch sử điểm
	    .state("app.crm3020", getStateDefinition("crm3020", {
	        params: { alerts: null, warehouse_id: null }
	    })).state("app.crm3021", getStateDefinition("crm3020", {
	        url: "/crm3020/{store_id:int}",
	        params: { alerts: null, store_id: null }
	    }))
	    /**
	     * HRM: Human resouce management
	     */
	    // Lịch công ty
	    .state("app.hrm0100", getStateDefinition("hrm0100"))
	    // Đơn xin nghỉ phép
	    .state("app.hrm0110", getStateDefinition("hrm0110"))
	    // Duyệt đơn
	    .state("app.hrm0120", getStateDefinition("hrm0120"))
	    // Thống kê phép năm
	    .state("app.hrm0130", getStateDefinition("hrm0130"))
	    // Truy cập hệ thống
	    .state("app.hrm0140", getStateDefinition("hrm0140"))
	    // Thời gian làm việc theo tháng
	    .state("app.hrm0141", getStateDefinition("hrm0141"))
	    // VỊ trí mới nhất
	    .state("app.hrm0150", getStateDefinition("hrm0150"))
	    // LỊch sử vị trí
	    .state("app.hrm0151", getStateDefinition("hrm0151"))
	    // Checkin
	    .state("app.hrm0152", getStateDefinition("hrm0152"))
	    // Checkin/Checkout Web
	    .state("app.hrm0153", getStateDefinition("hrm0153"))
	    // Checkin/Checkout Web List
	    .state("app.hrm0154", getStateDefinition("hrm0154"))
	    // Danh sách bài kiểm tra
	    .state("app.hrm0200", getStateDefinition("hrm0200"))
	    // Kiểm tra
	    .state("app.hrm0210", getStateDefinition("hrm0210", { params: { id: 0 } }))

	    // Danh sách
	    .state("app.hrm0300", getStateDefinition("hrm0300")).state("app.hrm0310", getStateDefinition("hrm0310", { params: { task_id: null } }))
	    // HRM0400	Bảng lương
	    .state("app.hrm0400", getStateDefinition("hrm0400")).state("app.hrm0410", getStateDefinition("hrm0410"))
	    // HRM0500	KPI
	    .state("app.hrm0500", getStateDefinition("hrm0500")).state("app.hrm0510", getStateDefinition("hrm0510"))
	    // HRM0600	Bảng chấm công
	    .state("app.hrm0600", getStateDefinition("hrm0600"))
	    // HRM0700	Danh sách nhân viên
	    .state("app.hrm0700", getStateDefinition("hrm0700"))
	    // HRM0710  Thông tin nhân viên
	    .state("app.hrm0710", getStateDefinition("hrm0710", { url: "/hrm0710/{id:int}" })).state("app.hrm0714", getStateDefinition("hrm0710", {
	        url: "/hrm0710/{id:int}",
	        params: { screenMode: "EDIT" }
	    }))
	    // HRM0715  Danh sách hợp đồng
	    .state("app.hrm0715", getStateDefinition("hrm0715", { url: "/hrm0715/{id:int}" }))
	    // HRM0716  Add/Edit hợp đồng
	    .state("app.hrm0716", getStateDefinition("hrm0716", {
	        url: "/hrm0716/{employee_id:int}/{contract_id:int}"
	    }))
	    // HRM0800 Leave allocation list
	    .state("app.hrm0800", getStateDefinition("hrm0800"))
	    // .state('app.hrm0810', getStateDefinition('hrm0810'))
	    .state("app.hrm0810", getStateDefinition("hrm0810", {
	        url: "/hrm0810/{id:int}",
	        params: { id: 0 }
	    }))
	    // HRM0900 Ngày lễ
	    .state("app.hrm0900", getStateDefinition("hrm0900"))
	    // HRM0910 Add/Remove holiday
	    .state("app.hrm0910", getStateDefinition("hrm0910", {
	        url: "/hrm0910/{id:int}",
	        params: { id: 0 }
	    }))
	    // HRM1000 Internal news
	    .state("app.hrm1000", getStateDefinition("hrm1000"))
	    // HRM1010 Add/Remove Internal news
	    .state("app.hrm1010", getStateDefinition("hrm1010", {
	        url: "/hrm1010/{id:int}",
	        params: { id: 0 }
	    }))
	    // hrm1020 Internal news (public)
	    .state("app.hrm1020", getStateDefinition("hrm1020"))
	    // hrm1021 View Internal news (public)
	    .state("app.hrm1021", getStateDefinition("hrm1021", { url: "/hrm1021/{id:int}" }))
	    // HRM1100	Danh sách bảng lương
	    .state("app.hrm1100", getStateDefinition("hrm1100"))
	    // HRM1110	Chi tiết bảng lương
	    .state("app.hrm1110", getStateDefinition("hrm1110", {
	        url: "/hrm1110/{id:int}",
	        params: { id: 0 }
	    }))
	    // HRM1111	Chi tiết bảng lương
	    .state("app.hrm1111", getStateDefinition("hrm1111", {
	        url: "/hrm1111/{id:int}",
	        params: { id: 0 }
	    }))
	    // HRM1112	Chi tiết bảng lương nhân viên
	    .state("app.hrm1112", getStateDefinition("hrm1112", { url: "/hrm1112/{id:int}" }))
	    // HRM1120	Danh sách bảng lương cho nhân viên
	    .state("app.hrm1120", getStateDefinition("hrm1120"))
	    // HRM1130	Chi tiết bản lương cho nhân viên
	    .state("app.hrm1130", getStateDefinition("hrm1130", { url: "/hrm1021/{id:int}" }))
	    // TEST
	    .state("app.tmp9999", getStateDefinition("tmp9999"))

	    /**
	     * Admin
	     */
	    .state("app.adm0400", getStateDefinition("adm0400")).state("app.adm0500", getStateDefinition("adm0500"))

	    /**
	     * Report
	     */
	    // Báo cáo doanh số NVBH
	    .state("app.rpt0100", getStateDefinition("rpt0100"))
	    // Báo cáo doanh số
	    .state("app.rpt0200", getStateDefinition("rpt0200"))
	    // Doanh số từng cấp (Daily Report)
	    .state("app.rpt0510", getStateDefinition("rpt0510", { url: "/rpt0510/{day}" }))
	    // Doanh số sale (Daily Report)
	    .state("app.rpt0511", getStateDefinition("rpt0511", { url: "/rpt0511/{day}" }))
	    // Doanh số khu vực (Daily Report)
	    .state("app.rpt0512", getStateDefinition("rpt0512", { url: "/rpt0512/{day}" }))
	    // Quản lý sản phẩm (Daily Report)
	    .state("app.rpt0513", getStateDefinition("rpt0513", { url: "/rpt0513/{day}" }))
	    // Số ngày tồn kho
	    .state("app.rpt0514", getStateDefinition("rpt0514", { url: "/rpt0514/{store_id:int}" })).state("app.rpt0515", getStateDefinition("rpt0515")).state("app.rpt0516", getStateDefinition("rpt0516")).state("app.rpt0517", getStateDefinition("rpt0517"))
	    // Báo cáo cửa hàng
	    .state("app.rpt0518", getStateDefinition("rpt0518"))
	    // Báo cáo cửa hàng
	    .state("app.rpt0519", getStateDefinition("rpt0519"))
	    /**
	     * CMS: Content mamagement system
	     */
	    .state("app.cms0100", getStateDefinition("cms0100")).state("app.cms0200", getStateDefinition("cms0200")).state("app.cms0210", getStateDefinition("cms0210", { params: { id: 0 } })).state("app.cms0211", getStateDefinition("cms0210", { url: "/cms0210/{id:int}" })).state("app.cms0220", getStateDefinition("cms0220")).state("app.cms0300", getStateDefinition("cms0300")).state("app.cms0400", getStateDefinition("cms0400"))
	    /**
	     * Orther
	     */
	    .state("app.mobile", getStateDefinition("mobile"));
	}

/***/ }),
/* 10 */
/***/ (function(module, exports) {

	'use strict';

	LoadingBarConfig.$inject = ["cfpLoadingBarProvider"];
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.LoadingBarConfig = LoadingBarConfig;
	function LoadingBarConfig(cfpLoadingBarProvider) {
	  'ngInject';

	  cfpLoadingBarProvider.includeSpinner = true;
	}

/***/ }),
/* 11 */
/***/ (function(module, exports) {

	'use strict';

	SatellizerConfig.$inject = ["$authProvider"];
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.SatellizerConfig = SatellizerConfig;
	function SatellizerConfig($authProvider) {
	    'ngInject';

	    $authProvider.httpInterceptor = function () {
	        return true;
	    };

	    $authProvider.loginUrl = '/api/auth/login';
	    $authProvider.signupUrl = '/api/auth/register';
	    $authProvider.tokenRoot = 'data'; // compensates success response macro
	}

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _date_millis = __webpack_require__(13);

	var _capitalize = __webpack_require__(14);

	var _human_readable = __webpack_require__(15);

	var _truncate_characters = __webpack_require__(16);

	var _truncate_words = __webpack_require__(17);

	var _trust_html = __webpack_require__(18);

	var _ucfirst = __webpack_require__(19);

	var _day_of_week = __webpack_require__(20);

	var _currentdate = __webpack_require__(21);

	var _img_thumb = __webpack_require__(22);

	var _substr = __webpack_require__(23);

	var _crm0810Price = __webpack_require__(24);

	var _crm2820Total = __webpack_require__(25);

	angular.module('app.filters').filter('datemillis', _date_millis.DateMillisFilter).filter('capitalize', _capitalize.CapitalizeFilter).filter('humanreadable', _human_readable.HumanReadableFilter).filter('truncateCharacters', _truncate_characters.TruncatCharactersFilter).filter('truncateWords', _truncate_words.TruncateWordsFilter).filter('trustHtml', _trust_html.TrustHtmlFilter).filter('ucfirst', _ucfirst.UcFirstFilter).filter('currentdate', _currentdate.CurrentDateFilter).filter('dayOfWeek', _day_of_week.DayOfWeekFilter).filter('imgThumb', _img_thumb.ImgThumbFilter).filter('substr', _substr.SubstrFilter).filter('crm0810Price', _crm0810Price.Crm0810PriceFilter).filter('crm2820Total', _crm2820Total.Crm2820TotalFilter);

/***/ }),
/* 13 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.DateMillisFilter = DateMillisFilter;
	function DateMillisFilter() {
	  'ngInject';

	  return function (input) {
	    return Date.parse(input);
	  };
	}

/***/ }),
/* 14 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.CapitalizeFilter = CapitalizeFilter;
	function CapitalizeFilter() {
	  return function (input) {
	    return input ? input.replace(/([^\W_]+[^\s-]*) */g, function (txt) {
	      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
	    }) : '';
	  };
	}

/***/ }),
/* 15 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.HumanReadableFilter = HumanReadableFilter;
	function HumanReadableFilter() {
	  return function humanize(str) {
	    if (!str) {
	      return '';
	    }
	    var frags = str.split('_');
	    for (var i = 0; i < frags.length; i++) {
	      frags[i] = frags[i].charAt(0).toUpperCase() + frags[i].slice(1);
	    }
	    return frags.join(' ');
	  };
	}

/***/ }),
/* 16 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.TruncatCharactersFilter = TruncatCharactersFilter;
	function TruncatCharactersFilter() {
	  return function (input, chars, breakOnWord) {
	    if (isNaN(chars)) {
	      return input;
	    }
	    if (chars <= 0) {
	      return '';
	    }
	    if (input && input.length > chars) {
	      input = input.substring(0, chars);

	      if (!breakOnWord) {
	        var lastspace = input.lastIndexOf(' ');
	        // Get last space
	        if (lastspace !== -1) {
	          input = input.substr(0, lastspace);
	        }
	      } else {
	        while (input.charAt(input.length - 1) === ' ') {
	          input = input.substr(0, input.length - 1);
	        }
	      }
	      return input + '...';
	    }
	    return input;
	  };
	}

/***/ }),
/* 17 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.TruncateWordsFilter = TruncateWordsFilter;
	function TruncateWordsFilter() {
	  return function (input, words) {
	    if (isNaN(words)) {
	      return input;
	    }
	    if (words <= 0) {
	      return '';
	    }
	    if (input) {
	      var inputWords = input.split(/\s+/);
	      if (inputWords.length > words) {
	        input = inputWords.slice(0, words).join(' ') + '...';
	      }
	    }
	    return input;
	  };
	}

/***/ }),
/* 18 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.TrustHtmlFilter = TrustHtmlFilter;
	function TrustHtmlFilter($sce) {
	  return function (html) {
	    return $sce.trustAsHtml(html);
	  };
	}

/***/ }),
/* 19 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.UcFirstFilter = UcFirstFilter;
	function UcFirstFilter() {
	  return function (input) {
	    if (!input) {
	      return null;
	    }
	    return input.substring(0, 1).toUpperCase() + input.substring(1);
	  };
	}

/***/ }),
/* 20 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.DayOfWeekFilter = DayOfWeekFilter;
	function DayOfWeekFilter() {
	  'ngInject';

	  return function (val) {
	    var d = new Date(val);
	    var n = d.getDay();

	    var weekday = "";
	    switch (n) {
	      case 0:
	        weekday = 'Chủ Nhật';
	        break;
	      case 1:
	        weekday = 'Thứ Hai';
	        break;
	      case 2:
	        weekday = 'Thứ Ba';
	        break;
	      case 3:
	        weekday = 'Thứ Tư';
	        break;
	      case 4:
	        weekday = 'Thứ Năm';
	        break;
	      case 5:
	        weekday = 'Thứ Sáu';
	        break;
	      case 6:
	        weekday = 'Thứ Bảy';
	        break;
	    }

	    return weekday;
	  };
	}

/***/ }),
/* 21 */
/***/ (function(module, exports) {

	'use strict';

	CurrentDateFilter.$inject = ["$filter"];
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.CurrentDateFilter = CurrentDateFilter;
	function CurrentDateFilter($filter) {
	  'ngInject';

	  return function () {
	    return $filter('date')(new Date(), 'yyyy-MM-dd');
	  };
	}

/***/ }),
/* 22 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ImgThumbFilter = ImgThumbFilter;
	function ImgThumbFilter() {
	  'ngInject';

	  return function (val) {
	    if (val == null || val.length == 0) return null;
	    var index = val.lastIndexOf('/');
	    if (index > 0) {
	      val = val.substr(0, index) + '/thumb' + val.substr(index);
	    }
	    return val;
	  };
	}

/***/ }),
/* 23 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SubstrFilter = SubstrFilter;
	function SubstrFilter() {
	  return function (input, begin, length) {
	    return input == null ? '' : input.substr(begin, length);
	  };
	}

/***/ }),
/* 24 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Crm0810PriceFilter = Crm0810PriceFilter;
	function Crm0810PriceFilter() {
	    'ngInject';

	    return function (list, selling) {
	        var result = [];

	        var price = 0;
	        if (selling == false || selling == 0) {
	            price = -1;
	        }

	        angular.forEach(list, function (item) {
	            if (item.selling_price > price) {
	                result.push(item);
	            }
	        });

	        return result;
	    };
	}

/***/ }),
/* 25 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Crm2820TotalFilter = Crm2820TotalFilter;
	function Crm2820TotalFilter() {
	    'ngInject';

	    return function (list) {
	        var result = [];
	        console.log('list :', list);

	        var price = 0;

	        angular.forEach(list, function (item) {
	            price += item.amount * item.selling_price;
	        });

	        return price;
	    };
	}

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _oazalo = __webpack_require__(27);

	var _crm = __webpack_require__(28);

	var _crm2 = __webpack_require__(29);

	var _crm3 = __webpack_require__(30);

	var _crm4 = __webpack_require__(31);

	var _crm5 = __webpack_require__(32);


	var _crm7 = __webpack_require__(33);

	var _crm8 = __webpack_require__(34);

	var _crm6 = __webpack_require__(33);

	var _crm7 = __webpack_require__(34);


	var _cms = __webpack_require__(35);

	var _cms2 = __webpack_require__(36);

	var _rpt = __webpack_require__(37);

	var _crm8 = __webpack_require__(38);


	var _crm9 = __webpack_require__(38);


	var _crm10 = __webpack_require__(39);


	var _crm11 = __webpack_require__(42);


	var _crm12 = __webpack_require__(42);

	var _crm13 = __webpack_require__(43);

	var _hrm = __webpack_require__(44);

	var _hrm2 = __webpack_require__(45);

	var _hrm3 = __webpack_require__(46);

	var _hrm4 = __webpack_require__(47);

	var _hrm5 = __webpack_require__(48);

	var _hrm6 = __webpack_require__(49);

	var _hrm7 = __webpack_require__(50);

	var _hrm8 = __webpack_require__(51);

	var _hrm9 = __webpack_require__(52);

	var _hrm10 = __webpack_require__(53);

	var _hrm11 = __webpack_require__(54);

	var _hrm12 = __webpack_require__(55);

	var _hrm13 = __webpack_require__(56);

	var _hrm14 = __webpack_require__(57);

	var _crm14 = __webpack_require__(58);

	var _crm15 = __webpack_require__(59);

	var _hrm15 = __webpack_require__(60);

	var _hrm16 = __webpack_require__(61);

	var _tmp = __webpack_require__(62);

	var _hrm17 = __webpack_require__(63);

	var _hrm18 = __webpack_require__(64);

	var _hrm19 = __webpack_require__(65);

	var _hrm20 = __webpack_require__(66);

	var _hrm21 = __webpack_require__(67);

	var _hrm22 = __webpack_require__(68);

	var _hrm23 = __webpack_require__(69);

	var _hrm24 = __webpack_require__(70);

	var _hrm25 = __webpack_require__(71);

	var _hrm26 = __webpack_require__(72);

	var _hrm27 = __webpack_require__(73);

	var _hrm28 = __webpack_require__(74);

	var _hrm29 = __webpack_require__(75);

	var _crm12 = __webpack_require__(43);

	var _hrm = __webpack_require__(44);

	var _hrm2 = __webpack_require__(45);

	var _hrm3 = __webpack_require__(46);

	var _hrm4 = __webpack_require__(47);

	var _hrm5 = __webpack_require__(48);

	var _hrm6 = __webpack_require__(49);

	var _hrm7 = __webpack_require__(50);

	var _hrm8 = __webpack_require__(51);

	var _hrm9 = __webpack_require__(52);

	var _hrm10 = __webpack_require__(53);

	var _hrm11 = __webpack_require__(54);

	var _hrm12 = __webpack_require__(55);

	var _hrm13 = __webpack_require__(56);

	var _hrm14 = __webpack_require__(57);

	var _crm13 = __webpack_require__(58);

	var _crm14 = __webpack_require__(59);

	var _hrm15 = __webpack_require__(60);

	var _hrm16 = __webpack_require__(61);

	var _tmp = __webpack_require__(62);

	var _hrm17 = __webpack_require__(63);

	var _hrm18 = __webpack_require__(64);

	var _hrm19 = __webpack_require__(65);

	var _hrm20 = __webpack_require__(66);

	var _hrm21 = __webpack_require__(67);

	var _hrm22 = __webpack_require__(68);

	var _hrm23 = __webpack_require__(69);

	var _hrm24 = __webpack_require__(70);

	var _hrm25 = __webpack_require__(71);

	var _hrm26 = __webpack_require__(72);

	var _hrm27 = __webpack_require__(73);

	var _hrm28 = __webpack_require__(74);

	var _hrm29 = __webpack_require__(75);

	var _crm15 = __webpack_require__(76);


	var _crm16 = __webpack_require__(77);

	var _crm17 = __webpack_require__(78);

	var _crm18 = __webpack_require__(78);

	var _crm19 = __webpack_require__(79);


	var _crm20 = __webpack_require__(82);

	var _crm21 = __webpack_require__(83);


	var _crm22 = __webpack_require__(84);

	var _rpt2 = __webpack_require__(85);

	var _hrm30 = __webpack_require__(87);

	var _hrm31 = __webpack_require__(88);

	var _adm = __webpack_require__(92);

	var _mobile = __webpack_require__(93);

	var _crm23 = __webpack_require__(94);


	var _crm24 = __webpack_require__(95);

	var _crm25 = __webpack_require__(96);

	var _crm26 = __webpack_require__(97);

	var _crm27 = __webpack_require__(98);


	var _crm28 = __webpack_require__(98);

	var _crm29 = __webpack_require__(99);

	var _hrm32 = __webpack_require__(100);

	var _hrm33 = __webpack_require__(101);

	var _hrm34 = __webpack_require__(102);


	var _hrm35 = __webpack_require__(103);

	var _crm30 = __webpack_require__(104);

	var _rpt3 = __webpack_require__(105);

	var _crm30 = __webpack_require__(106);

	var _crm31 = __webpack_require__(107);

	var _crm32 = __webpack_require__(108);

	var _crm33 = __webpack_require__(109);

	var _crm34 = __webpack_require__(110);

	var _crm35 = __webpack_require__(111);

	var _crm36 = __webpack_require__(112);

	var _crm37 = __webpack_require__(113);

	var _crm38 = __webpack_require__(114);

	var _crm39 = __webpack_require__(115);

	var _crm40 = __webpack_require__(116);

	var _crm41 = __webpack_require__(117);

	var _crm42 = __webpack_require__(118);

	var _crm43 = __webpack_require__(119);

	var _crm44 = __webpack_require__(120);

	var _crm46 = __webpack_require__(121);

	var _crm45 = __webpack_require__(121);


	var _crm47 = __webpack_require__(122);

	var _rpt4 = __webpack_require__(123);

	var _crm47 = __webpack_require__(124);

	var _crm48 = __webpack_require__(125);

	var _crm49 = __webpack_require__(126);

	var _crm50 = __webpack_require__(127);


	var _crm52 = __webpack_require__(128);

	var _crm51 = __webpack_require__(128);


	var _crm53 = __webpack_require__(129);

	var _rpt5 = __webpack_require__(130);

	var _crm53 = __webpack_require__(131);

	var _crm54 = __webpack_require__(132);

	var _crm55 = __webpack_require__(133);

	var _crm56 = __webpack_require__(134);

	var _crm57 = __webpack_require__(135);


	var _crm59 = __webpack_require__(136);

	var _crm58 = __webpack_require__(136);


	var _crm60 = __webpack_require__(137);

	var _cms3 = __webpack_require__(138);


	var _crm60 = __webpack_require__(139);


	var _crm61 = __webpack_require__(139);


	var _crm62 = __webpack_require__(140);

	var _crm63 = __webpack_require__(142);

	var _adm2 = __webpack_require__(143);

	var _hrm36 = __webpack_require__(144);


	var _crm64 = __webpack_require__(146);

	var _crm65 = __webpack_require__(146);

	var _crm66 = __webpack_require__(147);

	var _crm67 = __webpack_require__(148);

	var _hrm37 = __webpack_require__(149);


	var _crm68 = __webpack_require__(150);


	var _crm69 = __webpack_require__(151);


	var _crm70 = __webpack_require__(154);

	var _crm71 = __webpack_require__(155);

	var _crm72 = __webpack_require__(156);

	var _crm73 = __webpack_require__(157);


	var _crm74 = __webpack_require__(157);

	var _crm75 = __webpack_require__(158);

	var _crm76 = __webpack_require__(159);

	var _adm3 = __webpack_require__(160);

	var _crm77 = __webpack_require__(161);

	var _rpt6 = __webpack_require__(162);

	var _rpt7 = __webpack_require__(163);

	var _rpt8 = __webpack_require__(164);

	var _rpt9 = __webpack_require__(165);

	var _rpt10 = __webpack_require__(166);

	var _cms4 = __webpack_require__(167);

	var _cms5 = __webpack_require__(168);

	var _crm78 = __webpack_require__(169);

	var _crm79 = __webpack_require__(170);

	var _rpt11 = __webpack_require__(171);

	var _crm79 = __webpack_require__(172);

	var _crm80 = __webpack_require__(173);

	var _crm81 = __webpack_require__(174);

	var _crm82 = __webpack_require__(175);

	var _crm83 = __webpack_require__(176);

	var _crm84 = __webpack_require__(177);

	var _crm85 = __webpack_require__(178);

	var _crm86 = __webpack_require__(179);

	var _crm87 = __webpack_require__(180);


	var _crm89 = __webpack_require__(181);

	var _crm90 = __webpack_require__(182);

	var _rpt12 = __webpack_require__(183);


	var _rpt13 = __webpack_require__(184);


	var _crm91 = __webpack_require__(185);


	var _crm92 = __webpack_require__(188);

	var _crm93 = __webpack_require__(189);

	var _crm94 = __webpack_require__(190);


	var _crm95 = __webpack_require__(190);

	var _crm96 = __webpack_require__(191);

	var _hrm38 = __webpack_require__(193);

	var _hrm39 = __webpack_require__(194);

	var _hrm40 = __webpack_require__(195);

	var _hrm41 = __webpack_require__(196);

	var _hrm42 = __webpack_require__(197);

	var _crm97 = __webpack_require__(198);

	var _crm98 = __webpack_require__(199);

	var _cms6 = __webpack_require__(201);

	var _crm99 = __webpack_require__(202);


	var _crm100 = __webpack_require__(206);


	var _crm101 = __webpack_require__(206);

	var _crm102 = __webpack_require__(207);

	var _supplier_edit = __webpack_require__(208);

	var _supplier_add = __webpack_require__(209);

	var _supplier_lists = __webpack_require__(210);

	var _userProfile = __webpack_require__(211);

	var _userVerification = __webpack_require__(212);

	var _userEdit = __webpack_require__(213);

	var _userPermissionsEdit = __webpack_require__(214);

	var _userPermissionsAdd = __webpack_require__(215);

	var _userPermissions = __webpack_require__(216);

	var _userRolesEdit = __webpack_require__(217);

	var _userRolesAdd = __webpack_require__(218);

	var _userRoles = __webpack_require__(219);

	var _userLists = __webpack_require__(220);

	var _dashboard = __webpack_require__(221);

	var _navSidebar = __webpack_require__(222);

	var _navHeader = __webpack_require__(223);

	var _loginLoader = __webpack_require__(224);

	var _resetPassword = __webpack_require__(225);

	var _forgotPassword = __webpack_require__(226);

	var _loginForm = __webpack_require__(227);

	var _crm103 = __webpack_require__(228);

	angular.module("app.components").component("crm3020", _crm103.Crm3020Component).component("crm3010", _crm.Crm3010Component).component("crm3000", _crm2.Crm3000Component).component("crm4001", _crm3.Crm4001Component).component("crm4002", _crm4.Crm4002Component).component("crm2520", _crm5.Crm2520Component).component("crm2521", _crm6.Crm2521Component).component("crm2910", _crm7.Crm2910Component).component("crm2900", _crm8.Crm2900Component).component("cms0400", _cms.Cms0400Component).component("cms0300", _cms2.Cms0300Component).component("rpt0519", _rpt.Rpt0519Component).component("crm0751", _crm9.Crm0751Component).component("crm0750", _crm10.Crm0750Component).component("crm2820", _crm11.Crm2820Component).component("crm2810", _crm12.Crm2810Component).component("crm2800", _crm13.Crm2800Component).component("hrm1112", _hrm.Hrm1112Component).component("hrm1130", _hrm2.Hrm1130Component).component("hrm1120", _hrm3.Hrm1120Component).component("hrm1111", _hrm4.Hrm1111Component).component("hrm1110", _hrm5.Hrm1110Component).component("hrm1100", _hrm6.Hrm1100Component).component("hrm1021", _hrm7.Hrm1021Component).component("hrm1020", _hrm8.Hrm1020Component).component("hrm1010", _hrm9.Hrm1010Component).component("hrm1000", _hrm10.Hrm1000Component).component("hrm0910", _hrm11.Hrm0910Component).component("hrm0900", _hrm12.Hrm0900Component).component("hrm0810", _hrm13.Hrm0810Component).component("hrm0800", _hrm14.Hrm0800Component).component("crm0915", _crm14.Crm0915Component).component("crm0914", _crm15.Crm0914Component).component("hrm0154", _hrm15.Hrm0154Component).component("hrm0153", _hrm16.Hrm0153Component).component("tmp9999", _tmp.Tmp9999Component).component("hrm0716", _hrm17.Hrm0716Component).component("hrm0715", _hrm18.Hrm0715Component).component("hrm0714", _hrm19.Hrm0714Component).component("hrm0713", _hrm20.Hrm0713Component).component("hrm0712", _hrm21.Hrm0712Component).component("hrm0711", _hrm22.Hrm0711Component).component("hrm0600", _hrm23.Hrm0600Component).component("hrm0510", _hrm24.Hrm0510Component).component("hrm0500", _hrm25.Hrm0500Component).component("hrm0410", _hrm26.Hrm0410Component).component("hrm0400", _hrm27.Hrm0400Component).component("hrm0710", _hrm28.Hrm0710Component).component("hrm0700", _hrm29.Hrm0700Component).component("crm2710", _crm16.Crm2710Component).component("crm2700", _crm17.Crm2700Component).component("crm0510", _crm18.Crm0510Component).component("crm0500", _crm19.Crm0500Component).component("crm2610", _crm20.Crm2610Component).component("crm2602", _crm21.Crm2602Component).component("crm2601", _crm22.Crm2601Component).component("crm2600", _crm23.Crm2600Component).component("rpt0518", _rpt2.Rpt0518Component).component("hrm0310", _hrm30.Hrm0310Component).component("hrm0300", _hrm31.Hrm0300Component).component("adm0500", _adm.Adm0500Component).component("mobile", _mobile.MobileComponent).component("crm2550", _crm24.Crm2550Component).component("crm2540", _crm25.Crm2540Component).component("crm2530", _crm26.Crm2530Component).component("crm2510", _crm27.Crm2510Component).component("crm2500", _crm28.Crm2500Component).component("crm0301", _crm29.Crm0301Component).component("hrm0152", _hrm32.Hrm0152Component).component("hrm0151", _hrm33.Hrm0151Component).component("hrm0150", _hrm34.Hrm0150Component).component("hrm0141", _hrm35.Hrm0141Component).component("crm2400", _crm30.Crm2400Component).component("rpt0517", _rpt3.Rpt0517Component).component("crm0351", _crm31.Crm0351Component).component("crm0350", _crm32.Crm0350Component).component("crm2330", _crm33.Crm2330Component).component("crm2320", _crm34.Crm2320Component).component("crm2310", _crm35.Crm2310Component).component("crm2300", _crm36.Crm2300Component).component("crm2110", _crm37.Crm2110Component).component("crm2100", _crm38.Crm2100Component).component("crm2010", _crm39.Crm2010Component).component("crm2000", _crm40.Crm2000Component).component("crm1930", _crm41.Crm1930Component).component("crm1921", _crm42.Crm1921Component).component("crm1920", _crm43.Crm1920Component).component("crm1900", _crm44.Crm1900Component).component("crm0121", _crm45.Crm0121Component).component("crm0120", _crm46.Crm0120Component).component("crm0250", _crm47.Crm0250Component).component("rpt0516", _rpt4.Rpt0516Component).component("crm1831", _crm48.Crm1831Component).component("crm1830", _crm49.Crm1830Component).component("crm1821", _crm50.Crm1821Component).component("crm1820", _crm51.Crm1820Component).component("crm1811", _crm52.Crm1811Component).component("crm1810", _crm53.Crm1810Component).component("rpt0515", _rpt5.Rpt0515Component).component("crm1710", _crm54.Crm1710Component).component("crm1700", _crm55.Crm1700Component).component("crm0740", _crm56.Crm0740Component).component("crm1630", _crm57.Crm1630Component).component("crm1640", _crm58.Crm1640Component).component("crm1650", _crm59.Crm1650Component).component("crm0240", _crm60.Crm0240Component).component("cms0220", _cms3.Cms0220Component).component("crm1620", _crm66.Crm1620Component).component("crm0340", _crm67.Crm0340Component).component("hrm0140", _hrm37.Hrm0140Component).component("crm0141", _crm68.Crm0141Component).component("crm0720", _crm69.Crm0720Component).component("crm1610", _crm70.Crm1610Component).component("crm1600", _crm71.Crm1600Component).component("crm1510", _crm72.Crm1510Component).component("crm1500", _crm73.Crm1500Component).component("crm1310", _crm74.Crm1310Component).component("crm1300", _crm75.Crm1300Component).component("crm0913", _crm61.Crm0913Component).component("crm0321", _crm62.Crm0321Component).component("crm0140", _crm63.Crm0140Component).component("adm0110", _adm2.Adm0110Component).component("crm0231", _crm65.Crm0231Component).component("crm0230", _crm64.Crm0230Component).component("hrm0130", _hrm36.Hrm0130Component).component("crm1110", _crm76.Crm1110Component).component("crm0810", _crm84.Crm0810Component).component("crm0800", _crm85.Crm0800Component).component("crm1200", _crm82.Crm1200Component).component("crm1210", _crm83.Crm1210Component).component("adm0400", _adm3.Adm0400Component).component("crm0912", _crm77.Crm0912Component).component("rpt0514", _rpt6.Rpt0514Component).component("rpt0510", _rpt7.Rpt0510Component).component("rpt0513", _rpt8.Rpt0513Component).component("rpt0512", _rpt9.Rpt0512Component).component("rpt0511", _rpt10.Rpt0511Component).component("cms0210", _cms4.Cms0210Component).component("cms0200", _cms5.Cms0200Component).component("crm0911", _crm78.Crm0911Component).component("crm0330", _crm79.Crm0330Component).component("rpt0310", _rpt11.Rpt0310Component).component("crm0920", _crm80.Crm0920Component).component("crm0910", _crm81.Crm0910Component).component("crm0331", _crm86.Crm0331Component).component("crm0220", _crm87.Crm0220Component).component("crm0320", _crm88.Crm0320Component).component("crm1100", _crm89.Crm1100Component).component("crm1010", _crm90.Crm1010Component).component("rpt0200", _rpt12.Rpt0200Component).component("rpt0100", _rpt13.Rpt0100Component).component("crm0700", _crm91.Crm0700Component).component("crm0710", _crm92.Crm0710Component).component("crm0900", _crm93.Crm0900Component).component("crm1000", _crm94.Crm1000Component).component("crm0110", _crm95.Crm0110Component).component("crm0100", _crm96.Crm0100Component).component("hrm0210", _hrm38.Hrm0210Component).component("hrm0200", _hrm39.Hrm0200Component).component("hrm0120", _hrm40.Hrm0120Component).component("hrm0100", _hrm41.Hrm0100Component).component("hrm0110", _hrm42.Hrm0110Component).component("crm0410", _crm97.Crm0410Component).component("crm0400", _crm98.Crm0400Component).component("cms0100", _cms6.Cms0100Component).component("crm0310", _crm29.Crm0301Component).component("crm0300", _crm99.Crm0300Component).component("crm0210", _crm100.Crm0210Component).component("crm0200", _crm101.Crm0200Component).component("crm0130", _crm102.Crm0130Component).component("supplierEdit", _supplier_edit.SupplierEditComponent).component("supplierAdd", _supplier_add.SupplierAddComponent).component("supplierLists", _supplier_lists.SupplierListsComponent).component("userProfile", _userProfile.UserProfileComponent).component("userVerification", _userVerification.UserVerificationComponent).component("userEdit", _userEdit.UserEditComponent).component("userPermissionsEdit", _userPermissionsEdit.UserPermissionsEditComponent).component("userPermissionsAdd", _userPermissionsAdd.UserPermissionsAddComponent).component("userPermissions", _userPermissions.UserPermissionsComponent).component("userRolesEdit", _userRolesEdit.UserRolesEditComponent).component("userRolesAdd", _userRolesAdd.UserRolesAddComponent).component("userRoles", _userRoles.UserRolesComponent).component("userLists", _userLists.UserListsComponent).component("dashboard", _dashboard.DashboardComponent).component("navSidebar", _navSidebar.NavSidebarComponent).component("navHeader", _navHeader.NavHeaderComponent).component("loginLoader", _loginLoader.LoginLoaderComponent).component("resetPassword", _resetPassword.ResetPasswordComponent).component("forgotPassword", _forgotPassword.ForgotPasswordComponent).component("loginForm", _loginForm.LoginFormComponent);

/***/ }),
/* 27 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var OazaloController = function () {
	    function OazaloController() {
	        'ngInject';

	        _classCallCheck(this, OazaloController);
	    }

	    _createClass(OazaloController, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return OazaloController;
	}();

	var OazaloComponent = exports.OazaloComponent = {
	    templateUrl: './views/app/components/oazalo/oazalo.component.html',
	    controller: OazaloController,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 28 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm4000Controller = function () {
	    Crm4000Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService"];
	    function Crm4000Controller($scope, $state, $compile, $log, AclService, API, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm4000Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.currentDate = new Date();
	        this.currentYear = this.currentDate.getFullYear();
	        // this.currentMonth = this.currentDate.getMonth() + 1
	        // this.currentQuarter = Math.floor((this.currentMonth - 1) / 3);
	        this.years = [];
	        for (var year = 2016; year <= this.currentYear; year++) {
	            this.years.push(year);
	        }
	        this.m = {
	            filter: {},
	            data: null,

	            year: this.years
	        };
	    }

	    _createClass(Crm4000Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.crm4000;
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }
	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;
	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);
	            this.doSearch(page);
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'saleScore',
	        value: function saleScore(sale) {
	            var avgSale = this.m.data.avg_sale;
	            avgSale = parseFloat(avgSale);
	            sale = Number(sale);
	            if (sale > avgSale) {
	                return 25;
	            }
	            return 10;
	        }
	    }, {
	        key: 'pay',
	        value: function pay(id) {
	            var _this = this;

	            var param = {};
	            param.payment_id = id;

	            this.$log.info('ID', param);

	            var paymentService = this.API.service('pay', this.API.all('crm4000'));
	            paymentService.post(param).then(function (response) {
	                // Xử lý dữ liệu trả về từ API
	                _this.m.data = response.plain().data;
	                _this.$log.info('Phản hồi từ API:', _this.m.data);
	            }).catch(function (error) {

	                _this.$log.error(error);
	            });
	        }
	    }, {
	        key: 'frequencyScore',
	        value: function frequencyScore(frequency) {
	            var avgFrequency = this.m.data.avg_Frequency;

	            avgFrequency = parseFloat(avgFrequency);
	            frequency = Number(frequency);

	            if (frequency > avgFrequency) {
	                return 25;
	            } else {
	                return 10;
	            }
	        }
	    }, {
	        key: 'totalScore',
	        value: function totalScore(sale, rentention, frequency) {
	            sale = Number(sale);
	            rentention = Number(rentention);
	            frequency = Number(frequency);
	            var Score = 0;
	            if (sale > +this.m.data.avg_sale) {
	                Score += 25;
	            } else {
	                Score += 10;
	            }

	            if (rentention >= 3) {
	                Score += 25;
	            } else {
	                Score += 10;
	            }

	            if (frequency > this.m.data.avg_Frequency) {
	                Score += 25;
	            } else {
	                Score += 10;
	            }
	            return Score;
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this2 = this;

	            var searchService = this.API.service('search', this.API.all('crm4000'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;
	            this.$log.info(param.page);
	            var currentYear = new Date().getFullYear();
	            if (angular.isUndefined(param.year)) {
	                param.year = currentYear;
	            } else {

	                if (param.year < currentYear) {
	                    param.year = param.year;
	                }
	            }
	            this.$log.info(param.year);
	            sessionStorage.crm3000 = angular.toJson(param);
	            this.$log.info('param', param);
	            searchService.post(param).then(function (response) {
	                _this2.m.data = response.plain().data;
	                _this2.$log.info("check data search: ", _this2.m.data);
	            });
	        }
	    }]);

	    return Crm4000Controller;
	}();

	var Crm4000Component = exports.Crm4000Component = {
	    templateUrl: '/views/admin.crm4000',
	    controller: Crm4000Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 29 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm3010Controller = function () {
	    Crm3010Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService"];
	    function Crm3010Controller($scope, $state, $compile, $log, AclService, API, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm3010Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.m = {
	            filter: {},
	            data: null
	        };
	    }

	    _createClass(Crm3010Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.crm3010;
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }
	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;
	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);
	            this.doSearch(page);
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            var searchService = this.API.service('search', this.API.all('crm3010'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;
	            sessionStorage.crm3010 = angular.toJson(param);
	            this.$log.info('param', param['name']);
	            searchService.post(param).then(function (response) {
	                _this.$log.info("check data plain: ", response.plain().data);
	                _this.m.data = response.plain().data;
	                // this.$log.info("check data search: ", this.m.data);
	                // this.$log.info('model: ',param);
	                // this.$log.info('this quarter: ', this.m.quarter);
	                // this.$log.info('this year: ', this.m.year);
	            });
	        }
	    }]);

	    return Crm3010Controller;
	}();

	var Crm3010Component = exports.Crm3010Component = {
	    templateUrl: "/views/admin.crm3010",
	    controller: Crm3010Controller,
	    controllerAs: "vm",
	    bindings: {}
	};

/***/ }),
/* 30 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm3000Controller = function () {
	    Crm3000Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService"];
	    function Crm3000Controller($scope, $state, $compile, $log, AclService, API, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm3000Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.currentDate = new Date();
	        this.currentYear = this.currentDate.getFullYear();
	        this.currentMonth = this.currentDate.getMonth() + 1;
	        this.currentQuarter = Math.floor((this.currentMonth - 1) / 3);
	        this.m = {
	            filter: {},
	            data: null,
	            quarter: this.currentQuarter,
	            year: this.currentYear
	        };
	    }

	    _createClass(Crm3000Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.crm3000;
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }
	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;
	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);
	            this.doSearch(page);
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'getTotalScore',
	        value: function getTotalScore(sale, retention, order_frequency, payment_history) {
	            sale = Number(sale);
	            retention = Number(retention);
	            order_frequency = Number(order_frequency);
	            var sale_score = 0;
	            var retention_score = 0;
	            var order_frequency_score = 0;
	            var payment_score = 0;
	            var total_score = 0;

	            if (sale > +this.m.data.avg_sale) {
	                sale_score = 25;
	            } else sale_score = 10;

	            if (retention >= 3) {
	                retention_score = 25;
	            } else retention_score = 10;

	            if (order_frequency >= this.m.data.avg_OD) order_frequency_score = 25;else order_frequency_score = 10;

	            if (payment_history) payment_score = 25;else payment_score = 15;
	            total_score = sale_score + retention_score + order_frequency_score + payment_score;
	            return total_score;
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            var searchService = this.API.service('search', this.API.all('crm3000'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;
	            sessionStorage.crm3000 = angular.toJson(param);
	            this.$log.info('param', param);
	            searchService.post(param).then(function (response) {
	                //this.$log.info("check data plain: ",response.plain().data);
	                _this.m.data = response.plain().data;
	                _this.$log.info("check data search: ", _this.m.data);
	                // this.$log.info('model: ',param);
	                // this.$log.info('this quarter: ', this.m.quarter);
	                // this.$log.info('this year: ', this.m.year);
	            });
	        }
	    }]);

	    return Crm3000Controller;
	}();

	var Crm3000Component = exports.Crm3000Component = {
	    templateUrl: "/views/admin.crm3000",
	    controller: Crm3000Controller,
	    controllerAs: "vm",
	    bindings: {}
	};

/***/ }),
/* 31 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm4001Controller = function () {
	    Crm4001Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService"];
	    function Crm4001Controller($scope, $state, $compile, $log, AclService, API, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm4001Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.currentDate = new Date();
	        this.currentYear = this.currentDate.getFullYear();
	        this.currentMonth = this.currentDate.getMonth() + 1;
	        this.currentQuarter = Math.floor((this.currentMonth - 1) / 3) + 1;
	        this.m = {
	            filter: {
	                storeName: '',
	                year: this.currentYear,
	                quarter: this.currentQuarter,
	                listAboveAvg: false,
	                listAboveOrderfrequency: false,
	                listAboveRetention: false,
	                listAboveDept: false
	            },
	            data: {
	                storeCountsByScore: []
	            },
	            years: [],
	            quarter: this.currentQuarter
	        };
	    }

	    _createClass(Crm4001Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var _this = this;

	            var previousSearch = sessionStorage.crm4001;
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	            } else {
	                previousSearch = angular.fromJson(previousSearch);
	                var page = previousSearch.page;
	                delete previousSearch['page'];
	                this.m.filter = angular.copy(previousSearch);
	                this.doSearch(page);
	            }
	            this.loadYears();
	            this.loadLineChart();
	            this.lineChart = null;
	            this.$scope.$watch(function () {
	                return _this.m.filter.year;
	            }, function (newValue, oldValue) {
	                if (newValue !== oldValue) {
	                    if (_this.lineChart) {
	                        _this.lineChart.destroy();
	                        _this.lineChart = null;
	                        _this.loadLineChart();
	                    }
	                }
	            });

	            this.$scope.$watch(function () {
	                return _this.m.filter.quarter;
	            }, function (newValue, oldValue) {
	                if (newValue !== oldValue) {
	                    if (_this.lineChart) {
	                        _this.lineChart.destroy();
	                        _this.lineChart = null;
	                        _this.loadLineChart();
	                    }
	                }
	            });
	        }
	    }, {
	        key: 'loadLineChart',
	        value: function loadLineChart() {
	            var _this2 = this;

	            console.log(this.m.filter.year);

	            var param = {
	                year: this.m.filter.year,
	                quarter: this.m.filter.quarter
	            };

	            this.API.service('search', this.API.all('crm4001')).post(param).then(function (response) {
	                _this2.m.data.storeCountsByScore = response.data.storeCountsByScore; // Cập nhật data từ phản hồi
	                var line = document.getElementById('line');
	                if (line) {
	                    line.height = 280;
	                    _this2.lineChart = new Chart(line, {
	                        type: 'line',
	                        data: {
	                            labels: ['45', '50', '55', '60', '65', '70', '75', '80', '85', '90', '95', '100'],
	                            datasets: [{
	                                label: 'Số Lượng Đại Lý', // Tên series
	                                data: _this2.m.data.storeCountsByScore, // Cập nhật data
	                                fill: false,
	                                borderColor: '#2196f3', // Màu viền
	                                backgroundColor: '#2196f3', // Màu nền
	                                borderWidth: 2 // Độ rộng viền
	                            }, {
	                                label: 'Số Lượng Đại Lý Cùng Kỳ', // Tên series mới
	                                data: _this2.m.data.storeCountsByScoreSamePeriod, // Cập nhật data mới
	                                fill: false,
	                                borderColor: '#ff0000', // Màu viền đỏ
	                                backgroundColor: '#ff0000', // Màu nền đỏ
	                                borderWidth: 2 // Độ rộng viền
	                            }]
	                        },
	                        options: {
	                            responsive: true, // Đáp ứng
	                            maintainAspectRatio: false, // Giữ tỉ lệ
	                            scales: {
	                                yAxes: [{
	                                    ticks: {
	                                        beginAtZero: true,
	                                        fontSize: 12, // Tăng kích thước font chữ cho nhãn trục y
	                                        fontStyle: 'bold', // Đặt độ đậm của font chữ cho nhãn trục y
	                                        fontColor: '#333333' // Màu sắc của nhãn trục y
	                                    }
	                                }],
	                                xAxes: [{
	                                    ticks: {
	                                        fontSize: 12, // Tăng kích thước font chữ cho nhãn trục x
	                                        fontStyle: 'bold', // Đặt độ đậm của font chữ cho nhãn trục x
	                                        fontColor: '#333333' // Màu sắc của nhãn trục x
	                                    }
	                                }]
	                            },
	                            legend: {
	                                display: true,
	                                position: 'top',
	                                labels: {
	                                    fontColor: '#333333',
	                                    fontStyle: 'bold',
	                                    fontSize: 14
	                                }
	                            }
	                        }
	                    });
	                } else {
	                    console.log('Canvas element not found');
	                }
	            }).catch(function (error) {
	                console.error('Error loading line chart data:', error);
	            });
	        }
	    }, {
	        key: 'onQuarterChange',
	        value: function onQuarterChange() {
	            this.$log.info('Quarter changed to:', this.m.filter.quarter);
	            this.doSearch(1);
	        }
	    }, {
	        key: 'searchByStoreName',
	        value: function searchByStoreName() {
	            this.$log.info('Filter by store name:', this.m.filter.storeName);
	            this.m.filter.listAboveAvg = false;
	            this.m.filter.listAboveRetention = false;
	            this.m.filter.listAboveDept = false;
	            this.m.filter.listAboveOrderfrequency = false;
	            this.doSearch(1);
	            setTimeout(function () {
	                var tableElement = document.querySelector('.table_4001');
	                if (tableElement) {
	                    tableElement.scrollIntoView({ behavior: 'smooth' });
	                }
	            }, 500);
	        }
	    }, {
	        key: 'resetSearch',
	        value: function resetSearch() {
	            this.m.filter.storeName = '';
	            this.m.filter.listAboveAvg = false;
	            this.m.filter.listAboveRetention = false;
	            this.m.filter.listAboveDept = false;
	            this.m.filter.listAboveOrderfrequency = false;
	            this.doSearch(1);
	            setTimeout(function () {
	                var tableElement = document.querySelector('.table_4001');
	                if (tableElement) {
	                    tableElement.scrollIntoView({ behavior: 'smooth' });
	                }
	            }, 500);
	        }
	    }, {
	        key: 'listStoreAvg',
	        value: function listStoreAvg() {
	            this.$log.info('Button clicked: listStoreAvg');
	            this.m.filter.storeName = '';
	            this.m.filter.listAboveAvg = true;
	            this.m.filter.listAboveRetention = false;
	            this.m.filter.listAboveDept = false;
	            this.m.filter.listAboveOrderfrequency = false;
	            this.$log.info('listAboveAvg:', this.m.filter.listAboveAvg);
	            this.doSearch(1);
	            setTimeout(function () {
	                var tableElement = document.querySelector('.table_4001');
	                if (tableElement) {
	                    tableElement.scrollIntoView({ behavior: 'smooth' });
	                }
	            }, 500);
	        }
	    }, {
	        key: 'listStoreRetention',
	        value: function listStoreRetention() {
	            this.m.filter.storeName = '';
	            this.m.filter.listAboveRetention = true;
	            this.m.filter.listAboveAvg = false;
	            this.m.filter.listAboveDept = false;
	            this.m.filter.listAboveOrderfrequency = false;
	            this.doSearch(1);
	            setTimeout(function () {
	                var tableElement = document.querySelector('.table_4001');
	                if (tableElement) {
	                    tableElement.scrollIntoView({ behavior: 'smooth' });
	                }
	            }, 500);
	        }
	    }, {
	        key: 'listStoreDept',
	        value: function listStoreDept() {
	            this.m.filter.storeName = '';
	            this.m.filter.listAboveDept = true;
	            this.m.filter.listAboveAvg = false;
	            this.m.filter.listAboveRetention = false;
	            this.m.filter.listAboveOrderfrequency = false;
	            this.doSearch(1);
	            setTimeout(function () {
	                var tableElement = document.querySelector('.table_4001');
	                if (tableElement) {
	                    tableElement.scrollIntoView({ behavior: 'smooth' });
	                }
	            }, 500);
	        }
	    }, {
	        key: 'listStoreOrderfrequency',
	        value: function listStoreOrderfrequency() {
	            this.m.filter.storeName = '';
	            this.m.filter.listAboveOrderfrequency = true;
	            this.m.filter.listAboveAvg = false;
	            this.m.filter.listAboveRetention = false;
	            this.m.filter.listAboveDept = false;
	            this.doSearch(1);
	            setTimeout(function () {
	                var tableElement = document.querySelector('.table_4001');
	                if (tableElement) {
	                    tableElement.scrollIntoView({ behavior: 'smooth' });
	                }
	            }, 500);
	        }
	    }, {
	        key: 'loadYears',
	        value: function loadYears() {
	            var _this3 = this;

	            this.API.all('crm4001').customGET('years').then(function (response) {
	                _this3.m.years = response.plain();
	            }).catch(function (error) {
	                _this3.$log.error('Error loading years:', error);
	            });
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'getTotalScore',
	        value: function getTotalScore(sale, retention, order_frequency, checkdept, totalSales120, countOrderYear120) {
	            sale = Number(sale);
	            retention = Number(retention);
	            order_frequency = Number(order_frequency);
	            totalSales120 = Number(totalSales120);
	            countOrderYear120 = Number(countOrderYear120);
	            var sale_score = 0;
	            var retention_score = 0;
	            var order_frequency_score = 0;
	            var payment_score = 0;
	            var total_score = 0;

	            if (order_frequency > countOrderYear120) {
	                order_frequency_score = 25;
	            } else {
	                order_frequency_score = 10;
	            }

	            if (sale > totalSales120) {
	                sale_score = 25;
	            } else {
	                sale_score = 10;
	            }

	            if (retention >= 3) {
	                retention_score = 25;
	            } else {
	                retention_score = 10;
	            }

	            if (checkdept) {
	                payment_score = 15;
	            } else {
	                payment_score = 25;
	            }

	            total_score = order_frequency_score + sale_score + retention_score + payment_score;
	            return total_score;
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this4 = this;

	            var searchService = this.API.service('search', this.API.all('crm4001'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;
	            param.per_page = 15;
	            sessionStorage.crm4001 = angular.toJson(param);
	            this.$log.info('doSearch param', param);
	            searchService.post(param).then(function (response) {
	                _this4.m.data = response.plain().data;
	                _this4.$log.info("check data search: ", _this4.m.data);
	            }).catch(function (error) {
	                _this4.$log.error('Error in doSearch', error);
	            });
	        }
	    }]);

	    return Crm4001Controller;
	}();

	var Crm4001Component = exports.Crm4001Component = {
	    templateUrl: "/views/admin.crm4001",
	    controller: Crm4001Controller,
	    controllerAs: "vm",
	    bindings: {}
	};

/***/ }),
/* 30 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm4002Controller = function () {
	    Crm4002Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService"];
	    function Crm4002Controller($scope, $state, $compile, $log, AclService, API, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm4002Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.currentDate = new Date();
	        this.currentYear = this.currentDate.getFullYear();
	        this.currentMonth = this.currentDate.getMonth() + 1;
	        this.currentQuarter = Math.floor((this.currentMonth - 1) / 3);
	        this.m = {
	            filter: {
	                year: this.currentYear,
	                quarter: this.currentQuarter
	            },
	            data: null,
	            quarter: this.currentQuarter,
	            year: this.currentYear
	        };
	    }

	    _createClass(Crm4002Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.crm4002;
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }
	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;
	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);
	            this.loadYears();
	            this.doSearch(page);
	        }
	    }, {
	        key: 'loadYears',
	        value: function loadYears() {
	            var _this = this;

	            this.API.all('crm4002').customGET('years').then(function (response) {
	                _this.m.years = response.plain();
	            }).catch(function (error) {
	                _this.$log.error('Error loading years:', error);
	            });
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this2 = this;

	            var searchService = this.API.service('search', this.API.all('crm4002'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;
	            sessionStorage.crm4002 = angular.toJson(param);
	            this.$log.info('param', param);
	            searchService.post(param).then(function (response) {
	                _this2.m.data = response.plain().data;
	                _this2.$log.info("check data search: ", _this2.m.data);
	            });
	        }
	    }]);

	    return Crm4002Controller;
	}();

	var Crm4002Component = exports.Crm4002Component = {
	    templateUrl: "/views/admin.crm4002",
	    controller: Crm4002Controller,
	    controllerAs: "vm",
	    bindings: {}
	};

/***/ }),
/* 31 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2520Controller = function () {
	    Crm2520Controller.$inject = ["$scope", "$state", "API", "$log", "UtilsService", "ClientService"];
	    function Crm2520Controller($scope, $state, API, $log, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm2520Controller);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.m = {
	            filter: {},
	            list: null,
	            dateOptions: {
	                // formatYear: 'yy',
	                startingDay: 1
	            }
	        };

	        this.search();
	        //
	    }

	    _createClass(Crm2520Controller, [{
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.search(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {

	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	            this.m.filter.delivery_vendor_name = null;
	            this.m.filter.delivery_vendor_phone = null;
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            var $log = this.$log;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm2520'));
	            var param = angular.copy(this.m.filter);
	            param.down = 0;
	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;

	            searchService.post(param).then(function (response) {
	                _this.$log.info(response);
	                _this.m.list = response.plain().data;
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this2 = this;

	            var param = angular.copy(this.m.filter);
	            var service = this.API.service('download', this.API.all('crm2520'));
	            param.down = 1;
	            service.post(param).then(function (response) {
	                _this2.$log.info(response.data);
	                _this2.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Crm2520Controller;
	}();

	var Crm2520Component = exports.Crm2520Component = {
	    templateUrl: './views/admin.crm2520',
	    controller: Crm2520Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 32 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2521Controller = function () {
	    Crm2521Controller.$inject = ["$scope", "$state", "$compile", "$stateParams", "$log", "AclService", "API", "UtilsService", "RouteService", "ClientService"];
	    function Crm2521Controller($scope, $state, $compile, $stateParams, $log, AclService, API, UtilsService, RouteService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm2521Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.RouteService = RouteService;
	        this.ClientService = ClientService;

	        this.m = {
	            filter: {}
	        };

	        this.m.supplier_id = $stateParams.supplier_id;
	        this.loadInitData();
	    }

	    _createClass(Crm2521Controller, [{
	        key: 'save',
	        value: function save() {
	            var _this = this;

	            var RouteService = this.RouteService;
	            var ClientService = this.ClientService;
	            this.$log.info("this.form", this.m.form);

	            var service = this.API.service('save', this.API.all('crm2521'));
	            var param = angular.copy(this.m.filter);
	            param.supplier_id = this.m.supplier_id;

	            this.$log.info("param", param);

	            service.post(param).then(function (response) {
	                if (_this.m.supplier_id != null) {
	                    _this.ClientService.success("Cập nhật supplier thành công");
	                } else {
	                    _this.ClientService.success("Thêm supplier thành công");
	                }
	                _this.RouteService.goState("app.crm2520");
	            });
	        }
	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var _this2 = this;

	            if (this.m.supplier_id != null) {
	                var initService = this.API.service('load-init', this.API.all('crm2521'));
	                var param = angular.copy(this.m);
	                param.supplier_id = this.m.supplier_id;
	                initService.post(param).then(function (response) {
	                    _this2.$log.info(response);
	                    _this2.m.init = response.data;
	                    _this2.m.filter.name = _this2.m.init[0].name;
	                    _this2.m.filter.supplier_code = _this2.m.init[0].supplier_code;
	                    _this2.m.filter.contact_name = _this2.m.init[0].contact_name;
	                    _this2.m.filter.address = _this2.m.init[0].address;

	                    _this2.m.filter.contact_email = _this2.m.init[0].contact_email;
	                    _this2.m.filter.contact_tel = _this2.m.init[0].contact_tel;
	                });
	            }
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Crm2521Controller;
	}();

	var Crm2521Component = exports.Crm2521Component = {
	    //templateUrl: './views/app/components/crm2521/crm2521.component.html',
	    templateUrl: '/views/admin.crm2521',
	    controller: Crm2521Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 33 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2910Controller = function () {
	    Crm2910Controller.$inject = ["$scope", "$state", "$log", "API", "UtilsService", "ClientService", "$stateParams", "RouteService", "AclService"];
	    function Crm2910Controller($scope, $state, $log, API, UtilsService, ClientService, $stateParams, RouteService, AclService) {
	        'ngInject';

	        _classCallCheck(this, Crm2910Controller);

	        this.$state = $state;
	        this.$log = $log;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.RouteService = RouteService;
	        this.can = AclService.can;
	        this.m = {
	            form: {},
	            init: {}
	        };
	        this.m.warehouse_id = $stateParams.warehouse_id;
	        this.m.isSaving = false;
	    }

	    _createClass(Crm2910Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.loadInit();
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var param = {
	                warehouse_id: this.m.warehouse_id
	            };
	            var service = this.API.service('load-init', this.API.all('crm2910'));
	            service.post(param).then(function (response) {
	                _this.$log.info('m init: ', _this.m);
	                _this.m.form = response.data.form;
	            });
	        }
	    }, {
	        key: 'save',
	        value: function save() {
	            //let $log = this.$log;
	            var that = this;
	            var alerts = that.alerts;
	            var RouteService = that.RouteService;
	            var ClientService = that.ClientService;
	            if (that.m.isSaving == true) {
	                swal("Đang xử lý!");
	                return;
	            }
	            that.m.isSaving = true;
	            var param = angular.copy(that.m.form);
	            param.warehouse_id = that.m.warehouse_id;
	            that.$log.info('param: 1', param);
	            swal({
	                title: "Bạn có muốn lưu thông tin kho này",
	                text: "Thông tin không thể sửa sau khi lưu",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var saveService = that.API.service('save', that.API.all('crm2910'));
	                saveService.post(param).then(function (response) {
	                    var id = response.data;
	                    // ClientService.success(id);
	                    that.m.warehouse_id = id;
	                    // RouteService.goState('app.crm1830');
	                    that.loadInit();
	                });
	            });
	        }
	    }]);

	    return Crm2910Controller;
	}();

	var Crm2910Component = exports.Crm2910Component = {
	    templateUrl: '/views/admin.crm2910',
	    controller: Crm2910Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 34 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2900Controller = function () {
	    Crm2900Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService"];
	    function Crm2900Controller($scope, $state, $compile, $log, AclService, API, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm2900Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.m = {
	            filter: {},
	            data: null,
	            dateOptions: {
	                // formatYear: 'yy',
	                startingDay: 1
	            },
	            datetimepicker_options: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Crm2900Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.crm2900;
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }
	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;
	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);
	            this.doSearch(page);
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var thisClass = this;
	            // Get list 
	            var searchService = this.API.service('search', this.API.all('crm2900'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;

	            sessionStorage.crm2900 = angular.toJson(param);

	            thisClass.$log.info('param', param);
	            searchService.post(param).then(function (response) {
	                thisClass.$log.info("plain: ", response.plain().data);
	                thisClass.m.data = response.plain().data.data;
	                thisClass.$log.info("data: ", thisClass.m.data);
	            });
	        }
	    }]);

	    return Crm2900Controller;
	}();

	var Crm2900Component = exports.Crm2900Component = {
	    templateUrl: '/views/admin.crm2900',
	    controller: Crm2900Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 35 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Cms0400Controller = function () {
	    Cms0400Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService"];
	    function Cms0400Controller($scope, $state, $compile, $log, AclService, API, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Cms0400Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.m = {
	            filter: {},
	            data: null,
	            dateOptions: {
	                // formatYear: 'yy',
	                startingDay: 1
	            },
	            datetimepicker_options: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	            //
	        };
	    }

	    _createClass(Cms0400Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.cms0400;

	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            this.doSearch(page);
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var thisClass = this;
	            // Get list 
	            var searchService = this.API.service('search', this.API.all('cms0400'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;

	            sessionStorage.cms0400 = angular.toJson(param);

	            thisClass.$log.info('param', param);
	            searchService.post(param).then(function (response) {
	                thisClass.$log.info(response.plain().data);
	                thisClass.m.data = response.plain().data.data;
	                thisClass.$log.info(thisClass.m.data);
	            });
	        }
	    }]);

	    return Cms0400Controller;
	}();

	var Cms0400Component = exports.Cms0400Component = {
	    templateUrl: '/views/admin.cms0400',
	    controller: Cms0400Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 36 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Cms0300Controller = function () {
	    Cms0300Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService"];
	    function Cms0300Controller($scope, $state, $compile, $log, AclService, API, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Cms0300Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.m = {
	            filter: {},
	            data: null,
	            dateOptions: {
	                // formatYear: 'yy',
	                startingDay: 1
	            },
	            datetimepicker_options: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	            //
	        };
	    }

	    _createClass(Cms0300Controller, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }, {
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.cms0300;

	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            this.doSearch(page);
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var thisClass = this;
	            // Get list 
	            var searchService = this.API.service('search', this.API.all('cms0300'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;

	            sessionStorage.cms0300 = angular.toJson(param);

	            thisClass.$log.info('param', param);
	            searchService.post(param).then(function (response) {
	                thisClass.$log.info(response.plain().data);
	                thisClass.m.data = response.plain().data.data;
	                thisClass.$log.info(thisClass.m.data);
	            });
	        }
	    }, {
	        key: 'updateFollowers',
	        value: function updateFollowers() {
	            var thisClass = this;
	            // Get list 
	            var searchService = this.API.service('update-followers', this.API.all('cms0300'));
	            var param = angular.copy();
	            // param.page = page;

	            sessionStorage.cms0200 = angular.toJson(param);

	            thisClass.$log.info('param', param);
	            searchService.post(param).then(function (response) {
	                // thisClass.$log.info(response.plain().data);
	                // thisClass.m.data = response.plain().data.data;
	                // thisClass.$log.info(thisClass.m.data);
	            });
	        }
	    }]);

	    return Cms0300Controller;
	}();

	var Cms0300Component = exports.Cms0300Component = {
	    templateUrl: '/views/admin.cms0300',
	    controller: Cms0300Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 37 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Rpt0519Controller = function () {
	    Rpt0519Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "DialogService", "ClientService"];
	    function Rpt0519Controller($scope, $state, $compile, $log, AclService, API, UtilsService, DialogService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Rpt0519Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.DialogService = DialogService;
	        //

	        this.m = {
	            filter: {},
	            datetimepicker_options: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Rpt0519Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.rpt0519;

	            this.loadInitData();
	            if (angular.isUndefined(previousSearch)) {

	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var index = previousSearch.index;

	            this.m.activeFlag = index;
	            delete previousSearch['index'];
	            this.m.filter = angular.copy(previousSearch);

	            // this.loadData(index);
	        }
	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var self = this;
	            var service = this.API.service('init', this.API.all('rpt0519'));
	            var param = {};
	            service.post(param).then(function (response) {
	                self.m.init = response.plain().data;
	            });
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            var _this = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('rpt0519'));
	            var param = angular.copy(this.m.filter);
	            if (param.from_date) {
	                param.from_date = moment(param.from_date).format('YYYY-MM-DD');
	            }
	            if (param.to_date) {
	                param.to_date = moment(param.to_date).format('YYYY-MM-DD');
	            }

	            sessionStorage.rpt0519 = angular.toJson(param);
	            //param.pageSize = $scope.m.paginationInfo.pageSize;
	            searchService.post(param).then(function (response) {
	                _this.$log.info(_this.m);
	                var data = response.plain().data.data;
	                var data2 = response.plain().data.data2;
	                var data3 = response.plain().data.data3;
	                var data4 = response.plain().data.data4;
	                // this.m.list = list;
	                _this.m.data = data;
	                _this.m.data2 = data2;
	                _this.m.data3 = data3;
	                _this.m.data4 = data4;
	                _this.m.diff_s = response.plain().data.diff_s;
	            });
	        }
	    }]);

	    return Rpt0519Controller;
	}();

	var Rpt0519Component = exports.Rpt0519Component = {
	    templateUrl: '/views/admin.rpt0519',
	    controller: Rpt0519Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 38 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0751Controller = function () {
	    Crm0751Controller.$inject = ["$scope", "$state", "API", "$log", "UtilsService", "ClientService", "$stateParams", "RouteService", "AclService"];
	    function Crm0751Controller($scope, $state, API, $log, UtilsService, ClientService, $stateParams, RouteService, AclService) {
	        'ngInject';

	        _classCallCheck(this, Crm0751Controller);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.$scope = $scope;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.RouteService = RouteService;
	        this.can = AclService.can;
	        this.m = {
	            filter: {},
	            list: null,
	            dateOptions: {
	                // formatYear: 'yy',
	                startingDay: 1
	            },
	            formUpload: {
	                file: null,
	                images: []
	            }
	        };
	        this.m.isUploaded = false; // upload image 
	        this.m.store_order_id = $stateParams.store_order_id;
	        this.m.payment_id = $stateParams.payment_id;

	        this._setupFileUpload("fileUpload", this.m.formUpload);
	    }

	    _createClass(Crm0751Controller, [{
	        key: "$onInit",
	        value: function $onInit() {
	            if (this.m.store_order_id == null || this.m.store_order_id <= 0) {
	                this.ClientService.warning("Vui lòng chọn đơn hàng");
	                this.RouteService.goState("app.crm0200");
	                return;
	            }
	            if (this.m.payment_id == null) {
	                this.m.filter.payment_date = new Date();
	                this.m.filter.bank_account_id = null;
	                this.m.filter.notes = null;
	                this.m.filter.salesman_id = 0;
	                this.m.filter.store_order_id = null;
	            }

	            this.m.filter.payment_date = new Date();
	            this.loadInitData();
	            this.loadImageList();
	        }
	    }, {
	        key: "_setupFileUpload",
	        value: function _setupFileUpload(fileControlId, formModel) {
	            var self = this;
	            var fileControl = angular.element("#" + fileControlId);
	            fileControl.on('change', function () {
	                var filesSelected = fileControl[0].files;
	                if (filesSelected.length > 0) {
	                    var fileToLoad = filesSelected[0];
	                    var fileReader = new FileReader();

	                    fileReader.onload = function (fileLoadedEvent) {
	                        var srcData = fileLoadedEvent.target.result; // <--- data: base64 
	                        self.$scope.$apply(function () {
	                            formModel.file = srcData;
	                        });
	                    };
	                    fileReader.readAsDataURL(fileToLoad);
	                }
	            });
	        }
	    }, {
	        key: "sort",
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, $scope.m.filter.orderBy, $scope.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.doSearch(1);
	        }
	    }, {
	        key: "save",
	        value: function save() {
	            var that = this;
	            var $log = this.$log;
	            //$log.info('aihihihihi', this.m.filter);
	            var alerts = this.alerts;
	            var RouteService = this.RouteService;
	            var ClientService = this.ClientService;
	            var saveService = this.API.service('save', this.API.all('crm0751'));
	            var param = angular.copy(this.m.filter);

	            if (this.m.payment_id == null) {
	                param.payment_id = null;
	            } else {
	                param.payment_id = this.m.payment_id;
	            }

	            saveService.post(param).then(function (response) {

	                if (param.payment_id == null) {
	                    ClientService.success('Thêm mới thanh toán trước thành công');
	                } else {
	                    ClientService.success('Cập nhật thanh toán trước thành công');
	                }
	                RouteService.goState('app.crm0750');
	                // that.loadInitData();
	            });
	        }
	    }, {
	        key: "loadInitData",
	        value: function loadInitData() {
	            var _this = this;

	            var param = {
	                store_order_id: this.m.store_order_id,
	                payment_id: this.m.payment_id
	            };
	            var log = this.$log;

	            var service = this.API.service('load-init', this.API.all('crm0751'));
	            service.post(param).then(function (response) {
	                _this.m.init = response.data; //initiate list of bank account
	                // let statusList    = response.data.statusList;
	                // if (statusList != null) {
	                //     this.m.statusList = statusList;
	                // }
	                if (_this.m.init.inforPayment == null) {
	                    _this.m.order = _this.m.init.order;
	                    log.info("check order ", _this.m);
	                    _this.m.filter.store_order_id = _this.m.order.store_order_id; // send to insert
	                    _this.m.filter.store_order_code = _this.m.order.store_order_code; // show on screen  
	                    _this.m.filter.address = _this.m.order.address; //show on screen  
	                    _this.m.filter.total = _this.m.order.total; //show on screen  
	                    _this.m.filter.discount_1 = _this.m.order.discount_1; //show on screen  
	                    _this.m.filter.order_sts = _this.m.order.order_sts; //show on screen  
	                    _this.m.filter.order_date = new Date(_this.m.order.order_date); //show on screen  
	                    _this.m.filter.delivery_date = new Date(_this.m.order.delivery_date);
	                    _this.m.filter.payment_sts = _this.m.order.payment_sts; //show on screen  

	                    _this.m.filter.total_with_discount = _this.m.order.total_with_discount; //show on screen  
	                    _this.m.filter.name = _this.m.order.name; //show on screen 
	                    _this.m.filter.salesman_id = _this.m.order.salesman_id; // send to insert

	                    _this.m.filter.payment_money = Math.round(parseFloat(_this.m.order.total) * 1 / 100 * 99 / 100 / 1000) * 1000;
	                    if (_this.m.filter.salesman_id == null) _this.m.filter.salesman_id = 0;
	                    _this.m.filter.salesman_name = _this.m.order.salesman_name; //show on screen 
	                }
	                //log.info('init: ', this.m.init);
	                if (_this.m.init.inforPayment != null) {
	                    _this.m.filter.payment_date = new Date(_this.m.init.inforPayment[0].payment_date);
	                    _this.m.filter.bank_account_id = _this.m.init.inforPayment[0].bank_account_id;
	                    _this.m.filter.payment_money = parseInt(_this.m.init.inforPayment[0].payment_money);
	                    _this.m.filter.payment_type = _this.m.init.inforPayment[0].payment_type.toString();
	                    _this.m.filter.notes = _this.m.init.inforPayment[0].notes;
	                    // Show saleman_name , address , store_name
	                    _this.m.filter.salesman_name = _this.m.init.inforPayment[0].salesman_name;
	                    _this.m.filter.address = _this.m.init.inforPayment[0].store_address;
	                    _this.m.filter.name = _this.m.init.inforPayment[0].store_name;
	                    if (_this.m.init.inforPayment[0].delivery_date) {
	                        _this.m.filter.delivery_date = new Date(_this.m.init.inforPayment[0].delivery_date);
	                    }
	                    _this.m.filter.order_date = new Date(_this.m.init.inforPayment[0].order_date);
	                    _this.m.filter.store_order_id = _this.m.init.inforPayment[0].store_order_id; // send to insert
	                    _this.m.filter.store_order_code = _this.m.init.inforPayment[0].store_order_code; // show on screen  
	                    _this.m.filter.total = _this.m.init.inforPayment[0].total; //show on screen  
	                    _this.m.filter.discount_1 = _this.m.init.inforPayment[0].discount_1; //show on screen  
	                    _this.m.filter.order_sts = _this.m.init.inforPayment[0].order_sts; //show on screen  
	                    _this.m.filter.payment_sts = _this.m.init.inforPayment[0].payment_sts; //show on screen  

	                    _this.m.filter.store_id = _this.m.init.inforPayment[0].store_id; // show on screen  
	                    _this.m.filter.salesman_id = _this.m.init.inforPayment[0].salesman_id; // show on screen 
	                    // this.m.filter.order_date            = this.m.init.inforPayment[0].order_date; //show on screen  
	                    _this.m.filter.total_with_discount = _this.m.init.inforPayment[0].total_with_discount; //show on screen  
	                }
	                //log.info('filter: ', this.m.filter);
	            });
	        }
	    }, {
	        key: "upload",
	        value: function upload() {
	            var self = this;
	            var service = this.API.service('upload', this.API.all('crm0751'));

	            if (self.m.isUploaded == true) {
	                swal("Đang xử lý!");
	                return;
	            }

	            self.m.isUploaded = true;
	            var param = {
	                id: this.m.payment_id,
	                file: this.m.formUpload.file
	            };

	            if (param.id > 0) {
	                service.post(param).then(function (response) {
	                    if (response.data.rtnCd == true) {
	                        self.m.formUpload.file = null;
	                        self.ClientService.success('Thêm hình ảnh thành công');
	                        self.loadImageList();
	                    } else {
	                        self.ClientService.error('Không thể thêm hình ảnh');
	                    }
	                    self.m.isUploaded = false;
	                });
	            }
	        }
	    }, {
	        key: "loadImageList",
	        value: function loadImageList() {
	            var self = this;
	            var param = {
	                id: this.m.payment_id
	            };

	            if (param.id > 0) {
	                var service = this.API.service('load-images', this.API.all('crm0751'));

	                service.post(param).then(function (response) {
	                    if (response.data.rtnCd == true) {
	                        self.m.formUpload.images = response.data.list;
	                    } else {
	                        self.ClientService.error('Có lỗi khi tải hình ảnh');
	                    }
	                });
	            }
	        }
	    }, {
	        key: "sendRequest",
	        value: function sendRequest() {
	            var that = this;
	            var param = angular.copy(that.m.filter);
	            param.payment_id = this.m.payment_id;
	            var ClientService = that.ClientService;
	            if (that.m.formUpload.images.length == 0) {
	                that.ClientService.error("chưa nhập chứng từ");
	                return;
	            }

	            swal({
	                title: "Bạn có muốn đề xuất duyệt thưởng thanh toán trước này",
	                text: "Thông tin không thể sửa sau khi đề xuất",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var saveService = that.API.service('send-request', that.API.all('crm0751'));
	                saveService.post(param).then(function (response) {
	                    var msg = response.data;
	                    ClientService.success(msg);
	                    // RouteService.goState('app.crm1830');
	                    that.loadInitData();
	                });
	            });
	        }
	    }, {
	        key: "accpet",
	        value: function accpet() {
	            var that = this;
	            var param = angular.copy(that.m.filter);
	            param.payment_id = this.m.payment_id;
	            var ClientService = that.ClientService;
	            swal({
	                title: "Bạn có muốn duyệt xuất duyệt chi phí này",
	                text: "Thông tin sau khi duyệt sẽ được bộ phận kế toán chi trả ",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var saveService = that.API.service('accept', that.API.all('crm0751'));
	                saveService.post(param).then(function (response) {
	                    var msg = response.data;
	                    ClientService.success(msg);
	                    // RouteService.goState('app.crm1830');
	                    that.loadInitData();
	                });
	            });
	        }
	    }, {
	        key: "deny",
	        value: function deny() {
	            var that = this;
	            var param = angular.copy(that.m.filter);
	            param.payment_id = this.m.payment_id;
	            var ClientService = that.ClientService;
	            swal({
	                title: "Bạn có muốn không duyệt xuất duyệt chi phí này",
	                text: "Thông tin không thể sửa sau khi đề xuất",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var saveService = that.API.service('deny', that.API.all('crm0751'));
	                saveService.post(param).then(function (response) {
	                    var msg = response.data;
	                    ClientService.success(msg);
	                    // RouteService.goState('app.crm1830');
	                    that.loadInitData();
	                });
	            });
	        }
	    }, {
	        key: "accountantConfirm",
	        value: function accountantConfirm() {
	            var that = this;
	            var param = angular.copy(that.m.filter);
	            param.payment_id = this.m.payment_id;
	            var RouteService = this.RouteService;
	            var ClientService = that.ClientService;
	            swal({
	                title: "Bạn có muốn xác nhận thưởng thanh toán",
	                text: "Thông tin không thể sửa sau khi đề xuất",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var saveService = that.API.service('acc-confirm', that.API.all('crm0751'));
	                saveService.post(param).then(function (response) {
	                    var msg = response.data;
	                    ClientService.success(msg);
	                    RouteService.goState('app.crm0700');
	                    // that.loadInitData();
	                    // RouteService.goState('app.crm0700');
	                });
	            });
	        }
	    }, {
	        key: "clickRequestCancel",
	        value: function clickRequestCancel() {
	            var that = this;
	            var param = angular.copy(that.m.filter);
	            param.payment_id = this.m.payment_id;
	            var ClientService = that.ClientService;
	            swal({
	                title: "Bạn có muốn huỷ đề xuất thưởng thanh toán này",
	                text: "Thông tin không thể sửa sau khi đề xuất",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var saveService = that.API.service('cancel', that.API.all('crm0751'));
	                saveService.post(param).then(function (response) {
	                    var msg = response.data;
	                    ClientService.success(msg);
	                    // RouteService.goState('app.crm1830');
	                    that.loadInit();
	                });
	            });
	        }
	    }]);

	    return Crm0751Controller;
	}();

	var Crm0751Component = exports.Crm0751Component = {
	    // templateUrl: './views/app/components/crm0700/crm0700.component.html',
	    templateUrl: '/views/admin.crm0751',
	    controller: Crm0751Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Crm0750Component = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _crm = __webpack_require__(40);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0750Controller = function () {
	    Crm0750Controller.$inject = ["$scope", "$state", "API", "$log", "UtilsService", "ClientService", "DialogService"];
	    function Crm0750Controller($scope, $state, API, $log, UtilsService, ClientService, DialogService) {
	        'ngInject';

	        _classCallCheck(this, Crm0750Controller);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.DialogService = DialogService;
	        this.m = {
	            activeFlag: 1,

	            list: null,
	            dateOptions: {
	                // formatYear: 'yy',
	                startingDay: 1
	            },
	            datetimepicker_options: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            },
	            1: {
	                filter: {},
	                data: {}
	            },
	            2: {
	                filter: {},
	                data: {}
	            }
	        };
	    }

	    _createClass(Crm0750Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.init();
	        }
	    }, {
	        key: 'init',
	        value: function init() {
	            var previousSearch = sessionStorage.crm0750;
	            this.loadInit();
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;
	            var index = previousSearch.index;
	            this.m.activeFlag = index;

	            delete previousSearch['page'];
	            delete previousSearch['index'];
	            this.m[index].filter = angular.copy(previousSearch);
	            this.doSearch(index, page);
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var service = this.API.service('load-promotion', this.API.all('crm0750'));
	            service.post().then(function (response) {
	                var salesmanList = response.data.salesmanList;
	                if (salesmanList != null) {
	                    _this.m.listSalesman = salesmanList;
	                }
	                var statusList = response.data.statusList;
	                if (statusList != null) {
	                    _this.m.statusList = statusList;
	                }
	            });
	        }
	    }, {
	        key: 'search',
	        value: function search() {

	            this.doSearch(1, 1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter(index) {
	            if (index < 1 || index > 2) {
	                return;
	            }
	            this.m[index].filter = {
	                // orderBy: this.m.filter.orderBy,
	                // orderDirection: this.m.filter.orderDirection
	            };
	            this.doSearch(index, 1);
	        }
	    }, {
	        key: 'chooseTab',
	        value: function chooseTab(index) {
	            if (index < 1 || index > 3) {
	                return;
	            }
	            this.m.activeFlag = index;
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(index, page) {
	            var _this2 = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm0750'));
	            var param = angular.copy(this.m[index].filter);
	            param.down = 0;
	            param.page = page;
	            param.index = index;
	            sessionStorage.crm0700 = angular.toJson(param);

	            searchService.post(param).then(function (response) {

	                _this2.m[index].data = response.plain().data.data;
	                _this2.$log.info(_this2.m);
	                // this.m.data = response.plain().data;
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this3 = this;

	            var param = angular.copy(this.m[1].filter);
	            var service = this.API.service('download', this.API.all('crm0750'));
	            param.down = 1;
	            service.post(param).then(function (response) {
	                _this3.$log.info(response.data);
	                _this3.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }, {
	        key: 'notifyZalo',
	        value: function notifyZalo(payment_id) {
	            var self = this;
	            // this.m.canEdit = false;
	            // this.$log.info('check print packing');
	            swal({
	                title: "Bạn có muốn thông báo thanh toán tới khách hàng qua ZALO?",
	                text: "Sau khi bấm tài khoản zalo của khách hàng sẽ nhận được thông báo",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var param = {
	                    payment_id: payment_id
	                };

	                var service = self.API.service('notify-zalo', self.API.all('crm0750'));
	                service.post(param).then(function (res) {

	                    self.ClientService.warning(res.data.errorMsg);
	                    self.init();
	                });
	            });
	        }
	    }, {
	        key: 'update_accountant',
	        value: function update_accountant(store_id, store_name) {
	            var modalOption = void 0;
	            var DialogClose = void 0;
	            var that = this;

	            var param = {
	                store_id: store_id,
	                store_name: store_name
	                // API: that.API
	            };
	            // that.$log.info('sale user', param);
	            modalOption = {
	                size: 'dialog-768',
	                controller: _crm.Crm0750DialogController,
	                resolve: {
	                    param: param
	                }
	            };
	            DialogClose = this.DialogService.open('crm0700_dialog', modalOption);
	            DialogClose.result.then(function (data) {
	                that.doSearch(1, 1);
	            });
	        }
	    }]);

	    return Crm0750Controller;
	}();

	var Crm0750Component = exports.Crm0750Component = {
	    // templateUrl: './views/app/components/crm0700/crm0700.component.html',
	    templateUrl: '/views/admin.crm0750',
	    controller: Crm0750Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 40 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0750DialogController = exports.Crm0750DialogController = function () {
	    Crm0750DialogController.$inject = ["$scope", "$uibModalInstance", "DialogService", "$log", "$filter", "API", "param"];
	    function Crm0750DialogController($scope, $uibModalInstance, DialogService, $log, $filter, API, param) {
	        'ngInject';

	        _classCallCheck(this, Crm0750DialogController);

	        this.$scope = $scope;
	        this.$log = $log;
	        this.DialogService = DialogService;
	        this.$uibModalInstance = $uibModalInstance;
	        this.API = API;
	        //his.$log.info('dialog param', param);
	        this.m = {
	            store_id: param.store_id,
	            store_name: param.store_name
	            // this.API = param.API;
	        };this.$log.info('check dialog: ', this.m);
	    }

	    _createClass(Crm0750DialogController, [{
	        key: 'update',
	        value: function update() {
	            var _this = this;

	            var searchService = this.API.service('update-accountant', this.API.all('crm0750'));
	            var param = angular.copy(this.m);

	            searchService.post(param).then(function (response) {
	                _this.DialogService.close();
	            });
	        }
	    }, {
	        key: 'cancel',
	        value: function cancel() {
	            this.DialogService.close();
	        }
	    }]);

	    return Crm0750DialogController;
	}();

/***/ }),
/* 41 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2820Controller = function () {
	    Crm2820Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Crm2820Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Crm2820Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.RouteService = RouteService;

	        this.m = {
	            init: {},
	            form: {
	                // changed_date: moment(new Date())
	            },
	            dateOptions: {
	                format: 'YYYY-MM-DD'
	            }
	            // THIS IS DEFAULT TEMPLATE
	        };
	    }

	    _createClass(Crm2820Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.m.kpi_id = this.$stateParams.kpi_id;
	            this.m.month = this.$stateParams.month;
	            this.loadInitData();
	        }

	        /**
	         * Load init data
	         */

	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var _this = this;

	            var service = this.API.service('init-data', this.API.all('crm2820'));
	            service.post({ kpi_id: this.m.kpi_id }).then(function (response) {
	                var id = _this.m.init.id;

	                var listProduct = response.data.listProduct;
	                listProduct.forEach(function (item) {
	                    item.amount = 0;
	                });
	                _this.m.form.listProduct = listProduct;
	                _this.m.form.kpi = response.data.kpi;
	                console.log('this.m.form :', _this.m.form);

	                // this.m.init.id = id;

	                _this.load(_this.m.kpi_id, _this.m.month);
	            });
	        }

	        /**
	         * Load entity
	         * @param {int} id Entity id
	         */

	    }, {
	        key: 'load',
	        value: function load(kpi_id, month) {
	            var _this2 = this;

	            var service = this.API.service('load', this.API.all('crm2820'));
	            var param = { kpi_id: kpi_id, month: month };
	            service.post(param).then(function (response) {
	                var listTargetProduct = response.data.listTargetProduct;
	                // let mapping
	                var mapProduct = [];
	                listTargetProduct.forEach(function (item) {
	                    mapProduct[item.product_id] = item;
	                });
	                console.log('mapProduct :', mapProduct);

	                var listProduct = angular.copy(_this2.m.form.listProduct);
	                listProduct.forEach(function (item) {
	                    if (mapProduct[item.product_id] != undefined) {
	                        item.amount = mapProduct[item.product_id].amount;
	                    }
	                });

	                _this2.m.form.listProduct = listProduct;
	            });
	        }
	    }, {
	        key: 'validate',
	        value: function validate(model, form) {
	            //if( model.start_date == null || model.start_date == undefined ) {
	            //    this.ClientService.warning("Vui lòng nhập Ngày bắt đầu");
	            //    return false;
	            //}

	            return true;
	        }

	        /**
	         * Load entity
	         * @param {int} id Entity id
	         */

	    }, {
	        key: 'save',
	        value: function save(isValid, form) {
	            var _this3 = this;

	            if (this.validate(this.m.form, form)) {
	                var listProduct = [];

	                this.m.form.listProduct.forEach(function (product) {
	                    if (product.amount > 0) {
	                        listProduct.push({
	                            product_id: product.product_id,
	                            amount: product.amount
	                        });
	                    }
	                });

	                console.log('listProduct :', listProduct);
	                var param = {
	                    kpi_id: this.m.kpi_id,
	                    month: this.m.month,
	                    listProduct: listProduct
	                };

	                // convert moment to date 'YYYY-MM-DD'
	                // let dateFields = ["dob", "start_date", "end_date", "probation_start_date", "probation_end_date", "card_id_issue_on"];
	                // dateFields.forEach((item) => {
	                //     if (param[item] != null ) {
	                //         param[item] = param[item].format('YYYY-MM-DD');
	                //     }
	                // });

	                var service = this.API.service('save', this.API.all('crm2820'));
	                service.post(param).then(function (response) {
	                    console.log('response.data :', response.data);

	                    var result = response.data;
	                    if (result.rtnCd == true) {
	                        _this3.ClientService.success(result.msg);
	                    } else {
	                        _this3.ClientService.error(result.msg);
	                    }
	                }, function (response) {
	                    _this3.m.errors = response.data.errors;
	                });
	            }
	        }
	    }]);

	    return Crm2820Controller;
	}();

	var Crm2820Component = exports.Crm2820Component = {
	    //templateUrl: './views/app/components/crm2820/crm2820.component.html',
	    templateUrl: '/views/admin.crm2820',
	    controller: Crm2820Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 42 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2810Controller = function () {
	    Crm2810Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Crm2810Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Crm2810Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.RouteService = RouteService;

	        this.m = {
	            init: {
	                listMonth: [{ id: 1, display: "Tháng 1" }, { id: 2, display: "Tháng 2" }, { id: 3, display: "Tháng 3" }, { id: 4, display: "Tháng 4" }, { id: 5, display: "Tháng 5" }, { id: 6, display: "Tháng 6" }, { id: 7, display: "Tháng 7" }, { id: 8, display: "Tháng 8" }, { id: 9, display: "Tháng 9" }, { id: 10, display: "Tháng 10" }, { id: 11, display: "Tháng 11" }, { id: 12, display: "Tháng 12" }]
	            },
	            isInit: true,
	            activeFlag: 1,
	            store_id: this.$stateParams.store_id,
	            filter: {
	                month: 1
	            },
	            kpi: null,
	            list: null,
	            dateOptions: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Crm2810Controller, [{
	        key: "$onInit",
	        value: function $onInit() {
	            // Load Init data
	            this.loadInit();
	        }
	    }, {
	        key: "loadInit",
	        value: function loadInit() {
	            var _this = this;

	            var param = {};
	            this.API.service('init-data', this.API.all('crm2810')).post(param).then(function (response) {
	                var responseData = response.plain().data;
	                _this.m.init.listYear = responseData.listYear;
	                _this.m.filter.year = _this.m.init.listYear[0];
	                _this.search();
	            });
	        }
	    }, {
	        key: "search",
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            // this.doSearch(1);
	            this.getKpi();
	        }
	    }, {
	        key: "chooseTab",
	        value: function chooseTab(tab) {
	            this.m.activeFlag = tab;
	        }
	    }, {
	        key: "resetFilter",
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: "getKpi",
	        value: function getKpi() {
	            var _this2 = this;

	            var param = angular.copy(this.m.filter);
	            param.store_id = this.m.store_id;

	            var searchService = this.API.service('search', this.API.all('crm2810'));
	            // sessionStorage.crm2810 = angular.toJson(param);

	            searchService.post(param).then(function (response) {
	                _this2.m.isInit = false;
	                _this2.$log.info(response.plain());
	                var result = response.plain();

	                var kpi = result.data.kpi;
	                var kpiSummary = {
	                    total_target: 0,
	                    total_result: 0,
	                    percent: 0
	                };
	                if (kpi != null) {
	                    for (var i = 1; i <= 12; i++) {
	                        var propTarget = "month_" + i + "_target";
	                        var propPercent = "percent_" + i;
	                        var propResult = "month_" + i + "_result";
	                        if (kpi[propTarget] > 0) {
	                            kpi[propPercent] = parseInt(kpi[propResult]) / parseInt(kpi[propTarget]) * 100;
	                        } else {
	                            kpi[propPercent] = 0;
	                        }

	                        kpiSummary.total_target += parseInt(kpi[propTarget]);
	                        kpiSummary.total_result += parseInt(kpi[propResult]);
	                    }
	                }

	                if (kpiSummary.total_target > 0) {
	                    kpiSummary.percent = kpiSummary.total_result * 100 / kpiSummary.total_target;
	                }

	                _this2.m.kpi = kpi;
	                _this2.m.kpiSummary = kpiSummary;
	                _this2.loadMonth();
	                _this2.loadYear();
	            });
	        }
	    }, {
	        key: "createKpi",
	        value: function createKpi() {
	            var _this3 = this;

	            var param = angular.copy(this.m.filter);
	            param.store_id = this.m.store_id;

	            var searchService = this.API.service('create-kpi', this.API.all('crm2810'));

	            searchService.post(param).then(function (response) {
	                var result = response.data.data;
	                if (result.rtnCd == true) {
	                    _this3.ClientService.success(result.msg);
	                    _this3.getKpi();
	                } else {
	                    _this3.ClientService.error(result.msg);
	                }
	            });
	        }
	    }, {
	        key: "loadMonth",
	        value: function loadMonth() {
	            var _this4 = this;

	            if (this.m.kpi == null || this.m.kpi == undefined) {
	                return;
	            }

	            var param = {
	                kpi_id: this.m.kpi.id,
	                month: this.m.filter.month
	            };
	            console.log('param :', param);
	            var service = this.API.service('load-month', this.API.all('crm2810'));

	            service.post(param).then(function (response) {
	                var res = response.plain();
	                console.log('res :', res);
	                var monthSummary = {
	                    totalPlan: 0,
	                    totalActual: 0,
	                    percent: 0
	                };
	                res.data.forEach(function (item) {
	                    item.target_money = item.amount * parseInt(item.selling_price) * (100 - item.discount) / 100;
	                    item.percent = item.result_amount / item.amount;
	                    monthSummary.totalPlan += item.target_money;
	                    monthSummary.totalActual += parseFloat(item.result_money);
	                });

	                if (monthSummary.totalPlan > 0) {
	                    monthSummary.percent = monthSummary.totalActual * 100.0 / monthSummary.totalPlan;
	                }

	                _this4.m.kpiMonth = res.data;
	                _this4.m.monthSummary = monthSummary;
	            });
	        }
	    }, {
	        key: "loadYear",
	        value: function loadYear() {
	            var _this5 = this;

	            if (this.m.kpi == null || this.m.kpi == undefined) {
	                return;
	            }

	            var param = {
	                kpi_id: this.m.kpi.id
	            };
	            console.log('param :', param);
	            var service = this.API.service('load-year', this.API.all('crm2810'));

	            service.post(param).then(function (response) {
	                var res = response.plain();
	                console.log('res load-year:', res);
	                var yearSummary = {
	                    totalAmountPlan: 0,
	                    totalAmountActual: 0,
	                    totalPlan: 0,
	                    totalActual: 0,
	                    percent: 0
	                };
	                res.data.forEach(function (item) {
	                    // item.target_money = item.amount * parseInt(item.selling_price) * (100 - item.discount) / 100;
	                    if (item.result_amount != null && item.result_amount != undefined) {
	                        item.percent = parseInt(item.result_amount) / parseInt(item.amount);
	                    } else {
	                        item.result_amount = 0;
	                        item.percent = 0;
	                    }

	                    if (item.result_money == null || item.result_money == undefined) {
	                        item.result_money = 0;
	                    }

	                    yearSummary.totalPlan += parseFloat(item.target_money);
	                    yearSummary.totalActual += parseFloat(item.result_money);
	                    yearSummary.totalAmountPlan += parseFloat(item.amount);
	                    yearSummary.totalAmountActual += parseFloat(item.result_amount);
	                });

	                if (yearSummary.totalAmountPlan > 0) {
	                    yearSummary.percent = yearSummary.totalAmountActual * 100.0 / yearSummary.totalAmountPlan;
	                }

	                _this5.m.kpiYear = res.data;
	                _this5.m.yearSummary = yearSummary;
	            });
	        }
	    }, {
	        key: "download",
	        value: function download() {
	            var _this6 = this;

	            var param = {
	                year: this.m.filter.year,
	                store_id: this.m.store_id
	            };

	            var service = this.API.service('download', this.API.all('crm2810'));
	            service.post(param).then(function (response) {
	                _this6.$log.info(response.data);
	                _this6.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Crm2810Controller;
	}();

	var Crm2810Component = exports.Crm2810Component = {
	    //templateUrl: './views/app/components/crm2810/crm2810.component.html',
	    templateUrl: '/views/admin.crm2810',
	    controller: Crm2810Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 43 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2800Controller = function () {
	    Crm2800Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Crm2800Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Crm2800Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.RouteService = RouteService;

	        this.m = {
	            filter: {},
	            list: null,
	            dateOptions: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Crm2800Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            // Load Init data
	            // this.loadInit();

	            // Load previous filter
	            var previousSearch = sessionStorage.crm2800;
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            this.doSearch(page);
	        }

	        // loadInit() {
	        //     let param = {};
	        //     this.API.service('init-data', this.API.all('crm2800'))
	        //         .post(param)
	        //         .then((response) => {
	        //             this.m.init = response.plain().data;
	        //         });
	        // }

	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            // Get list 
	            var param = angular.copy(this.m.filter);
	            var searchService = this.API.service('search', this.API.all('crm2800'));
	            param.page = page;

	            sessionStorage.crm2800 = angular.toJson(param);

	            searchService.post(param).then(function (response) {
	                _this.$log.info(response.plain().data);
	                var list = response.plain().data.data;
	                list.data.forEach(function (item) {
	                    // for(let i = 1; i <=12 ; i++) {
	                    //     let targetProp = "month_" + i + "_target";
	                    //     let valueTarget = parseInt(item[targetProp]);
	                    //     console.log('valueTarget :', valueTarget);

	                    //     valueTarget = valueTarget == 0 ? 0 : valueTarget / 1000;
	                    //     item[targetProp] = valueTarget;
	                    // }

	                    item.target_year = parseInt(item.target_year);
	                    item.actual_money = parseInt(item.actual_money);
	                    if (item.target_year > 0) {
	                        item.percent_money = item.actual_money * 100.0 / item.target_year;
	                    } else {
	                        item.percent_money = 0;
	                    }

	                    item.plan_amount = parseInt(item.plan_amount);
	                    item.actual_amount = parseInt(item.actual_amount);
	                    if (item.plan_amount > 0) {
	                        item.percent_amount = item.actual_amount * 100.0 / item.plan_amount;
	                    } else {
	                        item.percent_amount = 0;
	                    }
	                });
	                _this.m.list = list;
	                _this.$log.info(_this.m.list);
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this2 = this;

	            var param = angular.copy(this.m.filter);
	            var service = this.API.service('download', this.API.all('crm2800'));
	            service.post(param).then(function (response) {
	                _this2.$log.info(response.data);
	                _this2.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Crm2800Controller;
	}();

	var Crm2800Component = exports.Crm2800Component = {
	    //templateUrl: './views/app/components/crm2800/crm2800.component.html',
	    templateUrl: '/views/admin.crm2800',
	    controller: Crm2800Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 44 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm1112Controller = function () {
	    Hrm1112Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Hrm1112Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Hrm1112Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.RouteService = RouteService;

	        this.m = {
	            init: {},
	            form: {
	                // changed_date: moment(new Date())
	            },
	            dateOptions: {
	                format: 'YYYY-MM-DD'
	            }
	            // THIS IS DEFAULT TEMPLATE
	        };
	    }

	    _createClass(Hrm1112Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var id = this.$stateParams.id;

	            // this.loadInitData();

	            this.m.init.id = id > 0 ? id : 0;
	            if (this.m.init.id > 0) {
	                this.load(this.m.init.id);
	            } else {
	                this.m.form = {
	                    id: this.m.init.id
	                };
	            }
	            console.log('test', this.m);
	        }

	        /**
	         * Load init data
	         */
	        // loadInitData() {
	        //     let service = this.API.service('init-data', this.API.all('hrm1112'));
	        //     service.post({})
	        //         .then((response) => {
	        //             let id = this.m.init.id;
	        //             this.m.init = response.data;
	        //             this.m.init.id = id;
	        //         });
	        // }

	        /**
	         * Load entity
	         * @param {int} id Entity id
	         */

	    }, {
	        key: 'load',
	        value: function load(id) {
	            var _this = this;

	            var service = this.API.service('load', this.API.all('hrm1112'));
	            var param = { id: id };
	            service.post(param).then(function (response) {
	                var element = response.data.data;

	                // convert int
	                var intFields = ["advance", "basic_salary", "bonus", "com_tax_bhtn", "com_tax_bhtn_percent", "com_tax_bhxh", "com_tax_bhxh_percent", "com_tax_bhyt", "com_tax_bhyt_percent", "count_dependent_person", "gross_salary", "min_salary_area", "minus_amount", "net_salary", "real_salary", "tax_bhtn", "tax_bhtn_percent", "tax_bhxh", "tax_bhxh_percent", "tax_bhyt", "tax_bhyt_percent", "tax_pit", "tax_pit_edit", "overtime_salary"];
	                intFields.forEach(function (item) {
	                    if (element[item] != null) {
	                        element[item] = parseFloat(element[item] || 0);
	                    } else {
	                        element[item] = 0;
	                    }
	                });

	                element.total_income = parseInt(element.real_salary) + parseInt(element.overtime_salary) + parseInt(element.bonus);
	                // element.com_total = parseInt(element.net_salary) 
	                //         + parseInt(element.tax_bhxh) 
	                //         + parseInt(element.tax_bhyt) 
	                //         + parseInt(element.tax_bhtn)
	                //         + parseInt(element.tax_pit)
	                //         + parseInt(element.com_tax_bhxh) 
	                //         + parseInt(element.com_tax_bhyt) 
	                //         + parseInt(element.com_tax_bhtn);
	                element.com_total = parseInt(element.real_salary) + parseInt(element.com_tax_bhxh) + parseInt(element.com_tax_bhyt) + parseInt(element.com_tax_bhtn);

	                var year = parseInt(element.from_date.substr(0, 4));
	                console.log('year :>> ', year);
	                var basicPIT = 9000000;
	                if (year >= 2021) {
	                    basicPIT = 11000000;
	                }

	                // element.total_dependent_amount = 9000000 + 4400000 * parseInt(element.count_dependent_person);
	                element.total_dependent_amount = basicPIT + 4400000 * parseInt(element.count_dependent_person);
	                element.total_in_tax = Math.max(element.com_total - element.total_dependent_amount, 0);
	                _this.m.form = element;
	                console.log('this.m.form :>> ', _this.m.form);
	            });
	        }
	    }, {
	        key: 'validate',
	        value: function validate(model, form) {
	            //if( model.start_date == null || model.start_date == undefined ) {
	            //    this.ClientService.warning("Vui lòng nhập Ngày bắt đầu");
	            //    return false;
	            //}

	            return true;
	        }

	        /**
	         * Load entity
	         * @param {int} id Entity id
	         */

	    }, {
	        key: 'save',
	        value: function save(isValid, form) {
	            var _this2 = this;

	            if (this.validate(this.m.form, form)) {
	                var param = angular.copy(this.m.form);

	                // convert moment to date 'YYYY-MM-DD'
	                // let dateFields = ["dob", "start_date", "end_date", "probation_start_date", "probation_end_date", "card_id_issue_on"];
	                // dateFields.forEach((item) => {
	                //     if (param[item] != null ) {
	                //         param[item] = param[item].format('YYYY-MM-DD');
	                //     }
	                // });

	                // convert int
	                var intFields = ["total_days", "total_hours", "gross_salary", "basic_salary", "count_dependent_person", "tax_pit_edit", "overtime_salary", "bonus", "minus_amount", "advance"];
	                intFields.forEach(function (item) {
	                    if (param[item] != null) {
	                        param[item] = parseFloat(param[item] || 0);
	                    }
	                });

	                var service = this.API.service('save', this.API.all('hrm1112'));
	                service.post(param).then(function (response) {
	                    var result = response.data.data;
	                    if (result.rtnCd == true) {
	                        _this2.ClientService.success(result.msg);
	                        _this2.m.form.id = result.id;
	                        _this2.m.init.id = result.id;
	                        // this.RouteService.goState('app.hrm0810', {id: this.m.id});
	                        _this2.$state.reload();
	                    } else {
	                        _this2.ClientService.error(result.msg);
	                    }
	                }, function (response) {
	                    _this2.m.errors = response.data.errors;
	                });
	            }
	        }
	    }, {
	        key: 'delete',
	        value: function _delete() {
	            var _this3 = this;

	            if (this.m.init.id > 0) {
	                swal({
	                    title: 'Are you sure?',
	                    text: 'Do you want to delete this hrm1112',
	                    type: 'warning',
	                    showCancelButton: true,
	                    confirmButtonColor: '#DD6B55',
	                    confirmButtonText: 'Yes, delete it!',
	                    closeOnConfirm: false,
	                    showLoaderOnConfirm: true,
	                    html: false
	                }, function () {
	                    var API = _this3.API;
	                    var searchService = API.service('delete', API.all('hrm1112'));
	                    var param = {
	                        id: _this3.m.init.id
	                    };

	                    searchService.post(param).then(function (response) {
	                        swal({
	                            title: 'Reset!',
	                            text: 'hrm1112 has been deleted.',
	                            type: 'success',
	                            confirmButtonText: 'OK',
	                            closeOnConfirm: true
	                        }, function () {
	                            //$state.reload()
	                            _this3.RouteService.goState('app.hrm1112');
	                        });
	                    });
	                });
	            }
	        }
	    }]);

	    return Hrm1112Controller;
	}();

	var Hrm1112Component = exports.Hrm1112Component = {
	    //templateUrl: './views/app/components/hrm1112/hrm1112.component.html',
	    templateUrl: '/views/admin.hrm1112',
	    controller: Hrm1112Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 45 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm1130Controller = function () {
	    Hrm1130Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Hrm1130Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Hrm1130Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.RouteService = RouteService;

	        this.m = {
	            init: {},
	            form: {
	                // changed_date: moment(new Date())
	            },
	            dateOptions: {
	                format: 'YYYY-MM-DD'
	            }
	            // THIS IS DEFAULT TEMPLATE
	        };
	    }

	    _createClass(Hrm1130Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var id = this.$stateParams.id;

	            this.loadInitData();

	            this.m.init.id = id > 0 ? id : 0;
	            if (this.m.init.id > 0) {
	                this.load(this.m.init.id);
	            } else {
	                this.m.form = {
	                    id: this.m.init.id
	                };
	            }
	        }

	        /**
	         * Load init data
	         */

	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var _this = this;

	            var service = this.API.service('init-data', this.API.all('hrm1130'));
	            service.post({}).then(function (response) {
	                var id = _this.m.init.id;
	                _this.m.init = response.data;
	                _this.m.init.id = id;
	            });
	        }

	        /**
	         * Load entity
	         * @param {int} id Entity id
	         */

	    }, {
	        key: 'load',
	        value: function load(id) {
	            var _this2 = this;

	            var service = this.API.service('load', this.API.all('hrm1130'));
	            var param = { id: id };
	            service.post(param).then(function (response) {
	                _this2.m.form = response.data.data;
	            });
	        }
	    }, {
	        key: 'validate',
	        value: function validate(model, form) {
	            //if( model.start_date == null || model.start_date == undefined ) {
	            //    this.ClientService.warning("Vui lòng nhập Ngày bắt đầu");
	            //    return false;
	            //}

	            return true;
	        }

	        /**
	         * Load entity
	         * @param {int} id Entity id
	         */

	    }, {
	        key: 'save',
	        value: function save(isValid, form) {
	            var _this3 = this;

	            if (this.validate(this.m.form, form)) {
	                var param = angular.copy(this.m.form);

	                // convert moment to date 'YYYY-MM-DD'
	                // let dateFields = ["dob", "start_date", "end_date", "probation_start_date", "probation_end_date", "card_id_issue_on"];
	                // dateFields.forEach((item) => {
	                //     if (param[item] != null ) {
	                //         param[item] = param[item].format('YYYY-MM-DD');
	                //     }
	                // });

	                var service = this.API.service('save', this.API.all('hrm1130'));
	                service.post(param).then(function (response) {
	                    var result = response.data.data;
	                    if (result.rtnCd == true) {
	                        _this3.ClientService.success(result.msg);
	                        _this3.m.form.id = result.id;
	                        _this3.m.init.id = result.id;
	                        // this.RouteService.goState('app.hrm0810', {id: this.m.id});
	                    } else {
	                        _this3.ClientService.error(result.msg);
	                    }
	                }, function (response) {
	                    _this3.m.errors = response.data.errors;
	                });
	            }
	        }
	    }, {
	        key: 'delete',
	        value: function _delete() {
	            var _this4 = this;

	            if (this.m.init.id > 0) {
	                swal({
	                    title: 'Are you sure?',
	                    text: 'Do you want to delete this hrm1130',
	                    type: 'warning',
	                    showCancelButton: true,
	                    confirmButtonColor: '#DD6B55',
	                    confirmButtonText: 'Yes, delete it!',
	                    closeOnConfirm: false,
	                    showLoaderOnConfirm: true,
	                    html: false
	                }, function () {
	                    var API = _this4.API;
	                    var searchService = API.service('delete', API.all('hrm1130'));
	                    var param = {
	                        id: _this4.m.init.id
	                    };

	                    searchService.post(param).then(function (response) {
	                        swal({
	                            title: 'Reset!',
	                            text: 'hrm1130 has been deleted.',
	                            type: 'success',
	                            confirmButtonText: 'OK',
	                            closeOnConfirm: true
	                        }, function () {
	                            //$state.reload()
	                            _this4.RouteService.goState('app.hrm1130');
	                        });
	                    });
	                });
	            }
	        }
	    }]);

	    return Hrm1130Controller;
	}();

	var Hrm1130Component = exports.Hrm1130Component = {
	    //templateUrl: './views/app/components/hrm1130/hrm1130.component.html',
	    templateUrl: '/views/admin.hrm1130',
	    controller: Hrm1130Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 46 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm1120Controller = function () {
	    Hrm1120Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Hrm1120Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Hrm1120Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.RouteService = RouteService;

	        this.m = {
	            filter: {},
	            list: null,
	            dateOptions: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Hrm1120Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            // Load Init data
	            // this.loadInit();

	            // Load previous filter
	            var previousSearch = sessionStorage.hrm1120;
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            this.doSearch(page);
	        }

	        // loadInit() {
	        //     let param = {};
	        //     this.API.service('init-data', this.API.all('hrm1120'))
	        //         .post(param)
	        //         .then((response) => {
	        //             this.m.init = response.plain().data;
	        //         });
	        // }

	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            // Get list 
	            var param = angular.copy(this.m.filter);
	            var searchService = this.API.service('search', this.API.all('hrm1120'));
	            param.page = page;

	            sessionStorage.hrm1120 = angular.toJson(param);

	            searchService.post(param).then(function (response) {
	                _this.$log.info(response.plain().data);
	                _this.m.list = response.plain().data.data;
	                _this.$log.info(_this.m.list);
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this2 = this;

	            var param = angular.copy(this.m.filter);
	            var service = this.API.service('download', this.API.all('hrm1120'));
	            service.post(param).then(function (response) {
	                _this2.$log.info(response.data);
	                _this2.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Hrm1120Controller;
	}();

	var Hrm1120Component = exports.Hrm1120Component = {
	    //templateUrl: './views/app/components/hrm1120/hrm1120.component.html',
	    templateUrl: '/views/admin.hrm1120',
	    controller: Hrm1120Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 47 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm1111Controller = function () {
	    Hrm1111Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Hrm1111Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Hrm1111Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.RouteService = RouteService;

	        this.m = {
	            init: {},
	            form: {
	                // changed_date: moment(new Date())
	            },
	            dateOptions: {
	                format: 'YYYY-MM-DD'
	            }
	            // THIS IS DEFAULT TEMPLATE
	        };
	    }

	    _createClass(Hrm1111Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var id = this.$stateParams.id;

	            this.loadInitData();

	            this.m.init.id = id > 0 ? id : 0;
	            if (this.m.init.id > 0) {
	                this.load(this.m.init.id);
	            } else {
	                // this.m.form = {
	                //     id : this.m.init.id
	                // };
	                this.ClientService.error('Không tin tìm thấy dữ liệu');
	                this.RouteService.goState('app.hrm1100');
	            }
	        }

	        /**
	         * Load init data
	         */

	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var _this = this;

	            var service = this.API.service('init-data', this.API.all('hrm1111'));
	            service.post({}).then(function (response) {
	                var id = _this.m.init.id;
	                _this.m.init = response.data;
	                _this.m.init.id = id;

	                _this.filterListEmployee();
	            });
	        }

	        /**
	         * Load entity
	         * @param {int} id Entity id
	         */

	    }, {
	        key: 'load',
	        value: function load(id) {
	            var _this2 = this;

	            var service = this.API.service('load', this.API.all('hrm1111'));
	            var param = { id: id };
	            service.post(param).then(function (response) {

	                if (response.data.salaryInfo == undefined || response.data.salaryInfo == null) {
	                    _this2.ClientService.error('Không tin tìm thấy dữ liệu');
	                    _this2.RouteService.goState('app.hrm1100');
	                    return;
	                }
	                var form = response.data;
	                var summary = {
	                    gross_salary: 0,
	                    basic_salary: 0,
	                    real_salary: 0,
	                    overtime_salary: 0,
	                    bonus: 0,
	                    total_income: 0,
	                    tax_bhxh: 0,
	                    tax_bhyt: 0,
	                    tax_bhtn: 0,
	                    tax_pit: 0,
	                    minus_amount: 0,
	                    advance: 0,
	                    net_salary: 0,
	                    com_tax_bhxh: 0,
	                    com_tax_bhyt: 0,
	                    com_tax_bhtn: 0,
	                    com_total: 0
	                };
	                form.listEmployee.forEach(function (element) {
	                    element.total_income = parseInt(element.real_salary) + parseInt(element.overtime_salary) + parseInt(element.bonus);
	                    element.com_total = parseInt(element.net_salary) + parseInt(element.tax_bhxh) + parseInt(element.tax_bhyt) + parseInt(element.tax_bhtn) + parseInt(element.tax_pit) + parseInt(element.com_tax_bhxh) + parseInt(element.com_tax_bhyt) + parseInt(element.com_tax_bhtn);
	                    // summary
	                    summary.gross_salary += parseInt(element.gross_salary);
	                    summary.basic_salary += parseInt(element.basic_salary);
	                    summary.real_salary += parseInt(element.real_salary);
	                    summary.overtime_salary += parseInt(element.overtime_salary);
	                    summary.bonus += parseInt(element.bonus);
	                    summary.total_income += parseInt(element.total_income);
	                    summary.tax_bhxh += parseInt(element.tax_bhxh);
	                    summary.tax_bhyt += parseInt(element.tax_bhyt);
	                    summary.tax_bhtn += parseInt(element.tax_bhtn);
	                    summary.tax_pit += parseInt(element.tax_pit);
	                    summary.minus_amount += parseInt(element.minus_amount);
	                    summary.advance += parseInt(element.advance);
	                    summary.net_salary += parseInt(element.net_salary);
	                    summary.com_tax_bhxh += parseInt(element.com_tax_bhxh);
	                    summary.com_tax_bhyt += parseInt(element.com_tax_bhyt);
	                    summary.com_tax_bhtn += parseInt(element.com_tax_bhtn);
	                    summary.com_total += parseInt(element.com_total);
	                });
	                _this2.m.form = form;
	                _this2.m.form.summary = summary;

	                _this2.filterListEmployee();
	            });
	        }
	    }, {
	        key: 'validate',
	        value: function validate(model, form) {
	            //if( model.start_date == null || model.start_date == undefined ) {
	            //    this.ClientService.warning("Vui lòng nhập Ngày bắt đầu");
	            //    return false;
	            //}

	            return true;
	        }

	        /**
	         * Load entity
	         * @param {int} id Entity id
	         */

	    }, {
	        key: 'save',
	        value: function save(isValid, form) {
	            var _this3 = this;

	            if (this.validate(this.m.form, form)) {
	                var param = angular.copy(this.m.form.salaryInfo);
	                param.id = this.m.init.id;

	                // convert moment to date 'YYYY-MM-DD'
	                // let dateFields = ["dob", "start_date", "end_date", "probation_start_date", "probation_end_date", "card_id_issue_on"];
	                // dateFields.forEach((item) => {
	                //     if (param[item] != null ) {
	                //         param[item] = param[item].format('YYYY-MM-DD');
	                //     }
	                // });

	                var service = this.API.service('save', this.API.all('hrm1111'));
	                service.post(param).then(function (response) {
	                    var result = response.data.data;
	                    if (result.rtnCd == true) {
	                        _this3.ClientService.success(result.msg);
	                        _this3.m.form.id = result.id;
	                        _this3.m.init.id = result.id;
	                        // this.RouteService.goState('app.hrm0810', {id: this.m.id});
	                    } else {
	                        _this3.ClientService.error(result.msg);
	                    }
	                }, function (response) {
	                    _this3.m.errors = response.data.errors;
	                });
	            }
	        }
	    }, {
	        key: 'delete',
	        value: function _delete(item) {
	            var _this4 = this;

	            swal({
	                title: 'Are you sure?',
	                text: 'Do you want to remove this ' + item.fullname,
	                type: 'warning',
	                showCancelButton: true,
	                confirmButtonColor: '#DD6B55',
	                confirmButtonText: 'Yes, remove it!',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var API = _this4.API;
	                var searchService = API.service('remove', API.all('hrm1111'));
	                var param = {
	                    id: item.id,
	                    salary_id: _this4.m.init.id
	                };

	                searchService.post(param).then(function (response) {

	                    var data = response.data;
	                    console.log('data :', data);

	                    if (data.rtnCd == true) {
	                        swal({
	                            title: 'Remove!',
	                            text: item.fullname + ' has been deleted.',
	                            type: 'success',
	                            confirmButtonText: 'OK',
	                            closeOnConfirm: true
	                        }, function () {
	                            //
	                            // this.RouteService.goState('app.hrm1111');
	                            // this.load(this.m.init.id);
	                        });
	                        _this4.$state.reload();
	                    } else {
	                        _this4.ClientService.error(data.rtnCd.msg);
	                    }
	                });
	            });
	        }
	    }, {
	        key: 'onAddEmployee',
	        value: function onAddEmployee() {
	            var _this5 = this;

	            console.log('add employee', this.m.form);

	            if (!(this.m.form.newEmployee > 0)) {
	                this.ClientService.warning("Vui lòng chọn nhân viên");
	                return;
	            }

	            var item = this.m.form.newEmployee;
	            swal({
	                title: 'Are you sure?',
	                text: 'Do you want to add this employee',
	                type: 'warning',
	                showCancelButton: true,
	                confirmButtonColor: '#DD6B55',
	                confirmButtonText: 'Yes, add it!',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var API = _this5.API;
	                var searchService = API.service('add', API.all('hrm1111'));
	                var param = {
	                    employee_id: item,
	                    salary_id: _this5.m.init.id
	                };

	                searchService.post(param).then(function (response) {

	                    var data = response.data;
	                    console.log('data :', data);

	                    if (data.rtnCd == true) {
	                        swal({
	                            title: 'Added!',
	                            text: 'Employee has been added.',
	                            type: 'success',
	                            confirmButtonText: 'OK',
	                            closeOnConfirm: true
	                        }, function () {
	                            //
	                            // this.RouteService.goState('app.hrm1111');
	                            // this.load(this.m.init.id);
	                        });
	                        _this5.$state.reload();
	                    } else {
	                        _this5.ClientService.error(data.rtnCd.msg);
	                    }
	                });
	            });
	        }
	    }, {
	        key: 'clickApprove',
	        value: function clickApprove() {
	            var _this6 = this;

	            // this.updateStatus('approve', 2, "");
	            swal({
	                title: 'Are you sure?',
	                text: 'Do you want to approve this?',
	                type: 'warning',
	                showCancelButton: true,
	                confirmButtonColor: '#DD6B55',
	                confirmButtonText: 'Yes, approve it!',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                _this6.updateStatus('approve', 2, _this6.m.form.salaryInfo.notes);
	            });
	        }
	    }, {
	        key: 'clickDeny',
	        value: function clickDeny() {
	            var _this7 = this;

	            // this.updateStatus('approve', 0, "");
	            swal({
	                title: 'Are you sure?',
	                text: 'Do you want to deny this?',
	                type: 'warning',
	                showCancelButton: true,
	                confirmButtonColor: '#DD6B55',
	                confirmButtonText: 'Yes, deny it!',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                _this7.updateStatus('approve', 0, _this7.m.form.salaryInfo.notes);
	            });
	        }
	    }, {
	        key: 'clickSend',
	        value: function clickSend() {
	            var _this8 = this;

	            // this.updateStatus('send', 1, "");
	            swal({
	                title: 'Are you sure?',
	                text: 'Do you want to send this?',
	                type: 'warning',
	                showCancelButton: true,
	                confirmButtonColor: '#DD6B55',
	                confirmButtonText: 'Yes, send it!',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                _this8.updateStatus('send', 1, _this8.m.form.salaryInfo.notes);
	            });
	        }
	    }, {
	        key: 'updateStatus',
	        value: function updateStatus(action, status, notes) {
	            var _this9 = this;

	            var service = this.API.service(action, this.API.all('hrm1111'));
	            var param = {
	                id: this.m.init.id,
	                status: status,
	                notes: notes
	            };
	            service.post(param).then(function (response) {
	                var result = response.data.data;
	                if (result.rtnCd == true) {
	                    _this9.ClientService.success(result.msg);
	                    // this.RouteService.goState('app.hrm1111', {id: this.m.init.id});
	                    _this9.$state.reload();
	                } else {
	                    _this9.ClientService.error(result.msg);
	                }
	            }, function (response) {
	                _this9.m.errors = response.data.errors;
	            });
	        }
	    }, {
	        key: 'filterListEmployee',
	        value: function filterListEmployee() {
	            var listEmployeeDropDown = this.m.init.listEmployee || [];
	            var listEmpolyeeTable = this.m.form.listEmployee || [];
	            var listEmployee2 = [];
	            var listId = [];

	            listEmpolyeeTable.forEach(function (item) {
	                listId.push(item.employee_id);
	            });

	            listEmployeeDropDown.forEach(function (item) {
	                if (listId.indexOf(item.employee_id) < 0) {
	                    listEmployee2.push(item);
	                }
	            });

	            this.m.init.listEmployee2 = listEmployee2;
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this10 = this;

	            var param = {
	                id: this.m.init.id
	            };

	            this.API.service('download', this.API.all('hrm1111')).post(param).then(function (response) {
	                _this10.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }, {
	        key: 'sendAll',
	        value: function sendAll() {
	            var _this11 = this;

	            var param = {
	                id: this.m.init.id
	            };

	            this.API.service('send-all', this.API.all('hrm1111')).post(param).then(function (response) {
	                // this.ClientService.downloadFileOneTime(response.data.file);
	                console.log('response.data', response.data);
	                //this.ClientService.success(response.data.msg);
	                _this11.ClientService.success("Đã gửi");
	            });
	        }
	    }]);

	    return Hrm1111Controller;
	}();

	var Hrm1111Component = exports.Hrm1111Component = {
	    //templateUrl: './views/app/components/hrm1111/hrm1111.component.html',
	    templateUrl: '/views/admin.hrm1111',
	    controller: Hrm1111Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 48 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm1110Controller = function () {
	    Hrm1110Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Hrm1110Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Hrm1110Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.RouteService = RouteService;

	        this.m = {
	            init: {},
	            form: {
	                salary_month: moment(new Date()).startOf('month').startOf('day')
	                // from_date: moment(new Date()).startOf('month').startOf('day'),
	                // to_date: moment(new Date()).endOf('month').startOf('day')
	            },
	            dateOptions: {
	                format: 'YYYY-MM-DD'
	            },
	            dateMonthOptions: {
	                format: 'YYYY-MM'
	            }
	            // THIS IS DEFAULT TEMPLATE
	            // console.log('this.m :', this.m);

	        };
	    }

	    _createClass(Hrm1110Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var id = this.$stateParams.id;

	            this.loadInitData();

	            this.m.init.id = id > 0 ? id : 0;
	            if (this.m.init.id > 0) {
	                this.load(this.m.init.id);
	            } else {
	                this.m.form.id = this.m.init.id;
	            }
	        }

	        /**
	         * Load init data
	         */

	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var _this = this;

	            var service = this.API.service('init-data', this.API.all('hrm1110'));
	            service.post({}).then(function (response) {
	                var id = _this.m.init.id;
	                _this.m.init = response.data;
	                _this.m.init.id = id;
	            });
	        }

	        /**
	         * Load entity
	         * @param {int} id Entity id
	         */

	    }, {
	        key: 'load',
	        value: function load(id) {
	            var _this2 = this;

	            var service = this.API.service('load', this.API.all('hrm1110'));
	            var param = { id: id };
	            service.post(param).then(function (response) {
	                _this2.m.form = response.data.data;
	            });
	        }
	    }, {
	        key: 'validate',
	        value: function validate(model, form) {
	            if (model.salary_month == null || model.salary_month == undefined) {
	                this.ClientService.warning("Vui lòng nhập tháng");
	                return false;
	            }

	            return true;
	        }

	        /**
	         * Load entity
	         * @param {int} id Entity id
	         */

	    }, {
	        key: 'save',
	        value: function save(isValid, form) {
	            var _this3 = this;

	            if (this.validate(this.m.form, form)) {
	                var param = angular.copy(this.m.form);

	                // convert moment to date 'YYYY-MM-DD'
	                // let dateFields = ["dob", "start_date", "end_date", "probation_start_date", "probation_end_date", "card_id_issue_on"];
	                // dateFields.forEach((item) => {
	                //     if (param[item] != null ) {
	                //         param[item] = param[item].format('YYYY-MM-DD');
	                //     }
	                // });
	                param.salary_month = param.salary_month.format('YYYY-MM-01');

	                var service = this.API.service('save', this.API.all('hrm1110'));
	                service.post(param).then(function (response) {
	                    var result = response.data;
	                    console.log('response.data :', response.data);

	                    if (result.rtnCd == true) {
	                        _this3.ClientService.success(result.msg);
	                        _this3.RouteService.goState('app.hrm1111', { id: result.id });
	                    } else {
	                        _this3.ClientService.error(result.msg);
	                    }
	                }, function (response) {
	                    _this3.m.errors = response.data.errors;
	                });
	            }
	        }

	        // delete() {
	        //     if( this.m.init.id > 0) {
	        //         swal({
	        //             title: 'Are you sure?',
	        //             text: 'Do you want to delete this hrm1110',
	        //             type: 'warning',
	        //             showCancelButton: true,
	        //             confirmButtonColor: '#DD6B55',
	        //             confirmButtonText: 'Yes, delete it!',
	        //             closeOnConfirm: false,
	        //             showLoaderOnConfirm: true,
	        //             html: false
	        //         }, () => {
	        //             let API = this.API
	        //             let searchService = API.service('delete', API.all('hrm1110'));
	        //             let param = {
	        //                     id: this.m.init.id
	        //                 }

	        //             searchService.post(param)
	        //                 .then((response) => {
	        //                     swal({
	        //                         title: 'Reset!',
	        //                         text: 'hrm1110 has been deleted.',
	        //                         type: 'success',
	        //                         confirmButtonText: 'OK',
	        //                         closeOnConfirm: true
	        //                     }, () => {
	        //                         //$state.reload()
	        //                         this.RouteService.goState('app.hrm1110');
	        //                     })
	        //                 });
	        //         })   
	        //     }
	        // }

	    }]);

	    return Hrm1110Controller;
	}();

	var Hrm1110Component = exports.Hrm1110Component = {
	    //templateUrl: './views/app/components/hrm1110/hrm1110.component.html',
	    templateUrl: '/views/admin.hrm1110',
	    controller: Hrm1110Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 49 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm1100Controller = function () {
	    Hrm1100Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Hrm1100Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Hrm1100Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.RouteService = RouteService;

	        this.m = {
	            filter: {},
	            list: null,
	            dateOptions: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Hrm1100Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            // Load Init data
	            this.loadInit();

	            // Load previous filter
	            var previousSearch = sessionStorage.hrm1100;
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            this.doSearch(page);
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var param = {};
	            this.API.service('init-data', this.API.all('hrm1100')).post(param).then(function (response) {
	                _this.m.init = response.plain().data;
	            });
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this2 = this;

	            // Get list 
	            var param = angular.copy(this.m.filter);
	            var searchService = this.API.service('search', this.API.all('hrm1100'));
	            param.page = page;

	            sessionStorage.hrm1100 = angular.toJson(param);

	            searchService.post(param).then(function (response) {
	                _this2.$log.info(response.plain().data);
	                _this2.m.list = response.plain().data.data;
	                _this2.$log.info(_this2.m.list);
	            });
	        }

	        // download() {
	        //     let param = angular.copy(this.m.filter);
	        //     let service = this.API.service('download', this.API.all('hrm1100'));
	        //     service.post(param)
	        //         .then((response) => {
	        //             this.ClientService.downloadFileOneTime(response.data.file);
	        //         });
	        // }

	    }]);

	    return Hrm1100Controller;
	}();

	var Hrm1100Component = exports.Hrm1100Component = {
	    //templateUrl: './views/app/components/hrm1100/hrm1100.component.html',
	    templateUrl: '/views/admin.hrm1100',
	    controller: Hrm1100Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 50 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm1021Controller = function () {
	    Hrm1021Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Hrm1021Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Hrm1021Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.RouteService = RouteService;

	        this.m = {
	            init: {},
	            form: {
	                // changed_date: moment(new Date())
	            },
	            dateOptions: {
	                format: 'YYYY-MM-DD'
	            }
	            // THIS IS DEFAULT TEMPLATE
	        };
	    }

	    _createClass(Hrm1021Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var id = this.$stateParams.id;

	            // this.loadInitData();

	            this.m.init.id = id > 0 ? id : 0;
	            if (this.m.init.id > 0) {
	                this.load(this.m.init.id);
	            } else {
	                this.m.form = {
	                    id: this.m.init.id
	                };
	            }
	        }

	        /**
	         * Load init data
	         */
	        // loadInitData() {
	        //     let service = this.API.service('init-data', this.API.all('hrm1021'));
	        //     service.post({})
	        //         .then((response) => {
	        //             let id = this.m.init.id;
	        //             this.m.init = response.data;
	        //             this.m.init.id = id;
	        //         });
	        // }

	        /**
	         * Load entity
	         * @param {int} id Entity id
	         */

	    }, {
	        key: 'load',
	        value: function load(id) {
	            var _this = this;

	            var service = this.API.service('load', this.API.all('hrm1021'));
	            var param = { id: id };
	            service.post(param).then(function (response) {
	                _this.m.form = response.data.data;
	            });
	        }
	    }]);

	    return Hrm1021Controller;
	}();

	var Hrm1021Component = exports.Hrm1021Component = {
	    //templateUrl: './views/app/components/hrm1021/hrm1021.component.html',
	    templateUrl: '/views/admin.hrm1021',
	    controller: Hrm1021Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 51 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm1020Controller = function () {
	    Hrm1020Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Hrm1020Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Hrm1020Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.RouteService = RouteService;

	        this.m = {
	            filter: {},
	            list: null,
	            dateOptions: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Hrm1020Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            // Load Init data
	            // this.loadInit();

	            // Load previous filter
	            var previousSearch = sessionStorage.hrm1020;
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            this.doSearch(page);
	        }

	        // loadInit() {
	        //     let param = {};
	        //     this.API.service('init-data', this.API.all('hrm1020'))
	        //         .post(param)
	        //         .then((response) => {
	        //             this.m.init = response.plain().data;
	        //         });
	        // }

	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            // Get list 
	            var param = angular.copy(this.m.filter);
	            var searchService = this.API.service('search', this.API.all('hrm1020'));
	            param.page = page;

	            sessionStorage.hrm1020 = angular.toJson(param);

	            searchService.post(param).then(function (response) {
	                _this.$log.info(response.plain().data);
	                _this.m.list = response.plain().data.data;
	                _this.$log.info(_this.m.list);
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this2 = this;

	            var param = angular.copy(this.m.filter);
	            var service = this.API.service('download', this.API.all('hrm1020'));
	            service.post(param).then(function (response) {
	                _this2.$log.info(response.data);
	                _this2.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Hrm1020Controller;
	}();

	var Hrm1020Component = exports.Hrm1020Component = {
	    //templateUrl: './views/app/components/hrm1020/hrm1020.component.html',
	    templateUrl: '/views/admin.hrm1020',
	    controller: Hrm1020Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 52 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm1010Controller = function () {
	    Hrm1010Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Hrm1010Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Hrm1010Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.RouteService = RouteService;

	        this.m = {
	            init: {},
	            form: {
	                // changed_date: moment(new Date())
	            },
	            dateOptions: {
	                format: 'YYYY-MM-DD'
	            }
	            // THIS IS DEFAULT TEMPLATE
	        };
	    }

	    _createClass(Hrm1010Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var id = this.$stateParams.id;

	            this.loadInitData();

	            this.m.init.id = id > 0 ? id : 0;
	            if (this.m.init.id > 0) {
	                this.load(this.m.init.id);
	            } else {
	                this.m.form = {
	                    id: this.m.init.id
	                };
	            }
	        }

	        /**
	         * Load init data
	         */

	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var _this = this;

	            var service = this.API.service('init-data', this.API.all('hrm1010'));
	            service.post({}).then(function (response) {
	                var id = _this.m.init.id;
	                _this.m.init = response.data;
	                _this.m.init.id = id;
	            });
	        }

	        /**
	         * Load entity
	         * @param {int} id Entity id
	         */

	    }, {
	        key: 'load',
	        value: function load(id) {
	            var _this2 = this;

	            var service = this.API.service('load', this.API.all('hrm1010'));
	            var param = { id: id };
	            service.post(param).then(function (response) {
	                _this2.m.form = response.data.data;
	            });
	        }
	    }, {
	        key: 'validate',
	        value: function validate(model, form) {
	            //if( model.start_date == null || model.start_date == undefined ) {
	            //    this.ClientService.warning("Vui lòng nhập Ngày bắt đầu");
	            //    return false;
	            //}

	            return true;
	        }

	        /**
	         * Load entity
	         * @param {int} id Entity id
	         */

	    }, {
	        key: 'save',
	        value: function save(isValid, form) {
	            var _this3 = this;

	            if (this.validate(this.m.form, form)) {
	                var param = angular.copy(this.m.form);

	                // convert moment to date 'YYYY-MM-DD'
	                // let dateFields = ["dob", "start_date", "end_date", "probation_start_date", "probation_end_date", "card_id_issue_on"];
	                // dateFields.forEach((item) => {
	                //     if (param[item] != null ) {
	                //         param[item] = param[item].format('YYYY-MM-DD');
	                //     }
	                // });

	                var service = this.API.service('save', this.API.all('hrm1010'));
	                service.post(param).then(function (response) {
	                    var result = response.data.data;
	                    if (result.rtnCd == true) {
	                        _this3.ClientService.success(result.msg);
	                        _this3.m.form.id = result.id;
	                        _this3.m.init.id = result.id;
	                        // this.RouteService.goState('app.hrm0810', {id: this.m.id});
	                    } else {
	                        _this3.ClientService.error(result.msg);
	                    }
	                }, function (response) {
	                    _this3.m.errors = response.data.errors;
	                });
	            }
	        }
	    }, {
	        key: 'publish',
	        value: function publish() {
	            var _this4 = this;

	            if (this.m.init.id > 0) {
	                var service = this.API.service('publish', this.API.all('hrm1010'));
	                var param = angular.copy(this.m.form);
	                service.post(param).then(function (response) {
	                    var result = response.data.data;
	                    if (result.rtnCd == true) {
	                        _this4.ClientService.success(result.msg);
	                        _this4.RouteService.goState('app.hrm1000');
	                    } else {
	                        _this4.ClientService.error(result.msg);
	                    }
	                }, function (response) {
	                    _this4.m.errors = response.data.errors;
	                });
	            }
	        }
	    }, {
	        key: 'delete',
	        value: function _delete() {
	            var _this5 = this;

	            if (this.m.init.id > 0) {
	                swal({
	                    title: 'Are you sure?',
	                    text: 'Do you want to delete this news',
	                    type: 'warning',
	                    showCancelButton: true,
	                    confirmButtonColor: '#DD6B55',
	                    confirmButtonText: 'Yes, delete it!',
	                    closeOnConfirm: false,
	                    showLoaderOnConfirm: true,
	                    html: false
	                }, function () {
	                    var API = _this5.API;
	                    var searchService = API.service('delete', API.all('hrm1010'));
	                    var param = {
	                        id: _this5.m.init.id
	                    };

	                    searchService.post(param).then(function (response) {
	                        swal({
	                            title: 'Deleted!',
	                            text: 'News has been deleted.',
	                            type: 'success',
	                            confirmButtonText: 'OK',
	                            closeOnConfirm: true
	                        }, function () {
	                            //$state.reload()
	                            _this5.RouteService.goState('app.hrm1000');
	                        });
	                    });
	                });
	            }
	        }
	    }]);

	    return Hrm1010Controller;
	}();

	var Hrm1010Component = exports.Hrm1010Component = {
	    //templateUrl: './views/app/components/hrm1010/hrm1010.component.html',
	    templateUrl: '/views/admin.hrm1010',
	    controller: Hrm1010Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 53 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm1000Controller = function () {
	    Hrm1000Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Hrm1000Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Hrm1000Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.RouteService = RouteService;

	        this.m = {
	            filter: {},
	            list: null,
	            dateOptions: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Hrm1000Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            // Load Init data
	            // this.loadInit();

	            // Load previous filter
	            var previousSearch = sessionStorage.hrm1000;
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            this.doSearch(page);
	        }

	        // loadInit() {
	        //     let param = {};
	        //     this.API.service('init-data', this.API.all('hrm1000'))
	        //         .post(param)
	        //         .then((response) => {
	        //             this.m.init = response.plain().data;
	        //         });
	        // }

	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            // Get list 
	            var param = angular.copy(this.m.filter);
	            var searchService = this.API.service('search', this.API.all('hrm1000'));
	            param.page = page;

	            sessionStorage.hrm1000 = angular.toJson(param);

	            searchService.post(param).then(function (response) {
	                _this.$log.info(response.plain().data);
	                _this.m.list = response.plain().data.data;
	                _this.$log.info(_this.m.list);
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this2 = this;

	            var param = angular.copy(this.m.filter);
	            var service = this.API.service('download', this.API.all('hrm1000'));
	            service.post(param).then(function (response) {
	                _this2.$log.info(response.data);
	                _this2.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Hrm1000Controller;
	}();

	var Hrm1000Component = exports.Hrm1000Component = {
	    //templateUrl: './views/app/components/hrm1000/hrm1000.component.html',
	    templateUrl: '/views/admin.hrm1000',
	    controller: Hrm1000Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 54 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0910Controller = function () {
	    Hrm0910Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Hrm0910Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0910Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.RouteService = RouteService;

	        this.m = {
	            init: {},
	            form: {
	                // changed_date: moment(new Date())
	            },
	            dateOptions: {
	                format: 'YYYY-MM-DD'
	            }
	            // THIS IS DEFAULT TEMPLATE
	        };
	    }

	    _createClass(Hrm0910Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var id = this.$stateParams.id;
	            this.loadInitData();

	            this.m.init.id = id > 0 ? id : 0;
	            if (this.m.init.id > 0) {
	                this.load(this.m.init.id);
	            } else {
	                this.m.form = {
	                    id: this.m.init.id,
	                    amount: 1
	                };
	            }
	        }

	        /**
	         * Load init data
	         */

	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var _this = this;

	            var service = this.API.service('init-data', this.API.all('hrm0910'));
	            service.post({}).then(function (response) {
	                var id = _this.m.init.id;
	                _this.m.init = response.data;
	                _this.m.init.id = id;
	            });
	        }

	        /**
	         * Load entity
	         * @param {int} id Entity id
	         */

	    }, {
	        key: 'load',
	        value: function load(id) {
	            var _this2 = this;

	            var service = this.API.service('load', this.API.all('hrm0910'));
	            var param = { id: id };
	            service.post(param).then(function (response) {
	                var data = response.data.data;
	                data.amount = parseFloat(data.amount);
	                _this2.m.form = data;
	            });
	        }
	    }, {
	        key: 'validate',
	        value: function validate(model, form) {
	            //if( model.start_date == null || model.start_date == undefined ) {
	            //    this.ClientService.warning("Vui lòng nhập Ngày bắt đầu");
	            //    return false;
	            //}

	            return true;
	        }

	        /**
	         * Load entity
	         * @param {int} id Entity id
	         */

	    }, {
	        key: 'save',
	        value: function save(isValid, form) {
	            var _this3 = this;

	            if (this.validate(this.m.form, form)) {
	                var param = angular.copy(this.m.form);

	                // convert moment to date 'YYYY-MM-DD'
	                var dateFields = ["holiday_date"];
	                dateFields.forEach(function (item) {
	                    if (param[item] != null) {
	                        param[item] = param[item].format('YYYY-MM-DD');
	                    }
	                });

	                var service = this.API.service('save', this.API.all('hrm0910'));
	                service.post(param).then(function (response) {
	                    var result = response.data.data;
	                    if (result.rtnCd == true) {
	                        _this3.ClientService.success(result.msg);
	                        _this3.m.form.id = result.id;
	                        _this3.m.init.id = result.id;
	                        // this.RouteService.goState('app.hrm0810', {id: this.m.id});
	                    } else {
	                        _this3.ClientService.error(result.msg);
	                    }
	                }, function (response) {
	                    _this3.m.errors = response.data.errors;
	                });
	            }
	        }

	        // delete() {
	        //     if( this.m.contract_id > 0) {
	        //         swal({
	        //             title: 'Are you sure?',
	        //             text: 'Do you want to delete this contract',
	        //             type: 'warning',
	        //             showCancelButton: true,
	        //             confirmButtonColor: '#DD6B55',
	        //             confirmButtonText: 'Yes, delete it!',
	        //             closeOnConfirm: false,
	        //             showLoaderOnConfirm: true,
	        //             html: false
	        //         }, () => {
	        //             let API = this.API
	        //             let searchService = API.service('delete', API.all('hrm0716'));
	        //             let param = {
	        //                     id: this.m.contract_id
	        //                 }

	        //             searchService.post(param)
	        //                 .then((response) => {
	        //                     swal({
	        //                         title: 'Reset!',
	        //                         text: 'Contract has been reset.',
	        //                         type: 'success',
	        //                         confirmButtonText: 'OK',
	        //                         closeOnConfirm: true
	        //                     }, () => {
	        //                         //$state.reload()
	        //                         this.RouteService.goState('app.hrm0715', {id: this.m.employee_id});
	        //                     })
	        //                 });
	        //         })   
	        //     }
	        // }

	    }]);

	    return Hrm0910Controller;
	}();

	var Hrm0910Component = exports.Hrm0910Component = {
	    //templateUrl: './views/app/components/hrm0910/hrm0910.component.html',
	    templateUrl: '/views/admin.hrm0910',
	    controller: Hrm0910Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 55 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0900Controller = function () {
	    Hrm0900Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Hrm0900Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0900Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.RouteService = RouteService;

	        this.m = {
	            filter: {},
	            list: null,
	            dateOptions: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Hrm0900Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            // Load Init data
	            this.loadInit();

	            // Load previous filter
	            var previousSearch = sessionStorage.hrm0900;

	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            this.doSearch(page);
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var param = {};
	            this.API.service('init-data', this.API.all('hrm0900')).post(param).then(function (response) {
	                var data = response.plain().data;
	                data.listYear.forEach(function (item) {
	                    item.year = '' + item.year;
	                });
	                _this.m.init = data;
	            });
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this2 = this;

	            // Get list 
	            var param = angular.copy(this.m.filter);
	            var searchService = this.API.service('search', this.API.all('hrm0900'));
	            param.page = page;

	            sessionStorage.hrm0900 = angular.toJson(param);

	            searchService.post(param).then(function (response) {
	                _this2.$log.info(response.plain().data);
	                _this2.m.list = response.plain().data.data;
	                _this2.$log.info(_this2.m.list);
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this3 = this;

	            var param = angular.copy(this.m.filter);
	            var service = this.API.service('download', this.API.all('hrm0900'));
	            service.post(param).then(function (response) {
	                _this3.$log.info(response.data);
	                _this3.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Hrm0900Controller;
	}();

	var Hrm0900Component = exports.Hrm0900Component = {
	    //templateUrl: './views/app/components/hrm0900/hrm0900.component.html',
	    templateUrl: '/views/admin.hrm0900',
	    controller: Hrm0900Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 56 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0810Controller = function () {
	    Hrm0810Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Hrm0810Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0810Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.RouteService = RouteService;

	        this.m = {
	            init: {},
	            form: {
	                // changed_date: moment(new Date())
	            },
	            dateOptions: {
	                format: 'YYYY-MM-DD'
	            }
	            // THIS IS DEFAULT TEMPLATE
	        };
	    }

	    _createClass(Hrm0810Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var id = this.$stateParams.id;

	            this.loadInitData();

	            this.m.init.id = id > 0 ? id : 0;
	            if (this.m.init.id > 0) {
	                this.load(this.m.init.id);
	            } else {
	                this.m.form = {
	                    id: this.m.init.id,
	                    expired_date: moment().endOf('year')
	                };
	            }
	        }

	        /**
	         * Load init data
	         */

	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var _this = this;

	            var service = this.API.service('init-data', this.API.all('hrm0810'));
	            service.post({}).then(function (response) {
	                var listEmployee = response.data.listEmployee;
	                // listEmployee.forEach(item => {
	                //     item.display = "[" + item.employee_code + "] " + item.fullname;
	                // });
	                // this.m.init = response.data;
	                _this.m.init.listEmployee = listEmployee;
	            });
	        }

	        /**
	         * Load entity
	         * @param {int} id Entity id
	         */

	    }, {
	        key: 'load',
	        value: function load(id) {
	            var _this2 = this;

	            var service = this.API.service('load', this.API.all('hrm0810'));
	            var param = { id: id };
	            service.post(param).then(function (response) {
	                var data = response.data.data;
	                if (data.num_days) {
	                    data.num_days = parseInt(data.num_days);
	                } else {
	                    data.num_days = 0;
	                }
	                _this2.m.form = data;
	            });
	        }
	    }, {
	        key: 'validate',
	        value: function validate(model, form) {
	            //if( model.start_date == null || model.start_date == undefined ) {
	            //    this.ClientService.warning("Vui lòng nhập Ngày bắt đầu");
	            //    return false;
	            //}

	            return true;
	        }
	    }, {
	        key: 'save',
	        value: function save(isValid, form) {
	            var _this3 = this;

	            if (this.validate(this.m.form, form)) {
	                var param = angular.copy(this.m.form);

	                // convert moment to date 'YYYY-MM-DD'
	                var dateFields = ["expired_date"];
	                dateFields.forEach(function (item) {
	                    if (param[item] != null) {
	                        param[item] = param[item].format('YYYY-MM-DD');
	                    }
	                });

	                var service = this.API.service('save', this.API.all('hrm0810'));
	                service.post(param).then(function (response) {
	                    var result = response.data.data;
	                    if (result.rtnCd == true) {
	                        _this3.ClientService.success(result.msg);
	                        _this3.m.form.id = result.id;
	                        _this3.m.init.id = result.id;
	                        // this.RouteService.goState('app.hrm0810', {id: this.m.id});
	                    } else {
	                        _this3.ClientService.error(result.msg);
	                    }
	                }, function (response) {
	                    _this3.m.errors = response.data.errors;
	                });
	            }
	        }

	        // delete() {
	        //     if( this.m.contract_id > 0) {
	        //         swal({
	        //             title: 'Are you sure?',
	        //             text: 'Do you want to delete this contract',
	        //             type: 'warning',
	        //             showCancelButton: true,
	        //             confirmButtonColor: '#DD6B55',
	        //             confirmButtonText: 'Yes, delete it!',
	        //             closeOnConfirm: false,
	        //             showLoaderOnConfirm: true,
	        //             html: false
	        //         }, () => {
	        //             let API = this.API
	        //             let searchService = API.service('delete', API.all('hrm0716'));
	        //             let param = {
	        //                     id: this.m.contract_id
	        //                 }

	        //             searchService.post(param)
	        //                 .then((response) => {
	        //                     swal({
	        //                         title: 'Reset!',
	        //                         text: 'Contract has been reset.',
	        //                         type: 'success',
	        //                         confirmButtonText: 'OK',
	        //                         closeOnConfirm: true
	        //                     }, () => {
	        //                         //$state.reload()
	        //                         this.RouteService.goState('app.hrm0715', {id: this.m.employee_id});
	        //                     })
	        //                 });
	        //         })   
	        //     }
	        // }

	    }]);

	    return Hrm0810Controller;
	}();

	var Hrm0810Component = exports.Hrm0810Component = {
	    //templateUrl: './views/app/components/hrm0810/hrm0810.component.html',
	    templateUrl: '/views/admin.hrm0810',
	    controller: Hrm0810Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 57 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0800Controller = function () {
	    Hrm0800Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Hrm0800Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0800Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.RouteService = RouteService;

	        this.m = {
	            filter: {},
	            list: null,
	            dateOptions: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Hrm0800Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            // Load Init data
	            this.loadInit();

	            // Load previous filter
	            var previousSearch = sessionStorage.hrm0800;
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            this.doSearch(page);
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var param = {};
	            this.API.service('init', this.API.all('hrm0800')).post(param).then(function (response) {
	                var listEmployee = response.data.listEmployee;
	                // listEmployee.forEach(item => {
	                //     item.display = "[" + item.employee_code + "] " + item.fullname;
	                // });
	                _this.m.init = response.plain().data;
	            });
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this2 = this;

	            console.log('this.m.filter :', this.m.filter);

	            // Get list 
	            var param = angular.copy(this.m.filter);
	            var searchService = this.API.service('search', this.API.all('hrm0800'));
	            param.page = page;

	            sessionStorage.hrm0800 = angular.toJson(param);

	            searchService.post(param).then(function (response) {
	                _this2.$log.info(response.plain().data);
	                _this2.m.list = response.plain().data.data;
	                _this2.$log.info(_this2.m.list);
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this3 = this;

	            var param = angular.copy(this.m.filter);
	            var service = this.API.service('download', this.API.all('hrm0800'));
	            service.post(param).then(function (response) {
	                _this3.$log.info(response.data);
	                _this3.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Hrm0800Controller;
	}();

	var Hrm0800Component = exports.Hrm0800Component = {
	    //templateUrl: './views/app/components/hrm0800/hrm0800.component.html',
	    templateUrl: '/views/admin.hrm0800',
	    controller: Hrm0800Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 58 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0915Controller = function () {
	    Crm0915Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Crm0915Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Crm0915Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.RouteService = RouteService;

	        this.m = {
	            filter: {},
	            list: null,
	            dateOptions: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Crm0915Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            // Load Init data
	            // this.loadInit();

	            // Load previous filter
	            if (this.checkStateParam() == false) {
	                var previousSearch = sessionStorage.crm0915;
	                if (angular.isUndefined(previousSearch)) {
	                    this.search();
	                    return;
	                }

	                previousSearch = angular.fromJson(previousSearch);
	                var page = previousSearch.page;

	                delete previousSearch['page'];
	                this.m.filter = angular.copy(previousSearch);

	                this.doSearch(page);
	            } else {
	                this.search();
	            }
	        }
	    }, {
	        key: 'checkStateParam',
	        value: function checkStateParam() {
	            if (this.$stateParams.pi_no != null && this.$stateParams.pi_no.length > 0) {
	                this.m.filter.pi_no = this.$stateParams.pi_no;
	                return true;
	            }

	            return false;
	        }

	        // loadInit() {
	        //     let param = {};
	        //     this.API.service('init', this.API.all('crm0915'))
	        //         .post(param)
	        //         .then((response) => {
	        //             this.m.init = response.plain().data;
	        //         });
	        // }

	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            // Get list 
	            var param = angular.copy(this.m.filter);
	            var searchService = this.API.service('search', this.API.all('crm0915'));
	            param.page = page;

	            sessionStorage.crm0915 = angular.toJson(param);

	            searchService.post(param).then(function (response) {
	                _this.$log.info(response.plain().data);
	                _this.m.list = response.plain().data.data;
	                _this.$log.info(_this.m.list);
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this2 = this;

	            var param = angular.copy(this.m.filter);
	            var service = this.API.service('download', this.API.all('crm0915'));
	            service.post(param).then(function (response) {
	                _this2.$log.info(response.data);
	                _this2.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Crm0915Controller;
	}();

	var Crm0915Component = exports.Crm0915Component = {
	    //templateUrl: './views/app/components/crm0915/crm0915.component.html',
	    templateUrl: '/views/admin.crm0915',
	    controller: Crm0915Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 59 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0914Controller = function () {
	    Crm0914Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Crm0914Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Crm0914Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.RouteService = RouteService;

	        this.m = {
	            filter: {},
	            list: null,
	            dateOptions: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Crm0914Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            // Load Init data
	            // this.loadInit();

	            // Load previous filter
	            var previousSearch = sessionStorage.crm0914;
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            this.doSearch(page);
	        }

	        // loadInit() {
	        //     let param = {};
	        //     this.API.service('init', this.API.all('crm0914'))
	        //         .post(param)
	        //         .then((response) => {
	        //             this.m.init = response.plain().data;
	        //         });
	        // }

	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            // Get list 
	            var param = angular.copy(this.m.filter);
	            var searchService = this.API.service('search', this.API.all('crm0914'));
	            param.page = page;

	            sessionStorage.crm0914 = angular.toJson(param);

	            searchService.post(param).then(function (response) {
	                _this.$log.info(response.plain().data);
	                _this.m.list = response.plain().data.data;
	                _this.$log.info(_this.m.list);
	            });
	        }
	    }]);

	    return Crm0914Controller;
	}();

	var Crm0914Component = exports.Crm0914Component = {
	    //templateUrl: './views/app/components/crm0914/crm0914.component.html',
	    templateUrl: '/views/admin.crm0914',
	    controller: Crm0914Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 60 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0154Controller = function () {
	    Hrm0154Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Hrm0154Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0154Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.RouteService = RouteService;

	        this.m = {
	            filter: {},
	            list: null,
	            dateOptions: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Hrm0154Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            // Load Init data
	            this.loadInit();

	            // Load previous filter
	            var previousSearch = sessionStorage.hrm0154;
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            this.doSearch(page);
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var param = {};
	            this.API.service('init', this.API.all('hrm0154')).post(param).then(function (response) {
	                var initData = response.plain().data;

	                // initData.listEmployee.forEach(element => {
	                //     element.displayName = "[" + element.employee_code + "] " + element.fullname;
	                // });
	                _this.m.init = initData;
	            });
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this2 = this;

	            // Get list 
	            var param = angular.copy(this.m.filter);
	            var searchService = this.API.service('search', this.API.all('hrm0154'));
	            param.page = page;
	            param.start_date = this.UtilsService.momentToStringDate(param.start_date);
	            param.end_date = this.UtilsService.momentToStringDate(param.end_date);

	            sessionStorage.hrm0154 = angular.toJson(param);

	            searchService.post(param).then(function (response) {
	                _this2.m.list = response.plain().data.data;
	            });
	        }
	    }]);

	    return Hrm0154Controller;
	}();

	var Hrm0154Component = exports.Hrm0154Component = {
	    //templateUrl: './views/app/components/hrm0154/hrm0154.component.html',
	    templateUrl: '/views/admin.hrm0154',
	    controller: Hrm0154Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 61 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0153Controller = function () {
	    Hrm0153Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Hrm0153Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0153Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.RouteService = RouteService;

	        this.m = {
	            filter: {},
	            disableCheckin: true,
	            disableCheckout: true,
	            list: null,
	            dateOptions: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Hrm0153Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            // Load previous filter
	            var previousSearch = sessionStorage.hrm0153;
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            this.doSearch(page);
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            // Get list 
	            var param = angular.copy(this.m.filter);
	            var searchService = this.API.service('search', this.API.all('hrm0153'));
	            param.page = page;

	            sessionStorage.hrm0153 = angular.toJson(param);

	            searchService.post(param).then(function (response) {
	                _this.m.list = response.plain().data.data;

	                if (_this.m.list.data.length > 0) {
	                    var firstItem = _this.m.list.data[0];
	                    if (firstItem.event_name == "CHECKIN") {
	                        _this.m.disableCheckin = true;
	                        _this.m.disableCheckout = false;
	                    } else if (firstItem.event_name == "CHECKOUT") {
	                        _this.m.disableCheckin = false;
	                        _this.m.disableCheckout = true;
	                    }
	                } else {
	                    _this.m.disableCheckin = false;
	                    _this.m.disableCheckout = true;
	                }
	            });
	        }
	    }, {
	        key: 'checkin',
	        value: function checkin() {
	            var _this2 = this;

	            this.API.service('checkin', this.API.all('hrm0153')).post().then(function (response) {
	                _this2.$log.info(response.plain().data);
	                var result = response.plain().data.data;
	                if (result.rtnCd == true) {
	                    _this2.ClientService.success(result.msg);
	                    _this2.search();
	                } else {
	                    _this2.ClientService.error(result.msg);
	                }
	            });
	        }
	    }, {
	        key: 'checkout',
	        value: function checkout() {
	            var _this3 = this;

	            this.API.service('checkout', this.API.all('hrm0153')).post().then(function (response) {
	                _this3.$log.info(response.plain().data);
	                var result = response.plain().data.data;
	                if (result.rtnCd == true) {
	                    _this3.ClientService.success(result.msg);
	                    _this3.search();
	                } else {
	                    _this3.ClientService.error(result.msg);
	                }
	            });
	        }
	    }]);

	    return Hrm0153Controller;
	}();

	var Hrm0153Component = exports.Hrm0153Component = {
	    //templateUrl: './views/app/components/hrm0153/hrm0153.component.html',
	    templateUrl: '/views/admin.hrm0153',
	    controller: Hrm0153Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 62 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Tmp9999Controller = function () {
	    Tmp9999Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Tmp9999Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Tmp9999Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.RouteService = RouteService;

	        this.m = {
	            filter: {},
	            list: null,
	            dateOptions: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Tmp9999Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            // Load previous filter
	            var previousSearch = sessionStorage.tmp9999;
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            this.doSearch(page);
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            // Get list 
	            var param = angular.copy(this.m.filter);
	            var searchService = this.API.service('search', this.API.all('tmp9999'));
	            param.page = page;

	            sessionStorage.tmp9999 = angular.toJson(param);

	            searchService.post(param).then(function (response) {
	                _this.$log.info(response.plain().data);
	                _this.m.list = response.plain().data.data;
	                _this.$log.info(thisClass.m.data);
	            });
	        }
	    }]);

	    return Tmp9999Controller;
	}();

	var Tmp9999Component = exports.Tmp9999Component = {
	    //templateUrl: './views/app/components/tmp9999/tmp9999.component.html',
	    templateUrl: '/views/admin.tmp9999',
	    controller: Tmp9999Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 63 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0716Controller = function () {
	    Hrm0716Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Hrm0716Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0716Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.RouteService = RouteService;

	        this.m = {
	            employee_id: this.$stateParams.employee_id,
	            contract_id: this.$stateParams.contract_id,
	            init: {},
	            form: {},
	            dateOptions: {
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Hrm0716Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            if (this.m.contract_id > 0) {
	                this.loadContract(this.m.contract_id);
	            } else {
	                // this.m.form.contract_no = "PKH-" + moment().format('YYYYMM') + '-';
	                this.m.form.start_date = moment(new Date());
	                this.m.form.end_date = moment(new Date()).add(1, 'year');
	            }
	            if (this.m.employee_id > 0) {
	                this.loadEmployee(this.m.employee_id);
	            }
	        }
	    }, {
	        key: 'validate',
	        value: function validate(model, form) {
	            if (model.contract_no == null || model.contract_no == "") {
	                this.ClientService.warning("Vui lòng nhập Mã hợp đồng");
	                return false;
	            }
	            if (model.start_date == null || model.start_date == undefined) {
	                this.ClientService.warning("Vui lòng nhập Ngày bắt đầu");
	                return false;
	            }
	            if (model.end_date == null || model.end_date == undefined) {
	                this.ClientService.warning("Vui lòng nhập Ngày kết thúc");
	                return false;
	            }
	            if (model.contract_type == null || model.contract_type == undefined) {
	                this.ClientService.warning("Vui lòng nhập Loại");
	                return false;
	            }

	            return true;
	        }
	    }, {
	        key: 'save',
	        value: function save(isValid, form) {
	            var _this = this;

	            if (this.validate(this.m.form, form)) {
	                var param = angular.copy(this.m.form);
	                param.start_date = this.UtilsService.momentToStringDate(param.start_date);
	                param.end_date = this.UtilsService.momentToStringDate(param.end_date);
	                param.id = parseInt(this.m.contract_id);
	                param.employee_id = parseInt(this.m.employee_id);

	                var service = this.API.service('save', this.API.all('hrm0716'));
	                service.post(param).then(function (response) {
	                    var result = response.data.data;
	                    if (result.rtnCd == true) {
	                        _this.ClientService.success(result.msg);
	                        _this.RouteService.goState('app.hrm0715', { id: _this.m.employee_id });
	                    } else {
	                        _this.ClientService.error(result.msg);
	                    }
	                }, function (response) {
	                    _this.m.errors = response.data.errors;
	                });
	            }
	        }
	    }, {
	        key: 'loadContract',
	        value: function loadContract(id) {
	            var _this2 = this;

	            var param = { id: id };
	            this.API.service('load-contract', this.API.all('hrm0716')).post(param).then(function (response) {
	                var data = response.data.data;
	                data.salary = parseInt(data.salary);
	                data.basic_salary = parseInt(data.basic_salary);
	                _this2.m.form = response.data.data;
	            });
	        }
	    }, {
	        key: 'loadEmployee',
	        value: function loadEmployee(id) {
	            var _this3 = this;

	            var param = { id: id };
	            this.API.service('load', this.API.all('hrm0711')).post(param).then(function (response) {
	                _this3.m.employee = response.data.data;
	                if (_this3.m.contract_id == 0) {
	                    var codePrefix = _this3.m.employee.employee_code.length > 6 ? _this3.m.employee.employee_code.substr(0, 6) : "PH00000";
	                    _this3.m.form.contract_no = codePrefix + "/" + moment().format('DDMMYYYY');
	                }
	            });
	        }
	    }, {
	        key: 'delete',
	        value: function _delete() {
	            var _this4 = this;

	            if (this.m.contract_id > 0) {
	                swal({
	                    title: 'Are you sure?',
	                    text: 'Do you want to delete this contract',
	                    type: 'warning',
	                    showCancelButton: true,
	                    confirmButtonColor: '#DD6B55',
	                    confirmButtonText: 'Yes, delete it!',
	                    closeOnConfirm: false,
	                    showLoaderOnConfirm: true,
	                    html: false
	                }, function () {
	                    var API = _this4.API;
	                    var searchService = API.service('delete', API.all('hrm0716'));
	                    var param = {
	                        id: _this4.m.contract_id
	                    };

	                    searchService.post(param).then(function (response) {
	                        swal({
	                            title: 'Reset!',
	                            text: 'Contract has been reset.',
	                            type: 'success',
	                            confirmButtonText: 'OK',
	                            closeOnConfirm: true
	                        }, function () {
	                            //$state.reload()
	                            _this4.RouteService.goState('app.hrm0715', { id: _this4.m.employee_id });
	                        });
	                    });
	                });
	            }
	        }
	    }]);

	    return Hrm0716Controller;
	}();

	var Hrm0716Component = exports.Hrm0716Component = {
	    //templateUrl: './views/app/components/hrm0716/hrm0716.component.html',
	    templateUrl: '/views/admin.hrm0716',
	    controller: Hrm0716Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 64 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0715Controller = function () {
	    Hrm0715Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService"];
	    function Hrm0715Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0715Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;

	        this.m = {
	            employee_id: this.$stateParams.id,
	            reveal: false
	        };
	    }

	    _createClass(Hrm0715Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.loadList();
	        }
	    }, {
	        key: 'loadList',
	        value: function loadList() {
	            var _this = this;

	            var param = { employee_id: this.m.employee_id };
	            var service = this.API.service('search', this.API.all('hrm0715'));
	            service.post(param).then(function (response) {
	                _this.m.list = response.data.data;
	            });
	        }
	    }, {
	        key: 'reveal',
	        value: function reveal() {
	            this.m.reveal = !this.m.reveal;
	        }
	    }]);

	    return Hrm0715Controller;
	}();

	var Hrm0715Component = exports.Hrm0715Component = {
	    //templateUrl: './views/app/components/hrm0715/hrm0715.component.html',
	    templateUrl: '/views/admin.hrm0715',
	    controller: Hrm0715Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 65 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0714Controller = function () {
	    Hrm0714Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService"];
	    function Hrm0714Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0714Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;

	        this.m = {
	            init: {},
	            employee_id: this.$stateParams.id,
	            form: {
	                changed_date: moment(new Date())
	            },
	            dateOptions: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Hrm0714Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.m.screen_name = this.$state.current.name.split('.')[1];
	            this.loadEmployee(this.m.employee_id);
	        }
	    }, {
	        key: 'loadEmployee',
	        value: function loadEmployee(employee_id) {
	            var service = this.API.service('load', this.API.all('hrm0711'));
	            var param = { id: this.m.employee_id };
	            var that = this;
	            service.post(param).then(function (response) {
	                that.m.form = response.data.data;
	            });
	        }
	    }, {
	        key: 'save',
	        value: function save(isValid, form) {
	            if (isValid) {
	                var param = angular.copy(this.m.form);
	                param.id = this.m.employee_id;

	                // convert moment to date 'YYYY-MM-DD'
	                var dateFields = ["dob", "start_date", "end_date", "probation_start_date", "probation_end_date", "card_id_issue_on"];
	                dateFields.forEach(function (item) {
	                    if (param[item] != null) {
	                        param[item] = param[item].format('YYYY-MM-DD');
	                    }
	                });

	                var service = this.API.service('save', this.API.all('hrm0714'));
	                var that = this;
	                service.post(param).then(function (response) {
	                    var res = response.data;
	                    if (res.rtnCd) {
	                        that.ClientService.success(res.msg);
	                    } else {
	                        that.ClientService.error(res.msg);
	                    }
	                });
	            } else {
	                this.formSubmitted = true;
	            }
	        }
	    }]);

	    return Hrm0714Controller;
	}();

	var Hrm0714Component = exports.Hrm0714Component = {
	    //templateUrl: './views/app/components/hrm0714/hrm0714.component.html',
	    templateUrl: '/views/admin.hrm0714',
	    controller: Hrm0714Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 66 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0713Controller = function () {
	    Hrm0713Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService"];
	    function Hrm0713Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0713Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;

	        this.m = {
	            employee_id: this.$stateParams.id,
	            employee: null
	            // init: {},
	            // form: {
	            //     changed_date: moment(new Date())
	            // },
	            // dateOptions: {
	            //     format: 'YYYY-MM-DD'
	            // }
	        };
	    }

	    _createClass(Hrm0713Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.m.screen_name = this.$state.current.name.split('.')[1];
	            this.loadEmployee(this.m.employee_id);
	        }
	    }, {
	        key: 'loadEmployee',
	        value: function loadEmployee(employee_id) {
	            var service = this.API.service('load', this.API.all('hrm0711'));
	            var param = { id: this.m.employee_id };
	            var that = this;
	            service.post(param).then(function (response) {
	                that.m.employee = response.data.data;
	            });
	        }
	    }, {
	        key: 'sendCode',
	        value: function sendCode() {
	            var _this = this;

	            var service = this.API.service('send-code', this.API.all('hrm0711'));
	            var param = { id: this.m.employee_id };
	            service.post(param).then(function (response) {
	                console.log('response.data :>> ', response.data);
	                var data = response.data.data;
	                if (data.rtnCd == true) {
	                    _this.ClientService.success(data.msg);
	                } else {
	                    _this.ClientService.error(data.msg);
	                }
	            });
	        }
	    }]);

	    return Hrm0713Controller;
	}();

	var Hrm0713Component = exports.Hrm0713Component = {
	    //templateUrl: './views/app/components/hrm0713/hrm0713.component.html',
	    templateUrl: '/views/admin.hrm0713',
	    controller: Hrm0713Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 67 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0712Controller = function () {
	    Hrm0712Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService"];
	    function Hrm0712Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0712Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;

	        this.m = {
	            employee_id: this.$stateParams.id
	            // init: {},
	            // form: {
	            //     changed_date: moment(new Date())
	            // },
	            // dateOptions: {
	            //     format: 'YYYY-MM-DD'
	            // }
	        };
	    }

	    _createClass(Hrm0712Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.m.screen_name = this.$state.current.name.split('.')[1];
	            this.loadEmployee(this.m.employee_id);
	        }
	    }, {
	        key: 'loadEmployee',
	        value: function loadEmployee(employee_id) {
	            // let service = this.API.service('load', this.API.all('crm2601'));
	            // let param = { store_id: this.m.store_id };
	            // let that = this;
	            // service.post(param)
	            //     .then(function(response) {
	            //         that.m.store = response.data.store;
	            //     });
	        }
	    }]);

	    return Hrm0712Controller;
	}();

	var Hrm0712Component = exports.Hrm0712Component = {
	    //templateUrl: './views/app/components/hrm0712/hrm0712.component.html',
	    templateUrl: '/views/admin.hrm0712',
	    controller: Hrm0712Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 68 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0711Controller = function () {
	    Hrm0711Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService"];
	    function Hrm0711Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0711Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;

	        this.m = {
	            employee_id: this.$stateParams.id,
	            employee: null
	            // init: {},
	            // form: {
	            //     changed_date: moment(new Date())
	            // },
	            // dateOptions: {
	            //     format: 'YYYY-MM-DD'
	            // }
	        };
	    }

	    _createClass(Hrm0711Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.m.screen_name = this.$state.current.name.split('.')[1];
	            this.loadEmployee(this.m.employee_id);
	        }
	    }, {
	        key: 'loadEmployee',
	        value: function loadEmployee(employee_id) {
	            var service = this.API.service('load', this.API.all('hrm0711'));
	            var param = { id: this.m.employee_id };
	            var that = this;
	            service.post(param).then(function (response) {
	                var data = response.data.data;
	                data.count_dependent_person = parseInt(data.count_dependent_person);
	                that.m.employee = data;
	            });
	        }
	    }]);

	    return Hrm0711Controller;
	}();

	var Hrm0711Component = exports.Hrm0711Component = {
	    //templateUrl: './views/app/components/hrm0711/hrm0711.component.html',
	    templateUrl: '/views/admin.hrm0711',
	    controller: Hrm0711Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 69 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0600Controller = function () {
	    Hrm0600Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService"];
	    function Hrm0600Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0600Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;

	        this.m = {
	            init: {},
	            form: {
	                changed_date: moment(new Date())
	            },
	            dateOptions: {
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Hrm0600Controller, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Hrm0600Controller;
	}();

	var Hrm0600Component = exports.Hrm0600Component = {
	    //templateUrl: './views/app/components/hrm0600/hrm0600.component.html',
	    templateUrl: '/views/admin.hrm0600',
	    controller: Hrm0600Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 70 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0510Controller = function () {
	    Hrm0510Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService"];
	    function Hrm0510Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0510Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;

	        this.m = {
	            init: {},
	            form: {
	                changed_date: moment(new Date())
	            },
	            dateOptions: {
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Hrm0510Controller, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Hrm0510Controller;
	}();

	var Hrm0510Component = exports.Hrm0510Component = {
	    //templateUrl: './views/app/components/hrm0510/hrm0510.component.html',
	    templateUrl: '/views/admin.hrm0510',
	    controller: Hrm0510Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 71 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0500Controller = function () {
	    Hrm0500Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService"];
	    function Hrm0500Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0500Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;

	        this.m = {
	            init: {},
	            form: {
	                changed_date: moment(new Date())
	            },
	            dateOptions: {
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Hrm0500Controller, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Hrm0500Controller;
	}();

	var Hrm0500Component = exports.Hrm0500Component = {
	    //templateUrl: './views/app/components/hrm0500/hrm0500.component.html',
	    templateUrl: '/views/admin.hrm0500',
	    controller: Hrm0500Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 72 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0410Controller = function () {
	    Hrm0410Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService"];
	    function Hrm0410Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0410Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;

	        this.m = {
	            init: {},
	            form: {
	                changed_date: moment(new Date())
	            },
	            dateOptions: {
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Hrm0410Controller, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Hrm0410Controller;
	}();

	var Hrm0410Component = exports.Hrm0410Component = {
	    //templateUrl: './views/app/components/hrm0410/hrm0410.component.html',
	    templateUrl: '/views/admin.hrm0410',
	    controller: Hrm0410Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 73 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0400Controller = function () {
	    Hrm0400Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService"];
	    function Hrm0400Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0400Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;

	        this.m = {
	            init: {},
	            form: {
	                changed_date: moment(new Date())
	            },
	            dateOptions: {
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Hrm0400Controller, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Hrm0400Controller;
	}();

	var Hrm0400Component = exports.Hrm0400Component = {
	    //templateUrl: './views/app/components/hrm0400/hrm0400.component.html',
	    templateUrl: '/views/admin.hrm0400',
	    controller: Hrm0400Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 74 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0710Controller = function () {
	    Hrm0710Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService"];
	    function Hrm0710Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0710Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;

	        this.m = {
	            screenMode: null,
	            employee_id: this.$stateParams.id
	        };
	    }

	    _createClass(Hrm0710Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.m.screen_name = this.$state.current.name.split('.')[1];
	            this.m.screenMode = this.$stateParams.screenMode === 'EDIT' ? 'EDIT' : 'VIEW';
	            this.loadEmployee(this.m.employee_id);
	        }
	    }, {
	        key: 'loadEmployee',
	        value: function loadEmployee(employee_id) {
	            // let service = this.API.service('load', this.API.all('crm2601'));
	            // let param = { store_id: this.m.store_id };
	            // let that = this;
	            // service.post(param)
	            //     .then(function(response) {
	            //         that.m.store = response.data.store;
	            //     });
	        }
	    }]);

	    return Hrm0710Controller;
	}();

	var Hrm0710Component = exports.Hrm0710Component = {
	    //templateUrl: './views/app/components/hrm0710/hrm0710.component.html',
	    templateUrl: '/views/admin.hrm0710',
	    controller: Hrm0710Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 75 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0700Controller = function () {
	    Hrm0700Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService"];
	    function Hrm0700Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0700Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;

	        this.m = {
	            init: {},
	            filter: {
	                is_work: ''
	            }
	        };
	    }

	    _createClass(Hrm0700Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.search();
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            /* this.m.filter = {
	                 orderBy: this.m.filter.orderBy,
	                 orderDirection: this.m.filter.orderDirection
	             };*/
	            this.m.filter = {};
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.search(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('hrm0700'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;
	            this.$log.info('param', param);
	            searchService.post(param).then(function (response) {
	                _this.$log.info('response.plain().data', response.plain().data);
	                _this.m.list = response.plain().data.data;
	            });
	        }
	    }]);

	    return Hrm0700Controller;
	}();

	var Hrm0700Component = exports.Hrm0700Component = {
	    //templateUrl: './views/app/components/hrm0700/hrm0700.component.html',
	    templateUrl: '/views/admin.hrm0700',
	    controller: Hrm0700Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 76 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2710Controller = function () {
	    Crm2710Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService"];
	    function Crm2710Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm2710Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;

	        this.m = {
	            init: {},
	            form: {
	                size: 150,
	                amount: 100
	            },
	            products: [],
	            dateOptions: {
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Crm2710Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.loadInitData();
	        }
	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var param = {
	                store_id: this.m.store_id,
	                store_order_id: this.m.store_order_id
	            };

	            var self = this;
	            var service = this.API.service('load-init', this.API.all('crm2710'));
	            service.post().then(function (response) {
	                self.m.init = response.plain().data;
	            });
	        }
	    }, {
	        key: 'addProduct',
	        value: function addProduct(item) {
	            var index = this.m.products.findIndex(function (ele) {
	                return ele.product_id == item.product_id;
	            });
	            if (index < 0) {
	                this.m.products.push(item);
	            }
	            item.hide = true;
	        }
	    }, {
	        key: 'removeProduct',
	        value: function removeProduct(item) {
	            var index = this.m.products.findIndex(function (ele) {
	                return ele.product_id == item.product_id;
	            });
	            if (index >= 0) {
	                this.m.products.splice(index, 1);
	            }

	            index = this.m.init.productList.findIndex(function (ele) {
	                return ele.product_id == item.product_id;
	            });
	            if (index > 0) {
	                this.m.init.productList[index].hide = false;
	            }
	        }
	    }, {
	        key: 'download',
	        value: function download() {

	            if (this.m.products.length == 0) {
	                this.ClientService.warning("Bạn chưa chọn sản phẩm");
	                return;
	            }

	            if (this.m.form.size <= 0) {
	                this.ClientService.warning("Nhập sai kích thước");
	                return;
	            }

	            if (this.m.form.amount <= 0) {
	                this.ClientService.warning("Nhập sai số lượng");
	                return;
	            }

	            // let param = angular.copy(this.m.form);

	            var listCode = this.m.products.map(function (ele) {
	                return ele.product_code.substr(0, 6);
	            });

	            var paramForPost = {};
	            paramForPost.size = this.m.form.size;
	            paramForPost.amount = this.m.form.amount;
	            paramForPost.listCode = listCode.join(',', paramForPost);

	            var env = getEnv();
	            this.ClientService.postUrl(env.URL_WWW + "/print-qr", paramForPost);
	        }
	    }]);

	    return Crm2710Controller;
	}();

	var Crm2710Component = exports.Crm2710Component = {
	    //templateUrl: './views/app/components/crm2710/crm2710.component.html',
	    templateUrl: '/views/admin.crm2710',
	    controller: Crm2710Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 77 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2700Controller = function () {
	    Crm2700Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService"];
	    function Crm2700Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm2700Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;

	        this.m = {
	            init: {},
	            filter: {},
	            list: null,
	            form: {
	                changed_date: moment(new Date())
	            },
	            dateOptions: {
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Crm2700Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.search();
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {

	            this.m.filter = {};
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            var $log = this.$log;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm2700'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;

	            searchService.post(param).then(function (response) {
	                _this.$log.info(response.plain().data);
	                _this.m.list = response.plain().data;
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this2 = this;

	            var param = angular.copy(this.m.filter);
	            var service = this.API.service('download', this.API.all('crm2700'));
	            service.post(param).then(function (response) {
	                _this2.$log.info(response.data);
	                _this2.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Crm2700Controller;
	}();

	var Crm2700Component = exports.Crm2700Component = {
	    //templateUrl: './views/app/components/crm2700/crm2700.component.html',
	    templateUrl: '/views/admin.crm2700',
	    controller: Crm2700Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 78 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0510Controller = function () {
	    Crm0510Controller.$inject = ["$scope", "$state", "API", "$log", "UtilsService", "ClientService", "$stateParams", "RouteService"];
	    function Crm0510Controller($scope, $state, API, $log, UtilsService, ClientService, $stateParams, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Crm0510Controller);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.RouteService = RouteService;
	        this.m = {
	            param: {},
	            form: {},
	            dateOptions: {

	                // formatYear: 'yy',
	                startingDay: 1
	            },

	            datetimepicker_options: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	            // this.$log.info($stateParams);

	        };this.m.param.store_id = $stateParams.store_id;
	        this.m.param.cs_id = $stateParams.cs_id;
	        if (this.m.param.store_id == null || this.m.param.store_id <= 0) {
	            this.ClientService.warning("Vui lòng chọn cửa hàng");
	            RouteService.goState("app.crm0300");
	            return;
	        }
	        //
	    }

	    _createClass(Crm0510Controller, [{
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var _this = this;

	            var param = {
	                store_id: this.m.param.store_id,
	                cs_id: this.m.param.cs_id
	            };
	            var log = this.$log;

	            var service = this.API.service('load-init', this.API.all('crm0510'));
	            service.post(param).then(function (response) {
	                if (_this.m.param.cs_id != null) {
	                    _this.m.form = response.data.inforCs;
	                }
	                _this.m.store = response.data.store;
	            });
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {
	            this.loadInitData();
	        }
	    }, {
	        key: 'condition_to_save',
	        value: function condition_to_save(param) {
	            var ClientService = this.ClientService;

	            var current_time = moment(new Date()).format('YYYY-MM-DD');

	            if (current_time > moment(param.deadline).format('YYYY-MM-DD')) {
	                ClientService.error('Deadline không hợp lệ');
	                return false;
	            }

	            if (param.cus_review.length < 20) {
	                ClientService.error('Độ dài customer feedback phải lớn hơn 20');
	                return false;
	            }

	            return true;
	        }
	    }, {
	        key: 'clickSave',
	        value: function clickSave() {
	            var self = this;

	            swal({
	                title: "Bạn có muốn lưu",
	                text: "Sau khi bấm lưu sẽ không thể thay đổi, vui lòng kiểm tra kĩ thông tin.",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                self.save();
	            });
	        }
	    }, {
	        key: 'save',
	        value: function save() {
	            var self = this;
	            if (self.m.isSaved == true) {
	                swal("Đang xử lý!");
	                return;
	            }
	            var RouteService = self.RouteService;
	            var ClientService = self.ClientService;
	            var saveService = self.API.service('save', self.API.all('crm0510'));
	            var param = angular.copy(self.m.form);

	            // Check fields are valid or not to further proceed
	            if (!this.condition_to_save(param)) {
	                return;
	            }
	            self.m.isSaved = true;

	            if (self.m.param.cs_id == null) {
	                param.cs_id = null;
	            } else {
	                param.cs_id = self.m.param.cs_id;
	            }

	            param.deadline = moment(param.deadline).format('YYYY-MM-DD 23:55:00');
	            param.store_id = self.m.store.store_id;
	            param.pic_id = self.m.store.salesman_id;
	            param.status = 0;

	            saveService.post(param).then(function (response) {
	                self.m.isSaved = false;

	                if (param.cs_id == null) {
	                    ClientService.success('Thêm mới thành công');
	                } else {
	                    ClientService.success('Cập nhật thành công');
	                }

	                RouteService.goState('app.crm0500');
	            });
	        }
	    }]);

	    return Crm0510Controller;
	}();

	var Crm0510Component = exports.Crm0510Component = {
	    templateUrl: '/views/admin.crm0510',
	    controller: Crm0510Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Crm0500Component = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _crm0500_finish = __webpack_require__(80);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0500Controller = function () {
	    Crm0500Controller.$inject = ["$scope", "$state", "API", "$log", "UtilsService", "ClientService", "DialogService"];
	    function Crm0500Controller($scope, $state, API, $log, UtilsService, ClientService, DialogService) {
	        'ngInject';

	        _classCallCheck(this, Crm0500Controller);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.DialogService = DialogService;
	        this.m = {
	            filter: {},
	            datetimepicker_options: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	        //
	    }

	    _createClass(Crm0500Controller, [{
	        key: 'loadInit',
	        value: function loadInit() {
	            this.title = ["Pending", "Done"];

	            for (var i = 1; i < 13; i++) {
	                this.m[i] = {
	                    filter: {
	                        orderBy: 'updated_at',
	                        orderDirection: 'desc'
	                    },
	                    data: {
	                        total: 0
	                    },
	                    title: this.title[i - 1]
	                };
	            }
	            this.init();

	            var previousSearch = sessionStorage.crm0500;
	            if (angular.isUndefined(previousSearch)) {
	                this.doSearch(1, 1);
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;
	            var index = previousSearch.index;

	            this.m.activeFlag = index;
	            delete previousSearch['page'];
	            delete previousSearch['index'];
	            this.m[index].filter = angular.copy(previousSearch);
	            this.doSearch(index, page);
	        }
	    }, {
	        key: 'init',
	        value: function init() {
	            var _this = this;

	            var loadService = this.API.service('load-init', this.API.all('crm0500'));
	            // let param = angular.copy(this.m.filter);

	            loadService.post().then(function (response) {
	                // this.$log.info(response);
	                _this.m.init = response.plain().data;
	            });
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {
	            this.loadInit();
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.doSearch(1, 1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter(index) {

	            this.m[index].filter = {
	                orderBy: 'updated_at',
	                orderDirection: 'desc'
	            };
	            this.doSearch(index, 1);
	        }
	    }, {
	        key: 'chooseTab',
	        value: function chooseTab(index) {

	            this.m.activeFlag = index;
	            this.doSearch(index, 1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(index, page) {
	            var _this2 = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm0500'));
	            var param = angular.copy(this.m[index].filter);
	            param.page = page;
	            param.index = index;

	            sessionStorage.crm0500 = angular.toJson(param);
	            searchService.post(param).then(function (response) {

	                _this2.m[index].data = response.plain().data.data;
	            });
	        }
	    }, {
	        key: 'finish',
	        value: function finish(item, is_edit) {

	            var modalOption = void 0;
	            var DialogClose = void 0;
	            var that = this;

	            var param = {
	                cs: item,
	                edit: is_edit
	            };
	            // that.$log.info('sale user', param);
	            modalOption = {
	                size: 'dialog-768',
	                controller: _crm0500_finish.Crm0500FinishDialogController,
	                resolve: {
	                    param: param
	                }
	            };

	            DialogClose = this.DialogService.open('crm0500_finish_dialog', modalOption);
	            DialogClose.result.then(function (data) {
	                that.search();
	            });
	        }
	    }]);

	    return Crm0500Controller;
	}();

	var Crm0500Component = exports.Crm0500Component = {
	    templateUrl: '/views/admin.crm0500.crm0500',
	    controller: Crm0500Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 80 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0500FinishDialogController = exports.Crm0500FinishDialogController = function () {
	    Crm0500FinishDialogController.$inject = ["$scope", "ClientService", "$uibModalInstance", "DialogService", "$log", "$filter", "API", "param"];
	    function Crm0500FinishDialogController($scope, ClientService, $uibModalInstance, DialogService, $log, $filter, API, param) {
	        'ngInject';

	        _classCallCheck(this, Crm0500FinishDialogController);

	        this.$scope = $scope;
	        this.$log = $log;
	        this.DialogService = DialogService;
	        this.$uibModalInstance = $uibModalInstance;
	        this.API = API;
	        this.ClientService = ClientService;

	        //his.$log.info('dialog param', param);
	        this.m = {
	            cs: param.cs,
	            form: {}
	        };
	        this.m.edit = param.edit;
	        this.m.isSubmit == false;
	    }

	    _createClass(Crm0500FinishDialogController, [{
	        key: 'finish',
	        value: function finish() {
	            var ClientService = this.ClientService;

	            if (this.m.form.com_resolve.length < 15) {
	                ClientService.error('Độ dài customer feedback phải lớn hơn 15 kí tự');
	                return;
	            }
	            if (this.m.isSubmit == true) {
	                swal("Processing!");
	                return;
	            }

	            var self = this;
	            swal({
	                title: "Do you want to finish a task?",
	                text: "After confirming, information can not be changed",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Yes',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                self.confirmFinish();
	            });
	        }
	    }, {
	        key: 'confirmFinish',
	        value: function confirmFinish() {
	            var _this = this;

	            this.m.isSubmit = true;
	            var ClientService = this.ClientService;

	            var searchService = this.API.service('update', this.API.all('crm0510'));
	            this.m.form.status = 1;
	            var param = angular.copy(this.m.form);

	            param.cs_id = this.m.cs.cs_id;
	            // this.$log.info('we can send it: ', this.m);
	            searchService.post(param).then(function (response) {
	                if (response.data.oke) {
	                    ClientService.success('Update task successfully');
	                } else {
	                    ClientService.error('permission deny');
	                }
	                _this.m.isSubmit = false;
	                _this.DialogService.close();
	            });
	        }
	    }, {
	        key: 'cancel',
	        value: function cancel() {
	            this.DialogService.close();
	        }
	    }]);

	    return Crm0500FinishDialogController;
	}();

/***/ }),
/* 81 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2610Controller = function () {
	    Crm2610Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService"];
	    function Crm2610Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm2610Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;

	        this.m = {
	            store_id: this.$stateParams.store_id,
	            filter: {
	                from_date: moment(new Date()).add(-12, 'M'),
	                to_date: moment(new Date())
	            },
	            datetimepicker_options: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Crm2610Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.search();
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                from_date: moment(new Date()).add(12, 'M'),
	                to_date: moment(new Date())
	            };
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm2610'));
	            var param = angular.copy(this.m.filter);

	            if (param.from_date) {
	                param.from_date = moment(param.from_date).format('YYYY-MM-DD');
	            }

	            if (param.to_date) {
	                param.to_date = moment(param.to_date).format('YYYY-MM-DD');
	            }

	            param.page = page;
	            param.store_id = this.m.store_id;
	            sessionStorage.crm2610 = angular.toJson(param);
	            searchService.post(param).then(function (response) {
	                var data = response.plain().data;
	                _this.m.list = _this.mergeData(data.products, data.soldProducts);
	            });
	        }
	    }, {
	        key: 'mergeData',
	        value: function mergeData(products, solds) {

	            for (var i = 0; i < solds.length; i++) {
	                for (var j = 0; j < products.length; j++) {
	                    if (solds[i].product_id == products[j].product_id) {
	                        products[j].amount = solds[i].amount;
	                        products[j].money = solds[i].money;
	                        j = products.length;
	                    }
	                }
	            }

	            return products;
	        }
	    }]);

	    return Crm2610Controller;
	}();

	var Crm2610Component = exports.Crm2610Component = {
	    //templateUrl: './views/app/components/crm2610/crm2610.component.html',
	    templateUrl: '/views/admin.crm2610',
	    controller: Crm2610Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 82 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2602Controller = function () {
	    Crm2602Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService"];
	    function Crm2602Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm2602Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;

	        this.m = {
	            screen_name: null,
	            store_id: this.$stateParams.store_id
	        };
	    }

	    _createClass(Crm2602Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.loadStore(this.m.store_id);
	            this.m.screen_name = this.$state.current.name.split('.')[1];
	        }
	    }, {
	        key: 'loadStore',
	        value: function loadStore(store_id) {
	            // console.log('crm2602 load store', store_id);
	        }
	    }]);

	    return Crm2602Controller;
	}();

	var Crm2602Component = exports.Crm2602Component = {
	    //templateUrl: './views/app/components/crm2602/crm2602.component.html',
	    templateUrl: '/views/admin.crm2602',
	    controller: Crm2602Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 83 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2601Controller = function () {
	    Crm2601Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService"];
	    function Crm2601Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm2601Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;

	        this.m = {
	            store_id: this.$stateParams.store_id
	        };
	    }

	    _createClass(Crm2601Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var _this = this;

	            this.m.screen_name = this.$state.current.name.split('.')[1];
	            this.loadStore(this.m.store_id);

	            this.$scope.$on('crm2601-reload', function () {
	                _this.loadStore(_this.m.store_id);
	            });
	        }
	    }, {
	        key: 'loadStore',
	        value: function loadStore(store_id) {
	            var _this2 = this;

	            var service = this.API.service('load', this.API.all('crm2601'));
	            var param = { store_id: this.m.store_id };
	            service.post(param).then(function (response) {
	                var store = response.data.store;

	                if (store.review_expired_date && moment(new Date()).isAfter(store.review_expired_date)) {
	                    store.is_review_valid = false;
	                } else {
	                    store.is_review_valid = true;
	                }
	                _this2.m.store = store;
	            });
	        }
	    }]);

	    return Crm2601Controller;
	}();

	var Crm2601Component = exports.Crm2601Component = {
	    //templateUrl: './views/app/components/crm2601/crm2601.component.html',
	    templateUrl: '/views/admin.crm2601',
	    controller: Crm2601Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 84 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2600Controller = function () {
	    Crm2600Controller.$inject = ["$rootScope", "$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService"];
	    function Crm2600Controller($rootScope, $scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm2600Controller);

	        this.$rootScope = $rootScope;
	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.$stateParams = $stateParams;
	        this.ClientService = ClientService;
	        this.can = AclService.can;

	        this.m = {
	            // store_id: parseInt($stateParams.store_id)
	            datetimepicker_options: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            },
	            review: {
	                review_expired_date: moment().endOf("year")
	            }
	        };
	    }

	    _createClass(Crm2600Controller, [{
	        key: '$onInit',
	        value: function $onInit() {

	            if (this.$stateParams.store_id == null || this.$stateParams.store_id == undefined) {
	                RouteService.goState('app.crm0300');
	                return;
	            }

	            this.m.store_id = parseInt(this.$stateParams.store_id);
	            if (!(this.m.store_id > 0)) {
	                RouteService.goState('app.crm0300');
	                return;
	            }

	            this.loadStore(this.m.store_id);
	            this.reloadComment();
	        }
	    }, {
	        key: 'loadStore',
	        value: function loadStore(store_id) {
	            var service = this.API.service('load', this.API.all('crm2600'));
	            var param = { store_id: this.m.store_id };
	            var that = this;
	            service.post(param).then(function (response) {
	                that.m.store = response.data.store;
	                that.m.signatures = response.data.signatures;
	            });
	        }

	        /**
	         * 
	         * @param {Integer} type commitType (0: comment, 1: approve, 2: deny)
	         */

	    }, {
	        key: 'commitReview',
	        value: function commitReview(type) {
	            var _this = this;

	            var service = this.API.service('review', this.API.all('crm2600'));
	            var param = {
	                store_id: this.m.store_id,
	                type: type,
	                content: this.m.review.comment,
	                review_expired_date: this.m.review.review_expired_date
	            };

	            if (angular.isUndefined(param.review_expired_date) || param.review_expired_date == null || param.review_expired_date == '') {
	                param.review_expired_date = moment().endOf("year").format('YYYY-MM-DD');
	            } else {
	                param.review_expired_date = param.review_expired_date.format('YYYY-MM-DD');
	            }

	            service.post(param).then(function (response) {
	                var data = response.data;
	                if (data.rtnCd == false) {
	                    _this.ClientService.error(data.rtnMsg);
	                } else {
	                    _this.m.review.comment = null;
	                    _this.ClientService.success("Cập nhật thành công");
	                    _this.loadStore(_this.m.store_id);
	                    _this.$rootScope.$broadcast('crm2601-reload');
	                    _this.reloadComment();
	                }
	            });
	        }
	    }, {
	        key: 'reloadComment',
	        value: function reloadComment() {
	            // let service = this.API.all('comments');
	            // console.log('service 1:>> ', service);
	            // let param = { 
	            //     store_id: this.m.store_id,
	            //     group: "mst_store_verify"
	            // };
	            // console.log('param :>> ', param);
	            // service.customGET("", param)
	            //     .then((response) => {
	            //         console.log('response :>> ', response);
	            //         this.m.reviewComments = response.data;
	            //     });
	            this.doSearchComment(1);
	        }
	    }, {
	        key: 'doSearchComment',
	        value: function doSearchComment(page) {
	            var _this2 = this;

	            var service = this.API.all('comments');
	            var param = {
	                id1: this.m.store_id,
	                group: "mst_store_verify",
	                page: page,
	                page_size: 10
	            };
	            service.customGET("", param).then(function (response) {
	                console.log('response :>> ', response);
	                _this2.m.reviewComments = response.data;
	            });
	        }
	    }]);

	    return Crm2600Controller;
	}();

	var Crm2600Component = exports.Crm2600Component = {
	    //templateUrl: './views/app/components/crm2600/crm2600.component.html',
	    templateUrl: '/views/admin.crm2600',
	    controller: Crm2600Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Rpt0518Component = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _report = __webpack_require__(86);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	// import { ChartController } from '../report/chart';


	var Rpt0518Controller = function () {
	    Rpt0518Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "DialogService", "ClientService", "ChartService"];
	    function Rpt0518Controller($scope, $state, $compile, $log, AclService, API, UtilsService, DialogService, ClientService, ChartService) {
	        'ngInject';

	        _classCallCheck(this, Rpt0518Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.DialogService = DialogService;
	        this.ChartService = ChartService;
	        // 
	        this.m = {
	            activeFlag: 1,
	            datetimepicker_options: {
	                viewMode: 'years',
	                format: 'YYYY'
	            }
	        };
	        this.m.tab_name = ['', 'Overview', 'Giao hàng', 'Đặt hàng', 'Thanh toán', 'Hàng nợ', 'Waranty', 'Profit'];
	        this.m.chart_name = ['Bar chart', 'Line chart', 'Pie chart'];
	        for (var i = 1; i < 10; i++) {
	            this.m[i] = {
	                filter: {
	                    data_type: 1,
	                    time_mode: "0",
	                    year: moment().format('YYYY')
	                },
	                data: {
	                    total: 0
	                }
	            };
	        }
	    }

	    _createClass(Rpt0518Controller, [{
	        key: 'chooseTab',
	        value: function chooseTab(index) {
	            if (index < 1 || index > 10) {
	                return;
	            }
	            this.m.activeFlag = index;
	            this.loadData(index);
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.rpt0518;
	            // this.loadInit();
	            this.loadInitData();
	            if (angular.isUndefined(previousSearch)) {
	                this.loadData(1);
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var index = previousSearch.index;

	            this.m.activeFlag = index;
	            delete previousSearch['index'];
	            this.m[index].filter = angular.copy(previousSearch);

	            this.loadData(index);
	        }
	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var self = this;
	            var service = this.API.service('init', this.API.all('rpt0518'));
	            var param = {};
	            service.post(param).then(function (response) {
	                self.m.init = response.plain().data;
	            });
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter(index) {
	            if (index < 1 || index > 10) {
	                return;
	            }
	            this.m[index].filter = {
	                data_type: 1,
	                time_mode: "0",
	                year: moment().format('YYYY')
	            };
	            this.loadData(index);
	        }
	    }, {
	        key: 'loadData',
	        value: function loadData(index) {
	            var _this = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('rpt0518'));
	            var param = angular.copy(this.m[index].filter);
	            param.index = index;
	            param.down = 0;
	            if (param.year == null) {
	                year = moment();
	                param.year = year.format('YYYY');
	                this.m[index].filter = param;
	            } else {
	                param.year = moment(param.year).format('YYYY');
	            }
	            sessionStorage.rpt0518 = angular.toJson(param);
	            searchService.post(param).then(function (response) {
	                _this.$log.info(_this.m);
	                _this.m[index].data = response.plain().data;
	            });
	        }
	    }, {
	        key: 'title_for_bar',
	        value: function title_for_bar(activeFlag, param, category) {

	            var root_title = moment(param.year).format('YYYY') + ' ' + this.m.tab_name[activeFlag] + ' ' + category;
	            // $log.info('check param vertical: ',param);
	            var name = [];
	            if (param.index == 2 || param.index == 3) {
	                if (param['data_type']) {
	                    for (var i = 0; i < this.m.init.listDataType.length; i++) {

	                        if (this.m.init.listDataType[i].id == param['data_type']) {
	                            name.push(this.m.init.listDataType[i].name);
	                            break;
	                        }
	                    }
	                }
	            }

	            if (param['areaGroup']) {
	                for (var i = 0; i < this.m.init.listAreaGroup.length; i++) {
	                    // $log.info('name',this.m.init.listAreaGroup[i]);
	                    if (this.m.init.listAreaGroup[i].area_group_id == param['areaGroup']) {
	                        name.push(this.m.init.listAreaGroup[i].name);
	                        break;
	                    }
	                }
	            }
	            if (param['area1']) {
	                for (var i = 0; i < this.m.init.listArea1.length; i++) {
	                    if (this.m.init.listArea1[i].area_id == param['area1']) {
	                        name.push(this.m.init.listArea1[i].name);
	                        break;
	                    }
	                }
	            }

	            if (param['salesman_id']) {
	                // $log.info('check sale: ',this.m.init.salesmanList);
	                for (var i = 0; i < this.m.init.salesmanList.length; i++) {
	                    if (this.m.init.salesmanList[i].id == param['salesman_id']) {
	                        name.push(this.m.init.salesmanList[i].name);
	                        break;
	                    }
	                }
	            }

	            if (param['import_type']) {
	                if (param['import_type'] == 1) {
	                    name.push("Bảo hành");
	                } else {
	                    name.push("Trả lại");
	                }
	            }

	            for (var i = 0; i < name.length; i++) {
	                root_title = root_title + ' - ' + name[i];
	            }
	            return root_title;
	        }
	    }, {
	        key: 'title_for_line',
	        value: function title_for_line(activeFlag, param, category) {
	            var root_title = this.m.tab_name[activeFlag] + ' ' + category;
	            var name = [];
	            if (param.index == 2 || param.index == 3) {
	                if (param['data_type']) {
	                    for (var i = 0; i < this.m.init.listDataType.length; i++) {

	                        if (this.m.init.listDataType[i].id == param['data_type']) {
	                            name.push(this.m.init.listDataType[i].name);
	                            break;
	                        }
	                    }
	                }
	            }

	            if (param['import_type']) {
	                if (param['import_type'] == 1) {
	                    name.push("Bảo hành");
	                } else {
	                    name.push("Trả lại");
	                }
	            }
	            for (var i = 0; i < name.length; i++) {
	                root_title = root_title + ' - ' + name[i];
	            }

	            return root_title;
	        }
	    }, {
	        key: 'line_chart',
	        value: function line_chart(item) {
	            var title = "";
	            var that = this;
	            var $log = this.$log;
	            var param = angular.copy(that.m[that.m.activeFlag].filter);
	            var data = null;
	            var category = item["Name"];
	            var activeFlag = that.m.activeFlag;
	            param.index = activeFlag;
	            var root_title = this.title_for_bar(activeFlag, param, category);

	            if (param.time_mode == 0) {
	                data = that.ChartService.get_line_by_month(item, param, root_title);
	            } else {
	                data = that.ChartService.get_line_by_year(item, root_title);
	            }
	            $log.info('data line', data);
	            var modalOption = {
	                size: 'dialog-1024',
	                controller: _report.ReportDialogController,
	                resolve: {
	                    data: { 1: data }
	                }
	            };
	            that.DialogService.open('report_chart', modalOption);
	        }
	    }, {
	        key: 'draw_vertical',
	        value: function draw_vertical(activeFlag, category) {
	            var data = this.m[activeFlag].data.data;
	            var param = this.m[activeFlag].filter;
	            param.index = activeFlag;
	            var $log = this.$log;

	            var key_name = 'Name';

	            var root_title = this.title_for_bar(activeFlag, param, category);

	            var title = {
	                0: root_title,
	                1: root_title
	            };
	            var data_chart = this.ChartService.get_vertical(data, param, title, category, key_name);

	            var modalOption = {
	                size: 'dialog-1024',
	                controller: _report.ReportDialogController,
	                resolve: {
	                    data: { 1: data_chart }
	                }
	            };

	            this.DialogService.open('report_chart', modalOption);
	        }
	    }, {
	        key: 'compare',
	        value: function compare(item) {
	            var compareService = this.API.service('compare', this.API.all('rpt0518'));
	            var year = null;
	            var param = angular.copy(this.m[this.m.activeFlag].filter);
	            var activeFlag = this.m.activeFlag;
	            param.index = this.m.activeFlag;
	            param.id = item.id;
	            param.year = null;
	            var $log = this.$log;
	            var that = this;
	            var root_title = this.title_for_line(activeFlag, param, item["Name"]);

	            var title = {
	                0: "So sánh giữa 4 năm " + root_title,
	                1: "So sánh luỹ kế giữa 4 năm " + root_title,
	                2: "Chuyển động 4 năm " + root_title
	            };

	            $log.info('param ', param);
	            compareService.post(param).then(function (response) {
	                // thisClass.m.downloadPart1[year] = 1;
	                var res = response.data;
	                $log.info('res ', res);
	                var data = that.ChartService.get_compare(res, param, title);
	                var modalOption = {
	                    size: 'dialog-1024',
	                    controller: _report.ReportDialogController,
	                    resolve: {
	                        data: data
	                    }
	                };
	                that.DialogService.open('report_chart', modalOption);
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download(index) {
	            var _this2 = this;

	            var param = angular.copy(this.m[index].filter);
	            var service = this.API.service('download', this.API.all('rpt0518'));
	            param.down = 1;
	            param.index = index;
	            service.post(param).then(function (response) {
	                // this.$log.info(response.data);
	                _this2.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Rpt0518Controller;
	}();

	var Rpt0518Component = exports.Rpt0518Component = {
	    templateUrl: '/views/admin.rpt0518.rpt0518',
	    controller: Rpt0518Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 86 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ReportDialogController = exports.ReportDialogController = function () {
	    ReportDialogController.$inject = ["$scope", "$uibModalInstance", "DialogService", "$log", "$filter", "data"];
	    function ReportDialogController($scope, $uibModalInstance, DialogService, $log, $filter, data) {
	        'ngInject';

	        _classCallCheck(this, ReportDialogController);

	        this.$scope = $scope;
	        this.$log = $log;
	        this.DialogService = DialogService;
	        this.$uibModalInstance = $uibModalInstance;

	        this.m = {
	            msg: 'this is my model  2. StoreDialogController 11 22 33'
	        };
	        this.m.id_charts = [];
	        data = data[1];
	        this.$log.info('init chart', data);

	        var num = data.length;
	        for (var i = 0; i < num; i++) {
	            this.m.id_charts.push("Chart" + i);
	        }
	        this.$log.info('init chart');

	        this.loadChart(data);
	    }

	    _createClass(ReportDialogController, [{
	        key: 'amChartOptionForBar',
	        value: function amChartOptionForBar(title) {
	            var amChartOption = {
	                "type": "serial",
	                "theme": "black",
	                "titles": [{
	                    "text": title,
	                    "size": 15
	                }],
	                "dataProvider": [],
	                "valueAxes": [{
	                    "gridColor": "#FFFFFF",
	                    "gridAlpha": 0.2,
	                    "dashLength": 0
	                }],
	                "gridAboveGraphs": true,
	                "startDuration": 1,
	                "graphs": [{
	                    "balloonText": "[[category]]: <b>[[value]]</b>",
	                    "fillAlphas": 0.8,
	                    "lineAlpha": 0.2,
	                    "type": "column",
	                    "valueField": "value"
	                }],
	                "chartCursor": {
	                    "categoryBalloonEnabled": false,
	                    "cursorAlpha": 0,
	                    "zoomable": false
	                },
	                "categoryField": "key",
	                "categoryAxis": {
	                    "gridPosition": "start",
	                    "gridAlpha": 0,
	                    "tickPosition": "start",
	                    "tickLength": 20,
	                    "labelRotation": 45
	                },
	                "export": {
	                    "enabled": true
	                }
	            };
	            return amChartOption;
	        }
	    }, {
	        key: 'amChartOptionForLine',
	        value: function amChartOptionForLine(title) {
	            var amChartOption = {
	                "type": "serial",
	                "theme": "black",
	                "marginRight": 80,
	                "autoMarginOffset": 20,
	                "titles": [{
	                    "text": title,
	                    "size": 15
	                }],
	                "dataProvider": [],
	                "valueAxes": [{
	                    "axisAlpha": 0,
	                    "guides": [{
	                        "fillAlpha": 0.1,
	                        "fillColor": "#ffffff",
	                        "lineAlpha": 0,
	                        "toValue": 16,
	                        "value": 10
	                    }],
	                    "position": "left",
	                    "tickLength": 0
	                }],
	                "graphs": [{
	                    "balloonText": "[[category]]<br><b><span style='font-size:14px;'>value:[[value]]</span></b>",
	                    "bullet": "round",
	                    "dashLength": 3,
	                    "colorField": "color",
	                    "valueField": "value"
	                }],
	                "chartScrollbar": {
	                    "scrollbarHeight": 2,
	                    "offset": -1,
	                    "backgroundAlpha": 0.1,
	                    "backgroundColor": "#888888",
	                    "selectedBackgroundColor": "#67b7dc",
	                    "selectedBackgroundAlpha": 1
	                },
	                "chartCursor": {
	                    "fullWidth": true,
	                    "valueLineEabled": true,
	                    "valueLineBalloonEnabled": true,
	                    "valueLineAlpha": 0.5,
	                    "cursorAlpha": 0
	                },
	                "categoryField": "key",
	                "categoryAxis": {
	                    "parseDates": false,
	                    "axisAlpha": 0,
	                    "gridAlpha": 0.1,
	                    "minorGridAlpha": 0.1,
	                    "minorGridEnabled": true
	                },
	                "export": {
	                    "enabled": true
	                }
	            };
	            return amChartOption;
	        }
	    }, {
	        key: 'amChartMultiLines',
	        value: function amChartMultiLines(title, graph) {
	            var amChartOption = {
	                "type": "serial",
	                "theme": "light",
	                "dataProvider": [],
	                "titles": [{
	                    "text": title,
	                    "size": 15
	                }],
	                "valueAxes": [{
	                    "gridColor": "#FFFFFF",
	                    "gridAlpha": 0.2,
	                    "dashLength": 0
	                }],
	                "gridAboveGraphs": true,
	                "startDuration": 1,
	                "graphs": graph,
	                "chartCursor": {
	                    "categoryBalloonEnabled": false,
	                    "cursorAlpha": 0,
	                    "zoomable": false
	                },
	                "categoryField": "category",
	                "categoryAxis": {
	                    "gridPosition": "start",
	                    "gridAlpha": 0
	                },
	                "legend": {}
	            };
	            return amChartOption;
	        }
	    }, {
	        key: 'amChartOptionForPie',
	        value: function amChartOptionForPie(title) {
	            var amChartOption = {
	                "type": "pie",
	                "theme": "light",
	                "titles": [{
	                    "text": title,
	                    "size": 15
	                }],
	                "dataProvider": [],
	                "valueField": "value",
	                "titleField": "key",
	                "balloon": {
	                    "fixedPosition": true
	                },
	                "export": {
	                    "enabled": true
	                }
	            };
	            return amChartOption;
	        }
	    }, {
	        key: 'chooseAmChartOptions',
	        value: function chooseAmChartOptions(type, title, graph) {
	            switch (type) {
	                case 1:
	                    return this.amChartOptionForBar(title);
	                case 2:
	                    // return this.amChartOptionForLine(title);
	                    return this.amChartMultiLines(title, graph);
	                case 3:
	                    return this.amChartOptionForPie(title);
	                case 4:
	                    return this.amChartOptionForLine(title);
	            }
	            return null;
	        }

	        /* type
	         * 1: bar
	         * 2: Line
	         * 3: Pie
	         */

	    }, {
	        key: 'loadChart',
	        value: function loadChart(data) {
	            var $log = this.$log;
	            //$log.info('load chart', this.m.dataProvider);

	            var copy = [];

	            // let copy_2 = angular.copy(this.chooseAmChartOptions(3, title, graph));
	            for (var i = 0; i < data.length; i++) {
	                var item = angular.copy(this.chooseAmChartOptions(data[i].type, data[i].title, data[i].graph));
	                item.dataProvider = data[i].dataProvider;
	                copy.push(item);
	            }

	            this.m.amChartOptions = copy;
	            $log.info('load chart', this.m);

	            for (var i = 0; i < data.length; i++) {
	                // $log.info('loop', this.m.id_charts[i]);
	                this.$scope.$broadcast('amCharts.updateData', data[i].dataProvider, this.m.id_charts[i]);
	            }
	            // this.$scope.$broadcast('amCharts.updateData', data[0].dataProvider, this.m.id_charts[0]);
	            // this.$scope.$broadcast('amCharts.updateData', data[1].dataProvider, this.m.id_charts[1]);
	            // this.$scope.$broadcast('amCharts.updateData', data[2].dataProvider, this.m.id_charts[2]);

	            // this.$scope.$broadcast('amCharts.updateData', this.m.dataProvider, 'mySecondChart');
	        }
	    }, {
	        key: 'cancel',
	        value: function cancel() {
	            this.DialogService.close();
	        }
	    }]);

	    return ReportDialogController;
	}();

/***/ }),
/* 87 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0310Controller = function () {
	    Hrm0310Controller.$inject = ["$scope", "$state", "API", "$log", "UtilsService", "ClientService", "$stateParams", "RouteService"];
	    function Hrm0310Controller($scope, $state, API, $log, UtilsService, ClientService, $stateParams, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0310Controller);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.RouteService = RouteService;
	        this.m = {
	            filter: {},
	            list: null,
	            dateOptions: {
	                // formatYear: 'yy',
	                startingDay: 1
	            }
	        };

	        this.m.task_id = $stateParams.task_id;
	        this.m.isSaved = false;
	        this.$log.info("state param", $stateParams.task_id);
	        this.$log.info("task id", this.m.task_id);
	    }

	    _createClass(Hrm0310Controller, [{
	        key: "$onInit",
	        value: function $onInit() {
	            this.loadInitData();
	        }
	    }, {
	        key: "save",
	        value: function save() {
	            if (this.m.isSaved == true) {
	                swal("Processing!");
	                return;
	            }
	            var ClientService = this.ClientService;
	            var param = angular.copy(this.m.filter);
	            if (this.m.task_id == null) {
	                param.task_id = null;
	            } else {
	                param.task_id = this.m.task_id;
	            }
	            if (!param.task_name) {
	                ClientService.error('Please enter task name');
	                return;
	            }
	            if (!param.user_id) {
	                ClientService.error('Please choose person to assign');
	                return;
	            }
	            if (!param.task_content) {
	                ClientService.error('Please enter task content');
	                return;
	            }

	            var self = this;
	            swal({
	                title: "Do you want to create a task?",
	                text: "After confirm your task will be created",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Yes',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                self.confirmSave();
	            });
	        }
	    }, {
	        key: "confirmSave",
	        value: function confirmSave() {
	            var _this = this;

	            if (this.m.isSaved == true) {
	                swal("Processing!");
	                return;
	            }

	            this.m.isSaved = true;

	            var $log = this.$log;
	            //$log.info('aihihihihi', this.m.filter);
	            var alerts = this.alerts;
	            var RouteService = this.RouteService;
	            var ClientService = this.ClientService;
	            var saveService = this.API.service('save', this.API.all('hrm0310'));
	            var param = angular.copy(this.m.filter);

	            saveService.post(param).then(function (response) {

	                if (param.payment_id == null) {
	                    ClientService.success('Add new task successfully');
	                } else {
	                    ClientService.success('Update task successfully');
	                }
	                RouteService.goState('app.hrm0300');
	                _this.m.isSaved = false;
	            });
	        }
	    }, {
	        key: "loadInitData",
	        value: function loadInitData() {
	            var _this2 = this;

	            var param = {

	                task_id: this.m.task_id
	            };

	            var service = this.API.service('load-init', this.API.all('hrm0310'));
	            service.post(param).then(function (response) {
	                _this2.m.init = response.data; //initiate list of bank account

	                if (_this2.m.task_id != null) {

	                    _this2.m.filter.deadline = new Date(_this2.m.init.task[0].deadline);
	                    _this2.m.filter.task_group_id = _this2.m.init.task[0].task_group_id;
	                    _this2.m.filter.user_id = _this2.m.init.task[0].user_id;
	                    _this2.m.filter.task_name = _this2.m.init.task[0].task_name;
	                    _this2.m.filter.task_content = _this2.m.init.task[0].task_content;
	                }
	            });
	        }
	    }]);

	    return Hrm0310Controller;
	}();

	var Hrm0310Component = exports.Hrm0310Component = {
	    templateUrl: './views/admin.hrm0310',
	    controller: Hrm0310Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Hrm0300Component = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Hrm = __webpack_require__(89);

	var _Hrm0300_submit = __webpack_require__(90);

	var _Hrm0300_score = __webpack_require__(91);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0300Controller = function () {
	    Hrm0300Controller.$inject = ["$scope", "$state", "API", "$log", "UtilsService", "ClientService", "DialogService"];
	    function Hrm0300Controller($scope, $state, API, $log, UtilsService, ClientService, DialogService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0300Controller);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.DialogService = DialogService;
	        this.m = {
	            activeFlag: 1,

	            list: null,
	            dateOptions: {
	                // formatYear: 'yy',
	                startingDay: 1
	            },
	            datetimepicker_options: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            },
	            mapOption: {},
	            button: {
	                doing: false,
	                finish: false,
	                scoring: false,
	                remind: false
	            }
	        };

	        for (var i = 1; i < 6; i++) {
	            this.m[i] = {
	                filter: {},
	                data: {}
	            };
	        }
	    }

	    _createClass(Hrm0300Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.init();
	        }
	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var _this = this;

	            var service = this.API.service('load-init', this.API.all('hrm0300'));
	            service.post().then(function (response) {
	                _this.m.init = response.data; //initiate list of users
	            });
	        }
	    }, {
	        key: 'init',
	        value: function init() {
	            this.loadInitData();
	            var previousSearch = sessionStorage.hrm0300;
	            // this.loadInit();
	            if (angular.isUndefined(previousSearch)) {
	                this.doSearch(1, 1);
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;
	            var index = previousSearch.index;
	            this.m.activeFlag = index;

	            delete previousSearch['page'];
	            delete previousSearch['index'];
	            this.m[index].filter = angular.copy(previousSearch);
	            this.doSearch(index, page);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter(index) {
	            if (index < 1 || index > 5) {
	                return;
	            }
	            this.m[index].filter = {};
	            this.doSearch(index, 1);
	        }
	    }, {
	        key: 'chooseTab',
	        value: function chooseTab(index) {
	            if (index < 1 || index > 5) {
	                return;
	            }
	            this.m.activeFlag = index;
	            this.doSearch(index, 1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(index, page) {
	            var _this2 = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('hrm0300'));
	            var param = angular.copy(this.m[index].filter);
	            param.down = 0;
	            param.page = page;
	            param.index = index;

	            sessionStorage.hrm0300 = angular.toJson(param);

	            searchService.post(param).then(function (response) {

	                _this2.m[index].data = response.plain().data.data;
	                // this.$log.info(this.m);
	            });
	        }
	    }, {
	        key: 'updateSts',
	        value: function updateSts(item) {
	            var _this3 = this;

	            if (this.m.button.doing == true) {
	                swal("Processing!");
	                return;
	            }

	            this.m.button.doing = true;

	            var searchService = this.API.service('update', this.API.all('hrm0300'));
	            var param = angular.copy(this.m[1].filter);
	            var ClientService = this.ClientService;
	            param.task_sts = item.task_sts + 1;
	            param.task_id = item.task_id;
	            param.user_id = item.user_id;
	            param.task_creator_mail = item.task_creator_mail;
	            searchService.post(param).then(function (response) {
	                if (response.data.oke) {
	                    ClientService.success('Update task successfully');
	                } else {
	                    ClientService.error('permission deny');
	                }
	                _this3.m.button.doing = false;
	                _this3.init();
	            });
	        }
	    }, {
	        key: 'get_detail',
	        value: function get_detail(item) {
	            var modalOption = void 0;
	            var DialogClose = void 0;
	            var that = this;

	            var param = {
	                task: item
	            };
	            // that.$log.info('sale user', param);
	            modalOption = {
	                size: 'dialog-768',
	                controller: _Hrm.Hrm0300DialogController,
	                resolve: {
	                    param: param
	                }
	            };
	            DialogClose = this.DialogService.open('hrm0300_detail_dialog', modalOption);
	            DialogClose.result.then(function (data) {});
	        }
	    }, {
	        key: 'submit',
	        value: function submit(item) {

	            var modalOption = void 0;
	            var DialogClose = void 0;
	            var that = this;

	            var param = {
	                task: item
	            };
	            // that.$log.info('sale user', param);
	            modalOption = {
	                size: 'dialog-768',
	                controller: _Hrm0300_submit.Hrm0300SubmitDialogController,
	                resolve: {
	                    param: param
	                }
	            };

	            DialogClose = this.DialogService.open('hrm0300_submit_dialog', modalOption);
	            DialogClose.result.then(function (data) {
	                that.init();
	            });
	        }
	    }, {
	        key: 'score',
	        value: function score(item) {

	            var modalOption = void 0;
	            var DialogClose = void 0;
	            var that = this;

	            var param = {
	                task: item
	            };
	            // that.$log.info('sale user', param);
	            modalOption = {
	                size: 'dialog-768',
	                controller: _Hrm0300_score.Hrm0300ScoreDialogController,
	                resolve: {
	                    param: param
	                }
	            };
	            DialogClose = this.DialogService.open('hrm0300_score_dialog', modalOption);
	            DialogClose.result.then(function (data) {
	                that.init();
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download(activeFlag) {
	            var _this4 = this;

	            var param = angular.copy(this.m[activeFlag].filter);
	            var service = this.API.service('download', this.API.all('hrm0300'));
	            param.down = 1;
	            service.post(param).then(function (response) {
	                //this.$log.info(response.data);
	                _this4.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Hrm0300Controller;
	}();

	var Hrm0300Component = exports.Hrm0300Component = {
	    templateUrl: './views/admin.hrm0300.hrm0300',
	    controller: Hrm0300Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 89 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0300DialogController = exports.Hrm0300DialogController = function () {
	    Hrm0300DialogController.$inject = ["$scope", "$uibModalInstance", "DialogService", "$log", "$filter", "API", "param"];
	    function Hrm0300DialogController($scope, $uibModalInstance, DialogService, $log, $filter, API, param) {
	        'ngInject';

	        _classCallCheck(this, Hrm0300DialogController);

	        this.$scope = $scope;
	        this.$log = $log;
	        this.DialogService = DialogService;
	        this.$uibModalInstance = $uibModalInstance;
	        this.API = API;
	        //his.$log.info('dialog param', param);
	        this.m = {
	            task: param.task
	            // this.API = param.API;
	        };this.$log.info('check dialog: ', this.m);
	    }

	    _createClass(Hrm0300DialogController, [{
	        key: 'cancel',
	        value: function cancel() {
	            this.DialogService.close();
	        }
	    }]);

	    return Hrm0300DialogController;
	}();

/***/ }),
/* 90 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0300SubmitDialogController = exports.Hrm0300SubmitDialogController = function () {
	    Hrm0300SubmitDialogController.$inject = ["$scope", "ClientService", "$uibModalInstance", "DialogService", "$log", "$filter", "API", "param"];
	    function Hrm0300SubmitDialogController($scope, ClientService, $uibModalInstance, DialogService, $log, $filter, API, param) {
	        'ngInject';

	        _classCallCheck(this, Hrm0300SubmitDialogController);

	        this.$scope = $scope;
	        this.$log = $log;
	        this.DialogService = DialogService;
	        this.$uibModalInstance = $uibModalInstance;
	        this.API = API;
	        this.ClientService = ClientService;

	        //his.$log.info('dialog param', param);
	        this.m = {
	            task: param.task,
	            form: {}
	        };
	        this.m.isSubmit == false;
	        // this.API = param.API;
	        this.$log.info('check dialog submit: ', this.m);
	    }

	    _createClass(Hrm0300SubmitDialogController, [{
	        key: 'finish',
	        value: function finish() {
	            if (this.m.isSubmit == true) {
	                swal("Processing!");
	                return;
	            }

	            var self = this;
	            swal({
	                title: "Do you want to finish a task?",
	                text: "After confirming your manager will be notified your finished task",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Yes',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                self.confirmFinish();
	            });
	        }
	    }, {
	        key: 'confirmFinish',
	        value: function confirmFinish() {
	            var _this = this;

	            this.m.isSubmit = true;
	            var ClientService = this.ClientService;

	            var searchService = this.API.service('update', this.API.all('hrm0300'));
	            this.m.form.task_sts = this.m.task.task_sts + 1;
	            this.m.form.task_id = this.m.task.task_id;
	            var param = angular.copy(this.m.form);
	            param.user_id = this.m.task.user_id;
	            param.task_creator_mail = this.m.task.task_creator_mail;

	            // this.$log.info('we can send it: ', this.m);
	            searchService.post(param).then(function (response) {
	                if (response.data.oke) {
	                    ClientService.success('Update task successfully');
	                } else {
	                    ClientService.error('permission deny');
	                }
	                _this.m.isSubmit = false;
	                _this.DialogService.close();
	            });
	        }
	    }, {
	        key: 'cancel',
	        value: function cancel() {
	            this.DialogService.close();
	        }
	    }]);

	    return Hrm0300SubmitDialogController;
	}();

/***/ }),
/* 91 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0300ScoreDialogController = exports.Hrm0300ScoreDialogController = function () {
	    Hrm0300ScoreDialogController.$inject = ["$scope", "$uibModalInstance", "ClientService", "DialogService", "$log", "$filter", "API", "param"];
	    function Hrm0300ScoreDialogController($scope, $uibModalInstance, ClientService, DialogService, $log, $filter, API, param) {
	        'ngInject';

	        _classCallCheck(this, Hrm0300ScoreDialogController);

	        this.$scope = $scope;
	        this.$log = $log;
	        this.DialogService = DialogService;
	        this.$uibModalInstance = $uibModalInstance;
	        this.ClientService = ClientService;
	        this.API = API;
	        //his.$log.info('dialog param', param);
	        this.m = {
	            task: param.task,
	            form: {}
	        };
	        this.m.isSubmit == false;
	        // this.API = param.API;
	        // this.$log.info('check dialog submit: ', this.m);
	    }

	    _createClass(Hrm0300ScoreDialogController, [{
	        key: "finish",
	        value: function finish() {
	            if (this.m.isSubmit == true) {
	                swal("Processing!");
	                return;
	            }

	            var self = this;
	            swal({
	                title: "Do you want to finish a task?",
	                text: "After confirming your manager will be notified your finished task",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Yes',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                self.confirmFinish();
	            });
	        }
	    }, {
	        key: "confirmFinish",
	        value: function confirmFinish() {
	            var _this = this;

	            this.m.isSubmit = true;
	            var ClientService = this.ClientService;
	            var searchService = this.API.service('update', this.API.all('hrm0300'));
	            this.m.form.task_sts = this.m.task.task_sts + 1;
	            this.m.form.task_id = this.m.task.task_id;
	            this.m.form.email = this.m.task.email;
	            var param = angular.copy(this.m.form);
	            param.created_by = this.m.task.created_by;
	            param.user_id = this.m.task.user_id;
	            if (param.task_score < 0 || param.task_score > 120) {
	                ClientService.error('Please correct task score which is between 0 and 120');
	                return;
	            }
	            // this.$log.info('we can send it: ', this.m);
	            searchService.post(param).then(function (response) {
	                if (response.data.oke) {
	                    ClientService.success('Update task successfully');
	                } else {
	                    ClientService.error('permission deny');
	                }
	                _this.m.isSubmit = false;
	                _this.DialogService.close();
	            });
	        }
	    }, {
	        key: "cancel",
	        value: function cancel() {
	            this.DialogService.close();
	        }
	    }]);

	    return Hrm0300ScoreDialogController;
	}();

/***/ }),
/* 92 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Adm0500Controller = function () {
	    Adm0500Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService"];
	    function Adm0500Controller($scope, $state, $compile, $log, AclService, API, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Adm0500Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;

	        this.m = {
	            currentTab: "",
	            forms: {
	                PRINT_DELIVERY: {},
	                DELIVERY: {}
	            },
	            tabs: [{ id: "PRINT_DELIVERY", name: "In phiếu xuất", icon: "fa fa-print" }, { id: "DELIVERY", name: "Xuất hàng", icon: "fa fa-truck-loading" }, { id: "ESMS", name: "ESMS", icon: "fa fa-comment" }, { id: "OA", name: "OA", icon: "fas fa-bullhorn" }]
	        };
	    }

	    _createClass(Adm0500Controller, [{
	        key: "$onInit",
	        value: function $onInit() {
	            this.setTab(this.m.tabs[0]);
	        }
	    }, {
	        key: "setTab",
	        value: function setTab(tab) {
	            this.m.currentTab = tab.id;
	            this.load(tab.id);
	        }
	    }, {
	        key: "load",
	        value: function load(formId) {
	            var _this = this;

	            var service = this.API.service('load', this.API.all('adm0500'));
	            var param = {
	                formId: formId
	            };
	            service.post(param).then(function (response) {
	                _this.$log.info(response.data);
	                _this.m.forms[formId] = response.data.data;
	            });
	        }
	    }, {
	        key: "save",
	        value: function save(formId) {
	            var _this2 = this;

	            var formData = angular.copy(this.m.forms[formId]);

	            var service = this.API.service('save', this.API.all('adm0500'));
	            var param = {
	                formId: formId,
	                data: formData
	            };
	            service.post(param).then(function (response) {
	                _this2.$log.info(response);
	                _this2.ClientService.success("Đã lưu dữ liệu.");
	            });
	        }
	    }]);

	    return Adm0500Controller;
	}();

	var Adm0500Component = exports.Adm0500Component = {
	    //templateUrl: './views/app/components/adm0500/adm0500.component.html',
	    templateUrl: '/views/admin.adm0500',
	    controller: Adm0500Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 93 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var MobileController = function () {
	    MobileController.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function MobileController($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, MobileController);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;

	        this.m = {};
	    }

	    _createClass(MobileController, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return MobileController;
	}();

	var MobileComponent = exports.MobileComponent = {
	    //templateUrl: './views/app/components/mobile/mobile.component.html',
	    templateUrl: '/views/admin.mobile',
	    controller: MobileController,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 94 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2550Controller = function () {
	    Crm2550Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Crm2550Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm2550Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;

	        this.m = {
	            filter: {
	                toDate: moment()
	            },
	            list: null,
	            datetimepicker_options: {
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Crm2550Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.crm2550;

	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            this.doSearch(page);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                toDate: moment(),
	                orderBy: null,
	                orderDirection: null
	            };
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            var searchService = this.API.service('search', this.API.all('crm2550'));
	            var param = this._getSearchFilter();
	            param.page = page;

	            sessionStorage.crm2550 = angular.toJson(param);
	            searchService.post(param).then(function (response) {
	                _this.m.list = response.plain().data.data;
	            });
	        }
	    }, {
	        key: '_getSearchFilter',
	        value: function _getSearchFilter() {
	            var param = angular.copy(this.m.filter);

	            if (param.toDate == null) {
	                this.m.filter.toDate = moment();
	                param.toDate = this.m.filter.toDate.format('YYYY-MM-DD');
	            } else if (typeof param.toDate != "string") {
	                param.toDate = param.toDate.format('YYYY-MM-DD');
	            }

	            return param;
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this2 = this;

	            var param = this._getSearchFilter();
	            var service = this.API.service('download', this.API.all('crm2550'));
	            service.post(param).then(function (response) {
	                _this2.$log.info(response.data);
	                _this2.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Crm2550Controller;
	}();

	var Crm2550Component = exports.Crm2550Component = {
	    //templateUrl: './views/app/components/crm2550/crm2550.component.html',
	    templateUrl: '/views/admin.crm2550',
	    controller: Crm2550Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 95 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2540Controller = function () {
	    Crm2540Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Crm2540Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Crm2540Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.RouteService = RouteService;

	        this.m = {
	            init: {},
	            form: {
	                changed_date: moment(new Date())
	            },
	            dateOptions: {
	                format: 'YYYY-MM-DD'
	            }
	        };

	        this.$log.info("$stateParams", $stateParams);
	    }

	    _createClass(Crm2540Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            if (this.$stateParams.product_market_his_id > 0) {
	                this.m.form.product_market_his_id = this.$stateParams.product_market_his_id;
	            } else {
	                this.m.form.product_market_his_id = 0;
	            }

	            this.m.form.warehouse_change_type = this.$stateParams.warehouse_change_type;
	            if (!this.m.form.warehouse_change_type) {
	                this.m.form.warehouse_change_type = 1;
	            }

	            this.loadInit();
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var service = this.API.service("init", this.API.all('crm2540'));

	            var param = angular.copy(this.m.form);

	            service.post(param).then(function (response) {
	                var data = response.plain().data;

	                if (data.form != null) {
	                    data.form.type = data.form.type + "";
	                    _this.m.form = data.form;
	                }
	                _this.m.init.listProduct = data.listProduct;
	            }, function (response) {
	                _this.m.errors = response.data.errors;
	            });
	        }
	    }, {
	        key: 'save',
	        value: function save(isValid) {
	            var _this2 = this;

	            this.$log.info(isValid);
	            this.$log.info("this.form", this.m.form);
	            if (!isValid) {
	                return;
	            }
	            this.m.errors = null;

	            var action = 'create';
	            if (this.m.form.product_market_his_id > 0) {
	                action = 'update';
	            }

	            var service = this.API.service(action, this.API.all('crm2540'));

	            var param = angular.copy(this.m.form);
	            if (param.changed_date) {
	                param.changed_date = param.changed_date.format('YYYY-MM-DD');
	            }

	            service.post(param).then(function (response) {
	                _this2.$log.info('ok response', response.plain().data);
	                var result = response.plain().data;
	                if (result.rtnCd) {
	                    _this2.ClientService.success(result.msg);
	                    _this2.RouteService.goState('app.crm2530');
	                }
	            }, function (response) {
	                _this2.$log.info('ng response', response);
	                _this2.m.errors = response.data.errors;
	            });
	        }
	    }, {
	        key: 'updateStatus',
	        value: function updateStatus(status) {
	            var _this3 = this;

	            var param = {
	                product_market_his_id: this.m.form.product_market_his_id,
	                description_approve: this.m.form.description_approve,
	                status: status
	            };

	            var service = this.API.service("status", this.API.all('crm2540'));
	            service.post(param).then(function (response) {
	                _this3.$log.info('ok response', response.plain().data);
	                var result = response.plain().data;
	                if (result.rtnCd) {
	                    _this3.ClientService.success(result.msg);
	                    _this3.RouteService.goState('app.crm2530');
	                }
	            }, function (response) {
	                _this3.$log.info('ng response', response);
	                _this3.m.errors = response.data.errors;
	            });
	        }
	    }]);

	    return Crm2540Controller;
	}();

	var Crm2540Component = exports.Crm2540Component = {
	    //templateUrl: './views/app/components/crm2540/crm2540.component.html',
	    templateUrl: '/views/admin.crm2540',
	    controller: Crm2540Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 96 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2530Controller = function () {
	    Crm2530Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService"];
	    function Crm2530Controller($scope, $state, $compile, $log, AclService, API, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm2530Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.can = AclService.can;
	        this.ClientService = ClientService;

	        this.m = {
	            filter: {
	                fromDate: moment().subtract(15, 'days'),
	                toDate: moment().add(1, 'days')
	            },
	            list: null,
	            datetimepicker_options: {
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Crm2530Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.crm2530;

	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            this.doSearch(page);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                fromDate: moment().subtract(15, 'days'),
	                toDate: moment().add(1, 'days'),
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var self = this;
	            var searchService = this.API.service('search', this.API.all('crm2530'));
	            var param = this._getSearchFilter();
	            param.page = page;

	            sessionStorage.crm2530 = angular.toJson(param);
	            searchService.post(param).then(function (response) {
	                self.m.list = response.plain().data.data;
	            });
	        }
	    }, {
	        key: '_getSearchFilter',
	        value: function _getSearchFilter() {
	            var param = angular.copy(this.m.filter);

	            if (param.fromDate == null) {
	                this.m.filter.fromDate = moment().subtract(15, 'days');
	                param.fromDate = this.m.filter.fromDate.format('YYYY-MM-DD');
	            } else if (typeof param.fromDate != "string") {
	                param.fromDate = param.fromDate.format('YYYY-MM-DD');
	            }

	            if (param.toDate == null) {
	                this.m.filter.toDate = moment();
	                param.toDate = this.m.filter.toDate.format('YYYY-MM-DD');
	            } else if (typeof param.toDate != "string") {
	                param.toDate = param.toDate.format('YYYY-MM-DD');
	            }

	            return param;
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this = this;

	            var param = this._getSearchFilter();
	            var service = this.API.service('download', this.API.all('crm2530'));
	            service.post(param).then(function (response) {
	                _this.$log.info(response.data);
	                _this.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Crm2530Controller;
	}();

	var Crm2530Component = exports.Crm2530Component = {
	    //templateUrl: './views/app/components/crm2530/crm2530.component.html',
	    templateUrl: '/views/admin.crm2530',
	    controller: Crm2530Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 97 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2510Controller = function () {
	    Crm2510Controller.$inject = ["$scope", "$state", "$compile", "API", "$log", "AclService", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Crm2510Controller($scope, $state, $compile, API, $log, AclService, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Crm2510Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.can = AclService.can;
	        this.ClientService = ClientService;
	        this.RouteService = RouteService;

	        this.m = {
	            form: {},
	            init: {}
	        };

	        if ($stateParams.product_market_id > 0) {
	            this.m.form.product_market_id = $stateParams.product_market_id;
	        } else {
	            this.m.form.product_market_id = 0;
	        }
	    }

	    _createClass(Crm2510Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var self = this;
	            var fileControl = angular.element("#file");
	            fileControl.on('change', function () {
	                var filesSelected = fileControl[0].files;
	                if (filesSelected.length > 0) {
	                    var fileToLoad = filesSelected[0];
	                    var fileReader = new FileReader();
	                    fileReader.onload = function (fileLoadedEvent) {
	                        var srcData = fileLoadedEvent.target.result; // <--- data: base64 
	                        self.$log.info('srcData', srcData);
	                        self.$scope.$apply(function () {
	                            self.m.form.file = srcData;
	                            self.$log.info('self.m.form.file', self.m.form.file);
	                        });
	                    };
	                    fileReader.readAsDataURL(fileToLoad);
	                }
	            });

	            this.loadInitData();
	        }
	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var _this = this;

	            if (this.m.form.product_market_id > 0) {
	                var service = this.API.service('load', this.API.all('crm2510'));
	                var param = {
	                    product_market_id: this.m.form.product_market_id
	                };
	                service.post(param).then(function (response) {
	                    _this.m.form = response.plain().data.product;
	                    _this.m.form.type = _this.m.form.type.toString();
	                }, function (response) {
	                    _this.$log.info('ng response', response);
	                    _this.m.errors = response.data.errors;
	                });
	            }
	        }
	    }, {
	        key: 'save',
	        value: function save(isValid) {
	            var _this2 = this;

	            if (!isValid) {
	                return;
	            }
	            this.m.errors = null;

	            var thisClass = this;
	            var action = 'create';
	            if (this.m.form.product_market_id > 0) {
	                action = 'update';
	            }

	            var service = this.API.service(action, this.API.all('crm2510'));

	            var param = angular.copy(this.m.form);

	            service.post(param).then(function (response) {
	                thisClass.$log.info('ok response', response.plain().data);
	                _this2.m.data = response.plain().data;
	                var result = response.plain().data;
	                if (result.rtnCd) {
	                    thisClass.ClientService.success(result.msg);
	                    thisClass.RouteService.goState('app.crm2500');
	                }
	            }, function (response) {
	                thisClass.$log.info('ng response', response);
	                _this2.m.errors = response.data.errors;
	            });
	        }
	    }]);

	    return Crm2510Controller;
	}();

	var Crm2510Component = exports.Crm2510Component = {
	    //templateUrl: './views/app/components/crm2510/crm2510.component.html',
	    templateUrl: '/views/admin.crm2510',
	    controller: Crm2510Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 98 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2500Controller = function () {
	    Crm2500Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Crm2500Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm2500Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.API = API;
	        this.UtilsService = UtilsService;

	        this.m = {
	            filter: {},
	            list: null
	        };
	    }

	    _createClass(Crm2500Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.crm2500;
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }
	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;
	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);
	            this.doSearch(page);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {};
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm2500'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;
	            sessionStorage.crm2500 = angular.toJson(param);
	            searchService.post(param).then(function (response) {
	                _this.m.data = response.plain().data.data;
	            });
	        }
	    }]);

	    return Crm2500Controller;
	}();

	var Crm2500Component = exports.Crm2500Component = {
	    //templateUrl: './views/app/components/crm2500/crm2500.component.html',
	    templateUrl: '/views/admin.crm2500',
	    controller: Crm2500Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 99 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0301Controller = function () {
	    Crm0301Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "NgMap", "ClientService"];
	    function Crm0301Controller($scope, $state, $compile, $log, AclService, API, UtilsService, NgMap, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm0301Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.NgMap = NgMap;
	        this.map = null;
	        this.ClientService = ClientService;

	        this.m = {
	            showList: true,
	            selected: null,
	            direction: [],
	            // startPoint: null,
	            // endPoint: null,
	            filter: {
	                dateFrom: moment(new Date()).add(-24 * 30, "hours"),
	                dateTo: moment(new Date()).add(2, "hours")
	            },
	            optionsFrom: {
	                format: 'YYYY-MM-DD HH:mm'
	            },
	            optionsTo: {
	                format: 'YYYY-MM-DD HH:mm'
	            },
	            mapOption: {}
	        };
	    }

	    _createClass(Crm0301Controller, [{
	        key: "$onInit",
	        value: function $onInit() {
	            var self = this;
	            this.NgMap.getMap().then(function (map) {
	                self.map = map;

	                self.mapOption = {
	                    icons: [{
	                        icon: { path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW },
	                        offset: '100%'
	                    }],
	                    markerOption: {
	                        icon: {
	                            path: google.maps.SymbolPath.BACKWARD_CLOSED_ARROW,
	                            scale: 10
	                        }
	                    }
	                };

	                self.init();
	            });
	        }
	    }, {
	        key: "init",
	        value: function init() {
	            this.search();
	        }
	    }, {
	        key: "search",
	        value: function search() {
	            this.doSearch();
	        }
	    }, {
	        key: "doSearch",
	        value: function doSearch() {
	            var _this = this;

	            var searchService = this.API.service('search', this.API.all('crm0301'));
	            var param = angular.copy(this.m.filter);
	            var self = this;

	            searchService.post(param).then(function (response) {
	                _this.$log.info("RESPONSE", response);
	                _this.m.data = response.plain().data.data;

	                var listMarker = [];
	                _this.m.data.forEach(function (element) {
	                    var marker = new google.maps.Marker({
	                        position: new google.maps.LatLng(element.gps_lat, element.gps_long),
	                        title: element.name
	                    });
	                    listMarker.push(marker);

	                    google.maps.event.addListener(marker, 'click', function () {

	                        self.m.selected = element;
	                        self.map.showInfoWindow('myInfoWindow', this);
	                    });
	                });

	                var mcOptions = { imagePath: 'https://cdn.rawgit.com/googlemaps/js-marker-clusterer/gh-pages/images/m' };
	                _this.m.markerClusterer = new MarkerClusterer(_this.map, listMarker, mcOptions);
	            });
	        }
	    }, {
	        key: "toogleList",
	        value: function toogleList() {
	            this.m.showList = !this.m.showList;
	        }
	    }, {
	        key: "showInfo",
	        value: function showInfo(evt, item, self) {
	            self.$log.info('showInfo', evt, item);
	            self.m.selected = item;
	            self.map.showInfoWindow('myInfoWindow', this);
	        }
	    }]);

	    return Crm0301Controller;
	}();

	var Crm0301Component = exports.Crm0301Component = {
	    //templateUrl: './views/app/components/crm0301/crm0301.component.html',
	    templateUrl: '/views/admin.crm0301',
	    controller: Crm0301Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 100 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0152Controller = function () {
	    Hrm0152Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "NgMap", "ClientService", "$filter"];
	    function Hrm0152Controller($scope, $state, $compile, $log, AclService, API, UtilsService, NgMap, ClientService, $filter) {
	        'ngInject';

	        _classCallCheck(this, Hrm0152Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.NgMap = NgMap;
	        this.map = null;
	        this.ClientService = ClientService;
	        this.$filter = $filter;

	        this.m = {
	            showList: true,
	            selected: null,
	            direction: [],
	            // startPoint: null,
	            // endPoint: null,
	            filter: {
	                dateFrom: moment(new Date()).add(-24 * 30, "hours"),
	                dateTo: moment(new Date()).add(24, "hours")
	            },
	            optionsFrom: {
	                format: 'YYYY-MM-DD HH:mm'
	            },
	            optionsTo: {
	                format: 'YYYY-MM-DD HH:mm'
	            },
	            mapOption: {}
	        };
	    }

	    _createClass(Hrm0152Controller, [{
	        key: "$onInit",
	        value: function $onInit() {
	            var self = this;
	            this.NgMap.getMap().then(function (map) {
	                self.map = map;

	                self.mapOption = {
	                    icons: [{
	                        icon: { path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW },
	                        offset: '100%'
	                    }],
	                    markerOption: {
	                        icon: {
	                            path: google.maps.SymbolPath.BACKWARD_CLOSED_ARROW,
	                            scale: 10
	                        }
	                    }
	                };

	                self.init();
	            });
	        }
	    }, {
	        key: "init",
	        value: function init() {
	            var _this = this;

	            var beService = this.API.service('init', this.API.all('hrm0152'));
	            beService.post().then(function (res) {
	                _this.$log.info('res', res);
	                _this.m.init = res.plain().data;
	            });
	        }
	    }, {
	        key: "search",
	        value: function search() {
	            this.doSearch(1);
	        }
	    }, {
	        key: "distance",
	        value: function distance(lat1, lon1, lat2, lon2, unit) {
	            if (lat1 == lat2 && lon1 == lon2) {
	                return 0;
	            } else {
	                var radlat1 = Math.PI * lat1 / 180;
	                var radlat2 = Math.PI * lat2 / 180;
	                var theta = lon1 - lon2;
	                var radtheta = Math.PI * theta / 180;
	                var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);
	                if (dist > 1) {
	                    dist = 1;
	                }
	                dist = Math.acos(dist);
	                dist = dist * 180 / Math.PI;
	                dist = dist * 60 * 1.1515;
	                if (unit == "K") {
	                    dist = dist * 1.609344;
	                }
	                if (unit == "N") {
	                    dist = dist * 0.8684;
	                }
	                return dist;
	            }
	        }
	    }, {
	        key: "doSearch",
	        value: function doSearch(page) {
	            var _this2 = this;

	            var searchService = this.API.service('search', this.API.all('hrm0152'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;

	            // if( param.user_id == null || param.user_id == "") {
	            //     this.ClientService.error("Vui lòng chọn nhân viên");
	            //     return;
	            // }

	            if (param.dateFrom == null && angular.isUndefined(param.dateFrom)) {
	                param.dateFrom = moment(new Date());
	            }

	            if (param.dateTo == null && angular.isUndefined(param.dateTo)) {
	                param.dateTo = moment(new Date());
	            }

	            param.dateFrom = param.dateFrom.format('YYYY-MM-DD HH:mm:00');
	            param.dateTo = param.dateTo.format('YYYY-MM-DD HH:mm:59');

	            this.$log.info('param', param);

	            searchService.post(param).then(function (response) {
	                _this2.$log.info("RESPONSE", response);

	                var checkins = response.plain().data.checkins;
	                var images = response.plain().data.images;

	                var direction = [];
	                checkins.data.forEach(function (element) {
	                    direction.push({
	                        lat: element.gps_lat,
	                        lng: element.gps_long
	                    });
	                    element.images = _this2.$filter("filter")(images, { check_in_id: element.id });
	                    element.dist = _this2.distance(element.gps_lat, element.gps_long, element.store_gps_lat, element.store_gps_long, "K");
	                });

	                _this2.m.data = checkins;
	                _this2.m.images = images;

	                _this2.m.direction = direction;

	                _this2.$log.info(_this2.m);
	            });
	        }
	    }, {
	        key: "toogleList",
	        value: function toogleList() {
	            this.m.showList = !this.m.showList;
	        }
	    }, {
	        key: "update",
	        value: function update(dateFrom, dateTo) {
	            this.m.optionsFrom.maxDate = dateTo;
	            this.m.optionsTo.minDate = dateFrom;
	        }
	    }, {
	        key: "showInfo",
	        value: function showInfo(evt, item, self) {
	            self.$log.info('showInfo', evt, item);
	            self.m.selected = item;
	            self.map.showInfoWindow('myInfoWindow', this);
	        }
	    }, {
	        key: "showStoreInfo",
	        value: function showStoreInfo(evt, item, self) {
	            self.$log.info('showStoreInfo', evt, item);
	            self.m.selected = item;
	            self.map.showInfoWindow('myInfoWindowStore', this);
	        }
	    }, {
	        key: "focusItem",
	        value: function focusItem(item, index) {
	            var latlng = new google.maps.LatLng(item.gps_lat, item.gps_long);
	            this.map.setCenter(latlng);

	            this.m.selected = item;
	            this.map.showInfoWindow('myInfoWindow', 'market_' + index);
	            this.map.showInfoWindow('myInfoWindowStore', 'store_market');
	        }
	    }]);

	    return Hrm0152Controller;
	}();

	var Hrm0152Component = exports.Hrm0152Component = {
	    //templateUrl: './views/app/components/hrm0152/hrm0152.component.html',
	    templateUrl: '/views/admin.hrm0152',
	    controller: Hrm0152Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 101 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0151Controller = function () {
	    Hrm0151Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "NgMap", "ClientService"];
	    function Hrm0151Controller($scope, $state, $compile, $log, AclService, API, UtilsService, NgMap, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0151Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.NgMap = NgMap;
	        this.map = null;
	        this.ClientService = ClientService;

	        this.m = {
	            showList: true,
	            selected: null,
	            direction: [],
	            // startPoint: null,
	            // endPoint: null,
	            filter: {
	                dateFrom: moment(new Date()).add(-24 * 30, "hours"),
	                dateTo: moment(new Date()).add(2, "hours")
	            },
	            optionsFrom: {
	                format: 'YYYY-MM-DD HH:mm'
	            },
	            optionsTo: {
	                format: 'YYYY-MM-DD HH:mm'
	            },
	            mapOption: {}
	        };
	    }

	    _createClass(Hrm0151Controller, [{
	        key: "$onInit",
	        value: function $onInit() {
	            var self = this;
	            this.NgMap.getMap().then(function (map) {
	                self.map = map;

	                self.mapOption = {
	                    icons: [{
	                        icon: { path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW },
	                        offset: '100%'
	                    }],
	                    markerOption: {
	                        icon: {
	                            path: google.maps.SymbolPath.BACKWARD_CLOSED_ARROW,
	                            scale: 10
	                        }
	                    }
	                };

	                self.init();
	            });
	        }
	    }, {
	        key: "init",
	        value: function init() {
	            var _this = this;

	            var beService = this.API.service('init', this.API.all('hrm0151'));
	            beService.post().then(function (res) {
	                _this.$log.info('res', res);
	                _this.m.init = res.plain().data;
	            });
	        }
	    }, {
	        key: "search",
	        value: function search() {
	            this.doSearch(1);
	        }
	    }, {
	        key: "doSearch",
	        value: function doSearch(page) {
	            var _this2 = this;

	            var searchService = this.API.service('search', this.API.all('hrm0151'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;

	            if (param.user_id == null || param.user_id == "") {
	                this.ClientService.error("Vui lòng chọn nhân viên");
	                return;
	            }

	            if (param.dateFrom == null && angular.isUndefined(param.dateFrom)) {
	                param.dateFrom = moment(new Date());
	            }

	            if (param.dateTo == null && angular.isUndefined(param.dateTo)) {
	                param.dateTo = moment(new Date());
	            }

	            param.dateFrom = param.dateFrom.format('YYYY-MM-DD HH:mm:00');
	            param.dateTo = param.dateTo.format('YYYY-MM-DD HH:mm:59');

	            searchService.post(param).then(function (response) {
	                _this2.$log.info("RESPONSE", response);

	                _this2.m.data = response.plain().data.data;
	                var direction = [];
	                _this2.m.data.data.forEach(function (element) {
	                    direction.push({
	                        lat: element.gps_lat,
	                        lng: element.gps_long
	                    });
	                });

	                _this2.m.direction = direction;

	                _this2.$log.info(_this2.m);
	            });
	        }
	    }, {
	        key: "toogleList",
	        value: function toogleList() {
	            this.m.showList = !this.m.showList;
	        }
	    }, {
	        key: "update",
	        value: function update(dateFrom, dateTo) {
	            this.m.optionsFrom.maxDate = dateTo;
	            this.m.optionsTo.minDate = dateFrom;
	        }
	    }, {
	        key: "showInfo",
	        value: function showInfo(evt, item, self) {
	            self.$log.info('showInfo', evt, item);
	            self.m.selected = item;
	            self.map.showInfoWindow('myInfoWindow', this);
	        }
	    }, {
	        key: "focusItem",
	        value: function focusItem(item, index) {
	            var latlng = new google.maps.LatLng(item.gps_lat, item.gps_long);
	            this.map.setCenter(latlng);

	            this.m.selected = item;
	            this.map.showInfoWindow('myInfoWindow', 'market_' + index);
	        }
	    }]);

	    return Hrm0151Controller;
	}();

	var Hrm0151Component = exports.Hrm0151Component = {
	    //templateUrl: './views/app/components/hrm0151/hrm0151.component.html',
	    templateUrl: '/views/admin.hrm0151',
	    controller: Hrm0151Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 102 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0150Controller = function () {
	    Hrm0150Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "NgMap"];
	    function Hrm0150Controller($scope, $state, $compile, $log, AclService, API, UtilsService, NgMap) {
	        'ngInject';

	        _classCallCheck(this, Hrm0150Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.NgMap = NgMap;
	        this.map = null;

	        this.m = {
	            showList: true,
	            selected: null
	        };
	    }

	    _createClass(Hrm0150Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var self = this;
	            this.NgMap.getMap().then(function (map) {
	                self.map = map;

	                self.search();
	            });
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            var _this = this;

	            var searchService = this.API.service('search', this.API.all('hrm0150'));

	            searchService.post({}).then(function (response) {
	                _this.$log.info("RESPONSE", response);
	                _this.m.data = response.plain().data;
	                _this.$log.info(_this.m);
	            });
	        }
	    }, {
	        key: 'focusItem',
	        value: function focusItem(item, index) {
	            var latlng = new google.maps.LatLng(item.gps_lat, item.gps_long);
	            this.map.setCenter(latlng);

	            this.m.selected = item;
	            this.$scope.map.showInfoWindow('myInfoWindow', 'market_' + index);
	        }
	    }, {
	        key: 'showInfo',
	        value: function showInfo(evt, item, self) {
	            self.$log.info('showInfo', evt, item);
	            self.m.selected = item;
	            self.$scope.map.showInfoWindow('myInfoWindow', this);
	        }
	    }, {
	        key: 'toogleList',
	        value: function toogleList() {
	            this.m.showList = !this.m.showList;
	        }
	    }]);

	    return Hrm0150Controller;
	}();

	var Hrm0150Component = exports.Hrm0150Component = {
	    //templateUrl: './views/app/components/hrm0150/hrm0150.component.html',
	    templateUrl: '/views/admin.hrm0150',
	    controller: Hrm0150Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 103 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0141Controller = function () {
	    Hrm0141Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService"];
	    function Hrm0141Controller($scope, $state, $compile, $log, AclService, API, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0141Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;

	        this.m = {
	            // mode: "ONE",
	            init: {},
	            filter: {
	                month: moment(new Date().toISOString())
	            },
	            data: {},
	            datetimepicker_options: {
	                viewMode: 'months',
	                format: 'YYYY-MM'
	            }
	        };
	    }

	    _createClass(Hrm0141Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.init();
	        }
	    }, {
	        key: 'init',
	        value: function init() {
	            var _this = this;

	            var beService = this.API.service('init', this.API.all('hrm0141'));
	            beService.post().then(function (res) {
	                _this.m.init = res.plain().data;

	                var previousSearch = sessionStorage.hrm0141;
	                if (previousSearch != null && previousSearch != undefined) {
	                    previousSearch = angular.fromJson(previousSearch);
	                    if (previousSearch.month != null && previousSearch.month != undefined && previousSearch.month.length > 0) {
	                        _this.m.filter.month = moment(previousSearch.month + "-01");
	                    }
	                    _this.m.filter.user_id = previousSearch.user_id || null;
	                }
	                _this.search();
	            });
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            var _this2 = this;

	            var param = angular.copy(this.m.filter);

	            if (param.month == null || param.month == "") {
	                this.ClientService.error("Vui lòng nhập thời gian");
	                return;
	            }

	            if (param.month != null && param.month != "") {
	                param.month = param.month.format('YYYY-MM');
	            }

	            var searchService = void 0;
	            sessionStorage.hrm0141 = angular.toJson(param);
	            if (param.user_id == null || param.user_id == "") {
	                searchService = this.API.service('search-all', this.API.all('hrm0141'));

	                searchService.post(param).then(function (response) {
	                    _this2.m.mode = "MULTI";
	                    var data = response.data.data;
	                    _this2.m.data = data;
	                });
	            } else {
	                searchService = this.API.service('search', this.API.all('hrm0141'));
	                searchService.post(param).then(function (response) {
	                    _this2.m.mode = "ONE";
	                    _this2.m.list = _this2.editDisplayList(response.plain().data);
	                    _this2.m.summary = _this2.summarize(_this2.m.list);
	                });
	            }
	        }
	    }, {
	        key: 'clickExecute',
	        value: function clickExecute() {
	            var _this3 = this;

	            var service = this.API.service('execute', this.API.all('hrm0141'));
	            var param = angular.copy(this.m.filter);
	            if (param.month == null || param.month == "") {
	                this.ClientService.error("Vui lòng nhập thời gian");
	                return;
	            }
	            if (param.month != null && param.month != "") {
	                param.month = param.month.format('YYYY-MM');
	            }

	            this.ClientService.success("Đang thực thi, hãy tải lại dữ liệu sau vài phút nữa.");
	            service.post(param).then(function (response) {
	                _this3.$log.info(response);
	                _this3.ClientService.success("Đang thực thi xong.");
	            });
	        }
	    }, {
	        key: 'editDisplayList',
	        value: function editDisplayList(list) {
	            var n = new Date(list.data[0].date).getDay();
	            list.data.forEach(function (element) {
	                element.day = n;
	                n = ++n % 7;
	            });
	            return list;
	        }
	    }, {
	        key: 'summarize',
	        value: function summarize(calendar) {
	            var summary = {
	                totalDays: 0,
	                totalWorkingDays: 0,
	                totalWorkingHours: 0,
	                totalWorkingHoursString: "00:00",
	                todayAbsent: 0,
	                todayAbsentNo: 0,
	                todayHoliday: 0,
	                totalStandardHours: 0
	            };

	            calendar.data.forEach(function (element) {
	                if (element.workday > 0) {
	                    if (element.is_holiday == 1) {
	                        summary.todayHoliday += 1;
	                    } else {
	                        summary.totalDays += element.workday;
	                        if (element.working_hours > 0) {
	                            summary.totalWorkingHours += element.working_hours;
	                        }

	                        if (element.workday > 0 && element.first_time != null || element.first_time !== undefined) {
	                            summary.totalWorkingDays += element.workday;
	                        }

	                        if ((element.first_time == null || element.first_time === undefined || element.first_time == "") && element.absent_type != 1 && element.absent_type != 2 && element.absent_type != 3) {
	                            summary.todayAbsentNo += 1;
	                        }

	                        if (element.absent_type == 3) {
	                            summary.todayAbsent += 1;
	                        } else if (element.absent_type == 2 || element.absent_type == 1) {
	                            summary.todayAbsent += 0.5;
	                        }
	                    }
	                }
	            });

	            if (summary.totalWorkingHours > 0) {
	                var hour = Math.floor(summary.totalWorkingHours / 60, 0);
	                var min = summary.totalWorkingHours - hour * 60;
	                summary.totalWorkingHoursString = hour + " hours " + ("00" + min).slice(-2) + " min";
	            }

	            summary.totalStandardHours = summary.totalDays * 8;

	            return summary;
	        }
	    }, {
	        key: 'selectEmployee',
	        value: function selectEmployee(employee) {
	            this.m.filter.user_id = employee.id;
	            this.search();
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this4 = this;

	            var param = angular.copy(this.m.filter);

	            if (param.month == null || param.month == "") {
	                this.ClientService.error("Vui lòng nhập thời gian");
	                return;
	            }

	            if (param.month != null && param.month != "") {
	                param.month = param.month.format('YYYY-MM');
	            }

	            this.API.service('download', this.API.all('hrm0141')).post(param).then(function (response) {
	                _this4.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Hrm0141Controller;
	}();

	var Hrm0141Component = exports.Hrm0141Component = {
	    //templateUrl: './views/app/components/hrm0141/hrm0141.component.html',
	    templateUrl: '/views/admin.hrm0141',
	    controller: Hrm0141Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 104 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2400Controller = function () {
	    Crm2400Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Crm2400Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm2400Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;

	        this.m = {
	            filter: {},
	            list: null
	        };
	    }

	    _createClass(Crm2400Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.crm2400;
	            this.loadInit();
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            this.doSearch(page);
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var service = this.API.service('load-init', this.API.all('crm2400'));
	            service.post().then(function (response) {

	                var listArea1 = response.data.listArea1;
	                var listArea2 = response.data.listArea2;
	                var salesmanList = response.data.salesmanList;

	                if (salesmanList != null) {
	                    _this.m.listSalesman = salesmanList;
	                }

	                if (listArea1 != null) {
	                    _this.m.listArea1 = listArea1;
	                }
	                if (listArea2 != null) {
	                    _this.m.listArea2 = listArea2;
	                }
	            });
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this2 = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm2400'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;
	            sessionStorage.crm2400 = angular.toJson(param);
	            //param.pageSize = $scope.m.paginationInfo.pageSize;
	            searchService.post(param).then(function (response) {
	                var data = response.plain().data;
	                _this2.m.data = data;
	                _this2.$log.info("check data search: ", response.plain().data);
	                _this2.$log.info("models: ", param);
	            });
	        }
	    }]);

	    return Crm2400Controller;
	}();

	var Crm2400Component = exports.Crm2400Component = {
	    //templateUrl: './views/app/components/crm2400/crm2400.component.html',
	    templateUrl: '/views/admin.crm2400',
	    controller: Crm2400Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 105 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Rpt0517Controller = function () {
	    Rpt0517Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Rpt0517Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Rpt0517Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;

	        this.m = {
	            filter: {}
	        };
	    }

	    _createClass(Rpt0517Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.rpt0517;
	            this.loadInit();
	            if (angular.isUndefined(previousSearch)) {
	                this.doSearch(1);
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            this.doSearch(page);
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var service = this.API.service('load-init', this.API.all('rpt0517'));
	            service.post().then(function (response) {
	                var userList = response.data.userList;

	                if (userList != null) {
	                    _this.m.usersList = userList;
	                }
	            });
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {};
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this2 = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('rpt0517'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;
	            sessionStorage.rpt0517 = angular.toJson(param);
	            searchService.post(param).then(function (response) {
	                //this.$log.info(response);
	                _this2.m.data = response.plain().data;
	            });
	        }
	    }]);

	    return Rpt0517Controller;
	}();

	var Rpt0517Component = exports.Rpt0517Component = {
	    //templateUrl: './views/app/components/rpt0517/rpt0517.component.html',
	    templateUrl: '/views/admin.rpt0517',
	    controller: Rpt0517Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 106 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0351Controller = function () {
	    Crm0351Controller.$inject = ["$scope", "$state", "$compile", "$filter", "$log", "AclService", "API", "UtilsService", "RouteService", "ClientService", "$stateParams"];
	    function Crm0351Controller($scope, $state, $compile, $filter, $log, AclService, API, UtilsService, RouteService, ClientService, $stateParams) {
	        'ngInject';

	        _classCallCheck(this, Crm0351Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.RouteService = RouteService;
	        this.ClientService = ClientService;
	        this.$filter = $filter;

	        this.m = {
	            form: {},
	            init: {}

	            // $log.info('$stateParams.store_id', $stateParams.store_id);
	        };if ($stateParams.chanh_id > 0) {
	            this.m.form.chanh_id = $stateParams.chanh_id;
	        } else {
	            this.m.form.chanh_id = 0;
	        }

	        if ($stateParams.alerts) {
	            this.alerts.push($stateParams.alerts);
	        }

	        this.loadInitData();
	    }

	    _createClass(Crm0351Controller, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {

	            var $log = this.$log;
	            var alerts = this.alerts;
	            var RouteService = this.RouteService;
	            var ClientService = this.ClientService;
	            var m = this.m;

	            if (this.m.form.chanh_id > 0) {
	                var service = this.API.service('load', this.API.all('crm0351'));
	                var $state = this.$state;
	                var param = { chanh_id: this.m.form.chanh_id };
	                service.post(param).then(function (response) {

	                    m.init.area1List = response.data.area1List;
	                    m.init.area2List = response.data.area2List;

	                    m.form = response.data.item;
	                    // m.form.gps_lat = 
	                }, function (response) {
	                    //ClientService.error('Đã có lỗi xãy ra');
	                    // let alert = { type: 'error', 'title': 'Error!', msg: response.data.message }
	                    // RouteService.goState('app.supplierlist', { alerts: alert })
	                });
	            } else {
	                var _service = this.API.service('init-data', this.API.all('crm0351'));
	                _service.post().then(function (res) {
	                    m.init = res.data;
	                });
	            }
	        }
	    }, {
	        key: 'save',
	        value: function save(isValid) {
	            this.$log.info(isValid);
	            this.$log.info("this.form", this.m.form);

	            var $log = this.$log;
	            var RouteService = this.RouteService;
	            var ClientService = this.ClientService;
	            var m = this.m;

	            if (this.m.form.area1 == null) {
	                ClientService.warning('Vui lòng nhập Tỉnh');
	                return;
	            }

	            var area2List = this.$filter("filter")(this.m.init.area2List, { 'parent_area_id': this.m.form.area1 });
	            if (area2List != null && area2List > 0 && this.m.form.area2 == null) {
	                ClientService.warning('Vui lòng nhập Quận');
	                return;
	            }

	            if (isValid) {
	                $log.info('send');
	                var crm0310Service = this.API.service('crm0351');

	                crm0310Service.post(this.m.form).then(function () {
	                    if (m.form.chanh_id > 0) {
	                        ClientService.success('Cập nhật cửa hàng thành công');
	                    } else {
	                        ClientService.success('Thêm mới cửa hàng thành công');
	                    }

	                    RouteService.goState('app.crm0350');
	                }, function () {});
	            } else {
	                this.formSubmitted = true;
	            }
	        }
	    }]);

	    return Crm0351Controller;
	}();

	var Crm0351Component = exports.Crm0351Component = {
	    //templateUrl: './views/app/components/crm0351/crm0351.component.html',
	    templateUrl: '/views/admin.crm0351',
	    controller: Crm0351Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 107 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0350Controller = function () {
	    Crm0350Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Crm0350Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm0350Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.can = AclService.can;

	        this.m = {
	            init: {},
	            filter: {},
	            list: null,
	            datetimepicker_options: {
	                viewMode: 'months',
	                format: 'YYYY-MM'
	            }
	        };
	        this.init();
	    }

	    _createClass(Crm0350Controller, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }, {
	        key: 'init',
	        value: function init() {
	            var _this = this;

	            var previousSearch = sessionStorage.crm0350;
	            var searchService = this.API.service('init', this.API.all('crm0350'));

	            searchService.post({}).then(function (response) {
	                _this.m.init = response.plain().data;
	                //this.$log.info('check crm0300 init ', this.m.init);
	                _this.doSearch(page);
	            });
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            // Get list product 
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.search(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this2 = this;

	            var $log = this.$log;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm0350'));
	            var param = angular.copy(this.m.filter);

	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;

	            if (angular.isUndefined(param.month) || param.month == null || param.month == '') {
	                param.month = null;
	            } else {
	                param.month = param.month.format('YYYY-MM');
	            }

	            sessionStorage.crm0350 = angular.toJson(param);

	            searchService.post(param).then(function (response) {
	                _this2.m.data = response.plain().data;
	                //$log.debug('this.m.data', this.m.data);
	            });
	        }
	    }]);

	    return Crm0350Controller;
	}();

	var Crm0350Component = exports.Crm0350Component = {
	    //templateUrl: './views/app/components/crm0350/crm0350.component.html',
	    templateUrl: '/views/admin.crm0350',
	    controller: Crm0350Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 108 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2330Controller = function () {
	    Crm2330Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Crm2330Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm2330Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;

	        this.m = {
	            filter: {},
	            datetimepicker_options: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Crm2330Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.crm2330;
	            //this.loadInit();
	            if (angular.isUndefined(previousSearch)) {
	                this.doSearch(1);
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            this.doSearch(page);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {};
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm2330'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;
	            sessionStorage.crm2330 = angular.toJson(param);
	            searchService.post(param).then(function (response) {
	                //this.$log.info(response);
	                _this.m.data = response.plain().data;
	            });
	        }
	    }]);

	    return Crm2330Controller;
	}();

	var Crm2330Component = exports.Crm2330Component = {
	    //templateUrl: './views/app/components/crm2330/crm2330.component.html',
	    templateUrl: '/views/admin.crm2330',
	    controller: Crm2330Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 109 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2320Controller = function () {
	    Crm2320Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Crm2320Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm2320Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;

	        this.m = {};
	    }

	    _createClass(Crm2320Controller, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Crm2320Controller;
	}();

	var Crm2320Component = exports.Crm2320Component = {
	    //templateUrl: './views/app/components/crm2320/crm2320.component.html',
	    templateUrl: '/views/admin.crm2320',
	    controller: Crm2320Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 110 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2310Controller = function () {
	    Crm2310Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Crm2310Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Crm2310Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.RouteService = RouteService;

	        this.m = {
	            warehouseDetail: [],
	            warehouse: {},

	            form: {
	                publishDate: moment(),
	                file: null
	            },
	            formUpload: {
	                file: null,
	                images: []
	            }
	            // There are two types: warehouse_import_id and warehouse_export_id       

	            // Check import or export has been created. determine type of instance based on type 
	        };this.m.warehouse_exim_id = $stateParams.warehouse_exim_id;
	        this.m.isUploaded = false;
	        this.m.form.id = this.m.warehouse_exim_id;

	        this.hide = false;
	        this.m.canEdit = true;
	    }

	    _createClass(Crm2310Controller, [{
	        key: "$onInit",
	        value: function $onInit() {
	            this._setupFileUpload("fileUpload", this.m.formUpload);
	            this.loadImageList();
	            this.loadInitData();
	        }
	    }, {
	        key: "_setupFileUpload",
	        value: function _setupFileUpload(fileControlId, formModel) {
	            var self = this;
	            var fileControl = angular.element("#" + fileControlId);
	            fileControl.on('change', function () {
	                var filesSelected = fileControl[0].files;
	                if (filesSelected.length > 0) {
	                    var fileToLoad = filesSelected[0];
	                    var fileReader = new FileReader();

	                    fileReader.onload = function (fileLoadedEvent) {
	                        var srcData = fileLoadedEvent.target.result; // <--- data: base64 
	                        self.$scope.$apply(function () {
	                            formModel.file = srcData;
	                        });
	                    };
	                    fileReader.readAsDataURL(fileToLoad);
	                }
	            });
	        }
	    }, {
	        key: "updateState",
	        value: function updateState() {
	            if (this.m.warehouse.exim_sts && this.m.warehouse.exim_sts != 0) {
	                this.m.canEdit = false;
	            }
	        }
	    }, {
	        key: "loadInitData",
	        value: function loadInitData() {
	            var _this = this;

	            var param = {};
	            // Load init there are two cases:
	            // Case 1: New export. 
	            // Case 2: open old export.
	            // Case 3: New import.
	            // Case 4: open old import.

	            //Initialize param for load init 
	            param.warehouse_exim_id = this.m.warehouse_exim_id; // if type =1, warehouse_export_id else warehouse_import_id
	            this.m.warehouse.notes = "";
	            var service = this.API.service('load-init', this.API.all('crm2310'));
	            service.post(param).then(function (response) {

	                if (response.data.warehouse != null) {
	                    _this.m.warehouse = response.data.warehouse[0];
	                }
	                _this.m.warehouseDetail = response.data.warehouseDetail;
	                // Get list of product
	                var productList = response.data.productList;
	                // this.m.productList = productList;
	                // Get list of warehouse
	                _this.m.warehouseList = response.data.warehouseList;
	                _this.m.eximStatusList = response.data.eximStatusList;
	                _this.m.requestList = response.data.requestList;

	                _this.calcWarehouseTotal();
	                _this.$log.info('this.m', response.data);
	                _this.updateState();

	                // if (this.m.store_order_id > 0 && parseInt(this.m.order.order_sts) > 0) {
	                //     this.m.canEdit = false;
	                // } else {
	                //     this.m.canEdit = true;
	                // }
	            });
	        }
	    }, {
	        key: "addProduct",
	        value: function addProduct(product) {
	            if (this.m.warehouseDetail == null) {
	                this.m.warehouseDetail = [];
	            }

	            var newProduct = {
	                product_id: product.product_id,
	                product_code: product.product_code,
	                name: product.product_cat_name,
	                product_name: product.name,
	                standard_packing: product.standard_packing,
	                product_cat_id: product.product_cat_id,
	                unit_price: product.selling_price,
	                amount: 0,
	                store_order_id: 0,
	                version_no: 0,
	                volume: product.volume
	            };

	            this.m.warehouseDetail.push(newProduct);
	            product.hide = true;
	            this.calcWarehouseTotal();
	        }
	    }, {
	        key: "removeProduct",
	        value: function removeProduct(product) {
	            if (this.m.warehouse.exim_sts != 0) {
	                return;
	            }
	            var index = this.m.warehouseDetail.indexOf(product);
	            if (index >= 0) {
	                this.m.warehouseDetail.splice(index, 1);
	                this.calcOrderTotal();

	                for (var i = 0; i < this.m.productList.length; i++) {
	                    if (this.m.productList[i].product_id == product.product_id) {
	                        this.m.productList[i].hide = false;
	                    }
	                }
	            }
	            this.calcWarehouseTotal();
	        }
	    }, {
	        key: "searchProduct",
	        value: function searchProduct() {
	            var $log = this.$log;

	            //$log.info(this.m);

	            // Get list product 
	            var searchService = this.API.service('search-product', this.API.all('crm0210'));
	            var param = angular.copy(this.m.filter);

	            var self = this;
	            self.$log.info('this.m', self.m);

	            searchService.post(param).then(function (response) {
	                var list = response.plain().data.list;
	                if (self.m.warehouseDetail != null && self.m.warehouseDetail.length > 0) {
	                    angular.forEach(list, function (value) {
	                        var hide = false;
	                        for (var i = 0; i < self.m.warehouseDetail.length; i++) {
	                            if (self.m.warehouseDetail[i].product_id == value.product_id) {
	                                hide = true;
	                                break;
	                            }
	                        }
	                        value.hide = hide;
	                    });
	                }

	                self.m.productList = list;
	                self.$log.info('this.m.list', self.m.productList);
	            });
	        }
	    }, {
	        key: "calcWarehouseTotal",
	        value: function calcWarehouseTotal() {
	            if (this.m.warehouse == null) return;
	            var total = 0;
	            var volume = 0;
	            var carton = 0;
	            angular.forEach(this.m.warehouseDetail, function (value) {
	                total += parseFloat(value.unit_price) * parseFloat(value.amount);
	                volume += parseFloat(value.volume) * parseFloat(value.amount) / parseFloat(value.standard_packing);
	                carton += parseFloat(value.amount) / parseFloat(value.standard_packing);
	            });

	            this.m.warehouse.total = total;
	            this.m.warehouse.volume = volume;
	            this.m.warehouse.carton = carton;
	        }
	    }, {
	        key: "checkValidWarehouse",
	        value: function checkValidWarehouse() {
	            var oke = true;
	            var msg = "";
	            if (this.m.warehouse.from_warehouse_id == null || this.m.warehouse.from_warehouse_id == "") {
	                msg = "Vui lòng chọn kho để xuất.";
	                this.ClientService.error(msg);
	                return false;
	            }

	            if (this.m.warehouse.to_warehouse_id == null || this.m.warehouse.to_warehouse_id == "") {
	                msg = "Vui lòng chọn kho để nhập.";
	                this.ClientService.error(msg);
	                return false;
	            }

	            if (this.m.warehouse.from_warehouse_id == this.m.warehouse.to_warehouse_id) {
	                msg = "Kho nhập và xuất phải khác nhau";
	                this.ClientService.error(msg);
	                return false;
	            }

	            return oke;
	        }
	    }, {
	        key: "createWarehouseDetail",
	        value: function createWarehouseDetail() {
	            var warehouseDetail = [];
	            angular.forEach(this.m.warehouseDetail, function (value, key) {
	                warehouseDetail.push({
	                    product_id: value.product_id,
	                    unit_price: value.unit_price,
	                    amount: value.amount
	                });
	            });
	            return warehouseDetail;
	        }
	    }, {
	        key: "clickSave",
	        value: function clickSave() {
	            var _this2 = this;

	            var self = this;

	            if (!this.checkValidWarehouse()) {
	                return;
	            }

	            if (self.m.isSaved == true) {
	                swal("Đang xử lý!");
	                return;
	            }

	            self.m.isSaved = true;
	            var warehouseDetail = this.createWarehouseDetail();

	            //warehouse_x_id can be warehouse_export_id if type = 1 or warehouse_import_id if type = 2.
	            var warehouse_exim_id = 0;

	            if (this.m.warehouse_exim_id && this.m.warehouse_exim_id > 0) {
	                warehouse_exim_id = this.m.warehouse_exim_id;
	            }

	            var param = {
	                mode: 'SAVE',
	                type: this.m.type,
	                warehouse: {
	                    warehouse_exim_id: warehouse_exim_id,
	                    from_warehouse_id: this.m.warehouse.from_warehouse_id,
	                    to_warehouse_id: this.m.warehouse.to_warehouse_id,
	                    notes: this.m.warehouse.notes,
	                    volume: this.m.warehouse.volume,
	                    carton: this.m.warehouse.carton
	                },
	                warehouseDetail: warehouseDetail
	            };
	            self.$log.info('check save param: ', param);

	            var service = this.API.service('save', this.API.all('crm2310'));
	            service.post(param).then(function (response) {

	                // this.m.store_order_id = response.data.storeOrderId;
	                _this2.m.msg_error = response.data.msg;
	                _this2.m.warehouse_exim_id = response.data.warehouse_exim_id;

	                if (response.data.error != -1) {
	                    _this2.ClientService.success("Lưu thành công");
	                    _this2.loadInitData();
	                } else {
	                    _this2.ClientService.warning("Something is wrong! Cannot save");
	                }

	                self.m.isSaved = false;
	            });
	        }
	    }, {
	        key: "createExport",
	        value: function createExport() {
	            var $log = this.$log;
	            var self = this;

	            swal({
	                title: "Bạn có xuất kho?",
	                text: "Sau khi bấm nút xuất, lượng hàng này sẽ được trừ trực tiếp vào kho bán hàng của kho xuất. Kể từ lúc đồng ý xuất kho bạn sẽ không được quyền thay đổi bất kỳ thông tin nào.",
	                type: "warning",
	                showCancelButton: true,
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                //$log.info(this.m);
	                var warehouseDetail = self.createWarehouseDetail();
	                if (self.m.isExport == true) {
	                    swal("Đang xử lý!");
	                    return;
	                }

	                self.m.isExport = true;
	                // Get list product 
	                var param = {
	                    mode: 'EXPORT',
	                    warehouse_exim_id: self.m.warehouse_exim_id,
	                    from_warehouse_id: self.m.warehouse.from_warehouse_id,
	                    detail: warehouseDetail
	                };
	                var exportService = self.API.service('create-export', self.API.all('crm2310'));

	                // self.$log.info('this.m', self.m);

	                exportService.post(param).then(function (response) {
	                    // var list = response.plain().data;
	                    self.loadInitData();
	                    self.m.isExport = false;
	                });
	            });
	        }
	    }, {
	        key: "createImport",
	        value: function createImport() {
	            var $log = this.$log;
	            var self = this;

	            swal({
	                title: "Bạn có muốn nhập kho?",
	                text: "Sau khi bấm nút nhập, lượng hàng này sẽ được cộng trực tiếp vào kho bán hàng của kho nhập.",
	                type: "warning",
	                showCancelButton: true,
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                //$log.info(this.m);
	                var warehouseDetail = self.createWarehouseDetail();
	                if (self.m.isImport == true) {
	                    swal("Đang xử lý!");
	                    return;
	                }

	                self.m.isImport = true;
	                // Get list product 
	                var param = {
	                    mode: 'IMPORT',
	                    warehouse_exim_id: self.m.warehouse_exim_id,
	                    to_warehouse_id: self.m.warehouse.to_warehouse_id,
	                    detail: warehouseDetail
	                };
	                var importService = self.API.service('create-import', self.API.all('crm2310'));

	                // self.$log.info('this.m', self.m);

	                importService.post(param).then(function (response) {
	                    // var list = response.plain().data;
	                    self.m.isImport = true;
	                    self.loadInitData();
	                });
	            });
	        }
	    }, {
	        key: "clickRequestCancel",
	        value: function clickRequestCancel() {
	            var that = this;
	            swal({
	                title: "Bạn có muốn hủy phiếu nhập xuất kho này?",
	                text: "phiếu khi hủy sẽ không thể phục hồi.",
	                type: "input",
	                showCancelButton: true,
	                closeOnConfirm: true,
	                inputPlaceholder: "Lý do"
	            }, function (inputValue) {
	                if (inputValue === false) return false;
	                if (inputValue === "") {
	                    swal.showInputError("You need to write something!");
	                    return false;
	                }

	                var param = {
	                    warehouse_exim_id: that.m.warehouse_exim_id,
	                    notes: inputValue
	                };

	                var service = that.API.service('request-cancel', that.API.all('crm2310'));
	                service.post(param).then(function (res) {
	                    if (res.data.rtnCd == true) {
	                        that.ClientService.success(res.data.msg);
	                        //that.loadInitData();
	                        that.m.requestList = res.data.requestList;
	                        that.loadInitData();
	                    } else {
	                        that.ClientService.error(res.data.msg);
	                    }
	                });
	            });
	        }
	    }, {
	        key: "deny",
	        value: function deny(item) {
	            var that = this;
	            this.$log.debug(item);
	            swal({
	                title: "Bạn có muốn từ chối yêu cầu này?",
	                text: "",
	                type: "input",
	                showCancelButton: true,
	                closeOnConfirm: true,
	                inputPlaceholder: "Lý do",
	                confirmButtonColor: "#DD6B55"
	            }, function (inputValue) {
	                if (inputValue === false) return false;
	                if (inputValue === "") {
	                    swal.showInputError("You need to write something!");
	                    return false;
	                }

	                var param = {
	                    request_id: item.request_id,
	                    notes: inputValue
	                };

	                var service = that.API.service('deny', that.API.all('crm2310'));
	                service.post(param).then(function (res) {
	                    if (res.data.rtnCd == true) {
	                        that.ClientService.success(res.data.msg);
	                        that.loadInitData();
	                        // that.search();
	                    } else {
	                        that.ClientService.error(res.data.msg);
	                    }
	                });
	            });
	        }
	    }, {
	        key: "accept",
	        value: function accept(item) {
	            var that = this;
	            this.$log.debug(item);
	            swal({
	                title: "Bạn có muốn chấp nhận yêu cầu này?",
	                text: "",
	                type: "input",
	                showCancelButton: true,
	                closeOnConfirm: true,
	                inputPlaceholder: "Lý do"
	            }, function (inputValue) {
	                if (inputValue === false) return false;
	                if (inputValue === "") {
	                    swal.showInputError("You need to write something!");
	                    return false;
	                }

	                var param = {
	                    request_id: item.request_id,
	                    notes: inputValue
	                };

	                var service = that.API.service('accept', that.API.all('crm2310'));
	                service.post(param).then(function (res) {
	                    if (res.data.rtnCd == true) {
	                        that.ClientService.success(res.data.msg);
	                        that.loadInitData();
	                        // that.search();
	                    } else {
	                        that.ClientService.error(res.data.msg);
	                    }
	                });
	            });
	        }
	    }, {
	        key: "upload",
	        value: function upload() {
	            var self = this;
	            var service = this.API.service('upload', this.API.all('crm2310'));

	            if (self.m.isUploaded == true) {
	                swal("Đang xử lý!");
	                return;
	            }

	            self.m.isUploaded = true;
	            var param = {
	                id: this.m.form.id,
	                file: this.m.formUpload.file
	            };

	            if (param.id > 0) {
	                service.post(param).then(function (response) {
	                    if (response.data.rtnCd == true) {
	                        self.m.formUpload.file = null;
	                        self.ClientService.success('Thêm hình ảnh thành công');
	                        self.loadImageList();
	                    } else {
	                        self.ClientService.error('Không thể thêm hình ảnh');
	                    }
	                    self.m.isUploaded = false;
	                });
	            }
	        }
	    }, {
	        key: "loadImageList",
	        value: function loadImageList() {
	            var self = this;
	            var param = {
	                id: this.m.form.id
	            };

	            if (param.id > 0) {
	                var service = this.API.service('load-images', this.API.all('crm2310'));

	                service.post(param).then(function (response) {
	                    if (response.data.rtnCd == true) {
	                        self.m.formUpload.images = response.data.list;
	                    } else {
	                        self.ClientService.error('Có lỗi khi tải hình ảnh');
	                    }
	                });
	            }
	        }
	    }]);

	    return Crm2310Controller;
	}();

	var Crm2310Component = exports.Crm2310Component = {
	    //templateUrl: './views/app/components/crm2310/crm2310.component.html',
	    templateUrl: '/views/admin.crm2310',
	    controller: Crm2310Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 111 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2300Controller = function () {
	    Crm2300Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Crm2300Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm2300Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.title = ["Xuất kho", "Nhập kho"];

	        this.m = {
	            init: {},
	            1: {
	                data: {},
	                filter: {}
	            },
	            2: {
	                data: {},
	                filter: {}
	            },
	            datetimepicker_options: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Crm2300Controller, [{
	        key: "$onInit",
	        value: function $onInit() {
	            var previousSearch = sessionStorage.crm2300;
	            this.loadInit();
	            if (angular.isUndefined(previousSearch)) {
	                this.doSearch(1, 1);
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;
	            var index = previousSearch.index;

	            this.m.activeFlag = index;

	            delete previousSearch['page'];
	            delete previousSearch['index'];

	            this.m[index].filter = angular.copy(previousSearch);
	            this.doSearch(index, page);
	        }
	    }, {
	        key: "loadInit",
	        value: function loadInit() {
	            var _this = this;

	            // Get list product 
	            var loadService = this.API.service('load-init', this.API.all('crm2300'));
	            loadService.post().then(function (response) {
	                _this.m.init = response.plain().data;
	            });
	        }
	    }, {
	        key: "resetFilter",
	        value: function resetFilter(index) {
	            if (index < 1 || index > 2) {
	                return;
	            }
	            this.m[index].filter = {
	                orderBy: 'updated_at',
	                orderDirection: 'desc'
	            };
	            this.doSearch(index, 1);
	        }
	    }, {
	        key: "chooseTab",
	        value: function chooseTab(index) {
	            if (index < 1 || index > 2) {
	                return;
	            }
	            // this.$log.info('check : ',this.m);
	            this.m.activeFlag = index;
	            this.doSearch(index, 1);
	        }
	    }, {
	        key: "search",
	        value: function search() {
	            this.doSearch(1, 1);
	        }
	    }, {
	        key: "doSearch",
	        value: function doSearch(index, page) {
	            var _this2 = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm2300'));
	            var param = angular.copy(this.m[index].filter);
	            param.page = page;
	            param.index = index;
	            sessionStorage.crm2300 = angular.toJson(param);
	            searchService.post(param).then(function (response) {
	                //this.$log.info(response);
	                // this.m.data = response.plain().data;
	                var data = response.plain().data;
	                _this2.m[index].data = data;
	            });
	        }
	    }]);

	    return Crm2300Controller;
	}();

	var Crm2300Component = exports.Crm2300Component = {
	    //templateUrl: './views/app/components/crm2300/crm2300.component.html',
	    templateUrl: '/views/admin.crm2300.crm2300',
	    controller: Crm2300Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 112 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2110Controller = function () {
	    Crm2110Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Crm2110Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Crm2110Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.RouteService = RouteService;
	        this.ClientService = ClientService;
	        this.m = {
	            filter: {}
	        };
	        this.m.area_id = $stateParams.area_id;
	        this.loadInitData();
	    }

	    _createClass(Crm2110Controller, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var _this = this;

	            var param = {
	                area_id: this.m.area_id
	            };
	            var log = this.$log;

	            var service = this.API.service('load-init', this.API.all('crm2110'));
	            service.post(param).then(function (response) {
	                _this.m.init = response.data; //initiate list of bank account
	                log.info('init', _this.m.init);
	                if (_this.m.init.area != null) {
	                    _this.m.filter = _this.m.init.area[0];
	                }

	                var groupList = response.data.groupList;
	                var salesmanList = response.data.salesmanList;

	                if (groupList != null) {
	                    _this.m.groupList = groupList;
	                }
	                if (salesmanList != null) {
	                    _this.m.salesmanList = salesmanList;
	                }
	            });
	        }
	    }, {
	        key: 'save',
	        value: function save() {

	            var $log = this.$log;
	            var alerts = this.alerts;
	            var RouteService = this.RouteService;
	            var ClientService = this.ClientService;
	            var saveService = this.API.service('save', this.API.all('crm2110'));
	            var param = angular.copy(this.m.filter);
	            var data = void 0;

	            if (param.area_group_id == null) {
	                ClientService.error('Vui lòng chọn vùng');
	                return;
	            }

	            if (param.salesman_id == null) {
	                ClientService.error('Vui lòng salesman');
	                return;
	            }

	            param.area_id = this.m.area_id;

	            saveService.post(param).then(function (response) {
	                data = response.plain().data;
	                if (data.status) {
	                    if (param.area_id == null) {

	                        ClientService.success('Thêm mới khu vực thành công');
	                    } else {
	                        ClientService.success('Cập nhật khu vực thành công');
	                    }
	                } else {
	                    ClientService.error('Lưu thất bại');
	                }
	                RouteService.goState('app.crm2100');
	            });
	        }
	    }]);

	    return Crm2110Controller;
	}();

	var Crm2110Component = exports.Crm2110Component = {
	    //templateUrl: './views/app/components/crm2110/crm2110.component.html',
	    templateUrl: '/views/admin.crm2110',
	    controller: Crm2110Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 113 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2100Controller = function () {
	    Crm2100Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService"];
	    function Crm2100Controller($scope, $state, $compile, $log, AclService, API, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm2100Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;

	        this.m = {
	            filter: {}
	        };
	    }

	    _createClass(Crm2100Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.crm2100;
	            this.loadInit();
	            if (angular.isUndefined(previousSearch)) {
	                this.doSearch(1);
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            this.doSearch(page);
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var service = this.API.service('load-init', this.API.all('crm2100'));
	            service.post().then(function (response) {
	                var groupList = response.data.groupList;
	                var salesmanList = response.data.salesmanList;

	                if (groupList != null) {
	                    _this.m.groupList = groupList;
	                }
	                if (salesmanList != null) {
	                    _this.m.salesmanList = salesmanList;
	                }
	                // this.$log.info('check :', this.m);
	            });
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {};
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this2 = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm2100'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;
	            sessionStorage.crm2100 = angular.toJson(param);
	            searchService.post(param).then(function (response) {
	                //this.$log.info(response);
	                _this2.m.data = response.plain().data;
	            });
	        }
	    }, {
	        key: 'assign',
	        value: function assign() {
	            var _this3 = this;

	            // Get list product 
	            var searchService = this.API.service('assign', this.API.all('crm2100'));
	            var param = angular.copy(this.m.filter);
	            searchService.post(param).then(function (response) {
	                _this3.ClientService.success("Phân công nhân viên bán hàng thành công");
	            });
	        }
	    }]);

	    return Crm2100Controller;
	}();

	var Crm2100Component = exports.Crm2100Component = {
	    //templateUrl: './views/app/components/crm2100/crm2100.component.html',
	    templateUrl: '/views/admin.crm2100',
	    controller: Crm2100Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 114 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2010Controller = function () {
	    Crm2010Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Crm2010Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Crm2010Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.ClientService = ClientService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.RouteService = RouteService;

	        this.m = {
	            filter: {},
	            dateOptions: {
	                // formatYear: 'yy',
	                startingDay: 1
	            }
	        };

	        this.m.branch_id = $stateParams.branch_id;
	        this.m.filter.started_date = new Date();
	        //this.$log.info('check ', this.m.branch_id);
	        this.loadInitData();
	    }

	    _createClass(Crm2010Controller, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var _this = this;

	            if (!this.m.branch_id) {
	                return;
	            }
	            var param = {
	                branch_id: this.m.branch_id
	            };
	            var log = this.$log;

	            var service = this.API.service('load-init', this.API.all('crm2010'));
	            service.post(param).then(function (response) {
	                _this.m.init = response.data; //initiate list of bank account
	                log.info('init', _this.m.init);
	                _this.m.filter.started_date = new Date(_this.m.init[0].started_date);
	                _this.m.filter.branch_name = _this.m.init[0].branch_name;
	                _this.m.filter.branch_address = _this.m.init[0].branch_address;
	                _this.m.filter.branch_contact = _this.m.init[0].branch_contact;
	            });
	        }
	    }, {
	        key: 'save',
	        value: function save() {

	            var $log = this.$log;
	            var alerts = this.alerts;
	            var RouteService = this.RouteService;
	            var ClientService = this.ClientService;
	            var saveService = this.API.service('save', this.API.all('crm2010'));
	            var param = angular.copy(this.m.filter);
	            var data = void 0;
	            if (this.m.branch_id == null) {
	                param.branch_id = null;
	            } else {
	                param.branch_id = this.m.branch_id;
	            }

	            saveService.post(param).then(function (response) {
	                data = response.plain().data;
	                if (data.status) {
	                    if (param.branch_id == null) {

	                        ClientService.success('Thêm mới chi nhánh thành công');
	                    } else {
	                        ClientService.success('Cập nhật chi nhánh thành công');
	                    }
	                } else {
	                    ClientService.error('Lưu thất bại');
	                }
	                RouteService.goState('app.crm2000');
	            });
	        }
	    }]);

	    return Crm2010Controller;
	}();

	var Crm2010Component = exports.Crm2010Component = {
	    //templateUrl: './views/app/components/crm2010/crm2010.component.html',
	    templateUrl: '/views/admin.crm2010',
	    controller: Crm2010Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 115 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm2000Controller = function () {
	    Crm2000Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Crm2000Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm2000Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;

	        this.m = {
	            filter: {}
	        };
	    }

	    _createClass(Crm2000Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.crm2000;

	            if (angular.isUndefined(previousSearch)) {
	                this.doSearch(1);
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            this.doSearch(page);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {};
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm2000'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;
	            sessionStorage.crm2000 = angular.toJson(param);
	            this.$log.info(searchService);

	            searchService.post(param).then(function (response) {
	                _this.$log.info(response);
	                _this.m.data = response.plain().data;
	            });
	        }
	    }]);

	    return Crm2000Controller;
	}();

	var Crm2000Component = exports.Crm2000Component = {
	    //templateUrl: './views/app/components/crm2000/crm2000.component.html',
	    templateUrl: '/views/admin.crm2000',
	    controller: Crm2000Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 116 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1930Controller = function () {
	    Crm1930Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Crm1930Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm1930Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;

	        this.m = {};
	    }

	    _createClass(Crm1930Controller, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Crm1930Controller;
	}();

	var Crm1930Component = exports.Crm1930Component = {
	    //templateUrl: './views/app/components/crm1930/crm1930.component.html',
	    templateUrl: '/views/admin.crm1930',
	    controller: Crm1930Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 117 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1921Controller = function () {
	    Crm1921Controller.$inject = ["$scope", "$state", "API", "$log", "UtilsService", "ClientService"];
	    function Crm1921Controller($scope, $state, API, $log, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm1921Controller);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.m = {
	            filter: {},
	            list: null,
	            dateOptions: {
	                // formatYear: 'yy',
	                startingDay: 1
	            }
	        };

	        this.search();
	        //
	    }

	    _createClass(Crm1921Controller, [{
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.search(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {

	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	            this.m.filter.delivery_vendor_name = null;
	            this.m.filter.delivery_vendor_phone = null;
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            var $log = this.$log;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm1921'));
	            var param = angular.copy(this.m.filter);
	            param.down = 0;
	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;

	            searchService.post(param).then(function (response) {
	                _this.$log.info(response);
	                _this.m.list = response.plain().data;
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this2 = this;

	            var param = angular.copy(this.m.filter);
	            var service = this.API.service('download', this.API.all('crm1921'));
	            param.down = 1;
	            service.post(param).then(function (response) {
	                _this2.$log.info(response.data);
	                _this2.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Crm1921Controller;
	}();

	var Crm1921Component = exports.Crm1921Component = {
	    templateUrl: './views/admin.crm1921',
	    controller: Crm1921Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 118 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1920Controller = function () {
	    Crm1920Controller.$inject = ["$scope", "$state", "API", "$log", "UtilsService", "ClientService"];
	    function Crm1920Controller($scope, $state, API, $log, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm1920Controller);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.m = {
	            filter: {},
	            list: null,
	            dateOptions: {
	                // formatYear: 'yy',
	                startingDay: 1
	            }
	        };

	        this.search();
	        //
	    }

	    _createClass(Crm1920Controller, [{
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.search(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {

	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	            this.m.filter.delivery_vendor_name = null;
	            this.m.filter.delivery_vendor_phone = null;
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            var $log = this.$log;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm1920'));
	            var param = angular.copy(this.m.filter);
	            param.down = 0;
	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;

	            searchService.post(param).then(function (response) {
	                _this.$log.info(response);
	                _this.m.list = response.plain().data;
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this2 = this;

	            var param = angular.copy(this.m.filter);
	            var service = this.API.service('download', this.API.all('crm1920'));
	            param.down = 1;
	            service.post(param).then(function (response) {
	                _this2.$log.info(response.data);
	                _this2.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Crm1920Controller;
	}();

	var Crm1920Component = exports.Crm1920Component = {
	    templateUrl: './views/admin.crm1920',
	    controller: Crm1920Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 119 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1900Controller = function () {
	    Crm1900Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Crm1900Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm1900Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;

	        this.m = {
	            filter: {}
	        };
	    }

	    _createClass(Crm1900Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.crm1900;
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }
	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;
	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);
	            this.doSearch(page);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {};
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm1900'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;
	            sessionStorage.crm1900 = angular.toJson(param);
	            searchService.post(param).then(function (response) {
	                _this.m.data = response.plain().data.data;
	            });
	        }
	    }]);

	    return Crm1900Controller;
	}();

	var Crm1900Component = exports.Crm1900Component = {
	    //templateUrl: './views/app/components/crm1900/crm1900.component.html',
	    templateUrl: '/views/admin.crm1900',
	    controller: Crm1900Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 120 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0121Controller = function () {
	    Crm0121Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Crm0121Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Crm0121Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.RouteService = RouteService;
	        this.m = {
	            form: {},
	            init: {}
	        };

	        if ($stateParams.product_cat1_id > 0) {
	            this.m.form.product_cat1_id = $stateParams.product_cat1_id;
	        } else {
	            this.m.form.product_cat1_id = 0;
	        }
	    }

	    _createClass(Crm0121Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.loadInitData();
	        }
	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {

	            var thisClass = this;
	            thisClass.$log.info('check', thisClass);
	            if (this.m.form.product_cat1_id > 0) {
	                var service = this.API.service('load', this.API.all('crm0121'));
	                var param = { product_cat1_id: this.m.form.product_cat1_id };
	                service.post(param).then(function (response) {

	                    thisClass.m.form = response.data.product[0];
	                    thisClass.setInitValue(response.data.init);
	                    thisClass.$log.info('check x', thisClass);
	                }, function (response) {});
	            } else {
	                var _service = this.API.service('load-init', this.API.all('crm0121'));
	                var _param = {};
	                _service.post(_param).then(function (response) {

	                    thisClass.setInitValue(response.data.init);
	                }, function (response) {});
	            }
	        }
	    }, {
	        key: 'setInitValue',
	        value: function setInitValue(initObj) {
	            this.m.init.listSupplier = initObj;
	        }
	    }, {
	        key: 'save',
	        value: function save(isValid) {
	            var _this = this;

	            if (!isValid) {
	                return;
	            }
	            this.m.errors = null;

	            var thisClass = this;
	            var action = 'create';
	            if (this.m.form.product_cat1_id > 0) {
	                action = 'update';
	            }

	            var service = this.API.service(action, this.API.all('crm0121'));

	            var param = angular.copy(this.m.form);
	            thisClass.$log.info('param', param);
	            service.post(param).then(function (response) {
	                thisClass.$log.info('ok response', response.plain().data);
	                _this.m.data = response.plain().data;
	                var result = response.plain().data;
	                if (result.rtnCd) {
	                    thisClass.ClientService.success(result.msg);
	                    thisClass.RouteService.goState('app.crm0120');
	                }
	            }, function (response) {
	                //thisClass.$log.info('ng response', response);
	                _this.m.errors = response.data.errors;
	            });
	        }
	    }]);

	    return Crm0121Controller;
	}();

	var Crm0121Component = exports.Crm0121Component = {
	    //templateUrl: './views/app/components/crm0121/crm0121.component.html',
	    templateUrl: '/views/admin.crm0121',
	    controller: Crm0121Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 121 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0120Controller = function () {
	    Crm0120Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Crm0120Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm0120Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;

	        this.m = {
	            filter: {},
	            list: null
	        };
	    }

	    _createClass(Crm0120Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.crm0120;
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }
	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;
	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);
	            this.doSearch(page);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {};
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm0120'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;
	            sessionStorage.crm0120 = angular.toJson(param);
	            searchService.post(param).then(function (response) {
	                _this.m.data = response.plain().data.data;
	            });
	        }
	    }]);

	    return Crm0120Controller;
	}();

	var Crm0120Component = exports.Crm0120Component = {
	    //templateUrl: './views/app/components/crm0120/crm0120.component.html',
	    templateUrl: '/views/admin.crm0120',
	    controller: Crm0120Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 122 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0250Controller = function () {
	    Crm0250Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService"];
	    function Crm0250Controller($scope, $state, $compile, $log, AclService, API, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm0250Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.can = AclService.can;
	        this.ClientService = ClientService;

	        this.m = {
	            activeFlag: 1,
	            1: {
	                filter: {
	                    days: 0
	                },
	                data: {}
	            },
	            2: {
	                filter: {},
	                data: {}
	            },
	            3: {
	                data: {}
	            },
	            list: null
	        };
	    }

	    _createClass(Crm0250Controller, [{
	        key: 'resetFilter',
	        value: function resetFilter(index) {
	            if (index < 1 || index > 2) {
	                return;
	            }
	            this.m[index].filter = {};
	            this.doSearch(index, 1);
	        }
	    }, {
	        key: 'chooseTab',
	        value: function chooseTab(index) {
	            if (index < 1 || index > 3) {
	                return;
	            }
	            this.m.activeFlag = index;
	            if (index == 3) {
	                this.loadStats();
	            }
	            // let param1 = {};
	            // param1.tab = tab;
	            // sessionStorage.dashboard = angular.toJson(param1);
	        }
	    }, {
	        key: 'loadStats',
	        value: function loadStats() {
	            var _this = this;

	            var self = this;
	            // Get list product 
	            var searchService = this.API.service('stats', this.API.all('crm0250'));
	            var param = [];
	            searchService.post(param).then(function (response) {
	                _this.m[3].data = response.plain().data;
	                self.$log.info('crm0250111', self.m);
	            });
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {
	            this.loadInit();
	            var previousSearch = sessionStorage.crm0250;
	            if (angular.isUndefined(previousSearch)) {
	                this.doSearch(1, 1);
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;
	            var index = previousSearch.index;
	            this.m.activeFlag = index;
	            delete previousSearch['page'];
	            delete previousSearch['index'];
	            this.m[index].filter = angular.copy(previousSearch);
	            this.doSearch(index, page);
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(index, page) {
	            var _this2 = this;

	            var self = this;
	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm0250'));
	            var param = angular.copy(this.m[index].filter);
	            param.page = page;
	            param.index = index;
	            sessionStorage.crm0250 = angular.toJson(param);

	            param.page = page;
	            searchService.post(param).then(function (response) {
	                _this2.m[index].data = response.plain().data.data;
	                self.$log.info('crm0250111', self.m);
	            });
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this3 = this;

	            var service = this.API.service('init', this.API.all('crm0250'));
	            service.post().then(function (response) {
	                var salesmanList = response.data.salesmanList;
	                if (salesmanList != null) {
	                    _this3.m.listSalesman = salesmanList;
	                }
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this4 = this;

	            var param = angular.copy(this.m.filter);
	            var service = this.API.service('download', this.API.all('crm0250'));
	            service.post(param).then(function (response) {
	                _this4.$log.info(response.data);
	                _this4.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }, {
	        key: 'run',
	        value: function run() {
	            var self = this;
	            swal({
	                title: "Bạn có muốn tính lại số ngày công nợ không?",
	                text: "Quá trình này sẽ mất vài phút",
	                type: "warning",
	                showCancelButton: true,
	                closeOnConfirm: true
	                // confirmButtonColor: "#DD6B55"
	            }, function () {

	                var service = self.API.service('exec', self.API.all('crm0250'));
	                service.post().then(function (res) {
	                    self.ClientService.success(res.data.msg);
	                });
	            });
	        }
	    }]);

	    return Crm0250Controller;
	}();

	var Crm0250Component = exports.Crm0250Component = {
	    //templateUrl: './views/app/components/crm0250/crm0250.component.html',
	    templateUrl: '/views/admin.crm0250',
	    controller: Crm0250Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Rpt0516Component = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _report = __webpack_require__(86);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Rpt0516Controller = function () {
	    Rpt0516Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "DialogService"];
	    function Rpt0516Controller($scope, $state, $compile, $log, AclService, API, UtilsService, DialogService) {
	        'ngInject';

	        _classCallCheck(this, Rpt0516Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.DialogService = DialogService;
	        this.UtilsService = UtilsService;

	        this.m = {
	            init: {},
	            filter: {},
	            data: [],
	            res: {}
	        };
	    }

	    _createClass(Rpt0516Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.loadInitData();
	        }
	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var self = this;
	            var service = this.API.service('init', this.API.all('rpt0516'));
	            var param = {};
	            service.post(param).then(function (response) {
	                self.setInitData(response.data);
	            });
	        }
	    }, {
	        key: 'setInitData',
	        value: function setInitData(data) {
	            this.m.init = data;
	            if (this.m.init.listYear != null && this.m.init.listYear.length > 0) {
	                this.m.filter.year = this.m.init.listYear[0].year;
	            } else {
	                this.m.filter.year = new Date().getFullYear();
	            }
	        }
	    }, {
	        key: 'choose',
	        value: function choose(tab) {
	            this.m.activeFlag = tab;
	        }
	    }, {
	        key: 'loadDataForCategories',
	        value: function loadDataForCategories() {
	            var _this = this;

	            var param = angular.copy(this.m.filter);
	            var serviceCate = this.API.service('load-cate', this.API.all('rpt0516'));
	            this.m.res[1] = {};
	            serviceCate.post(param).then(function (response) {
	                _this.m.res[1] = response.data;
	                //this.$log.info('result from cate', this.m);
	            });
	        }
	    }, {
	        key: 'loadDataForDepartments',
	        value: function loadDataForDepartments() {
	            var _this2 = this;

	            var param = angular.copy(this.m.filter);
	            var serviceDepartment = this.API.service('load-department', this.API.all('rpt0516'));
	            this.m.res[2] = {};
	            serviceDepartment.post(param).then(function (response) {
	                _this2.m.res[2] = response.data;
	            });
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            if (!this.m.activeFlag) {
	                return;
	            }
	            var activeFlag = this.m.activeFlag;
	            this.$log.info('check tab ', this.m);
	            switch (activeFlag) {
	                case 1:
	                    this.loadDataForCategories();
	                    break;
	                case 2:
	                    this.loadDataForDepartments();
	                    break;
	            }
	        }
	    }, {
	        key: 'getDataHorizontalByProduct',
	        value: function getDataHorizontalByProduct(item, row) {
	            var $log = this.$log;
	            var smallItem = {};
	            var dataProvider = [];
	            //$log.info('draw part 3', row);
	            angular.forEach(row, function (value, key) {
	                if (key != 0 && key != 13) {
	                    smallItem = {};
	                    smallItem.key = value;
	                    if (item[key] == null) {
	                        smallItem.value = 0;
	                    } else {
	                        smallItem.value = item[key];
	                    }
	                    dataProvider.push(smallItem);
	                }
	            });
	            return dataProvider;
	        }
	    }, {
	        key: 'getDataVerticalByProduct',
	        value: function getDataVerticalByProduct(item, header) {
	            var smallItem = {};
	            var dataProvider = [];
	            angular.forEach(item, function (value, key) {
	                if (key > 0) {
	                    smallItem = {};
	                    smallItem.key = item[key][0];
	                    smallItem.value = item[key][header];
	                    dataProvider.push(smallItem);
	                }
	            });
	            this.$log.info('check vertical ', dataProvider);
	            return dataProvider;
	        }
	    }, {
	        key: 'prepareDataToDraw',
	        value: function prepareDataToDraw(typeObject, item, header, direction, title, row) {
	            var dataProvider = [];
	            var $log = this.$log;
	            switch (typeObject) {
	                // product
	                case 1:
	                    if (direction == 0) {
	                        dataProvider = this.getDataHorizontalByProduct(item, row);
	                        title = title + '_' + item[0];
	                    } else {
	                        dataProvider = this.getDataVerticalByProduct(item, header);
	                    }
	                    break;
	            }
	            var data = {
	                title: title,
	                dataProvider: dataProvider
	            };
	            return data;
	        }
	    }, {
	        key: 'selectTitleForPart',
	        value: function selectTitleForPart(part) {
	            switch (part) {
	                case 1:
	                    return "CHI PHÍ THEO LOẠI SẢN PHẨM";
	                case 2:
	                    return "CHI PHÍ THEO PHÒNG BAN";
	            }
	            return "";
	        }

	        // typeObject (product or store : 1 or 2), item (data), header, type( line or bar: 2 or 1), direction (horizontal or vertical: 0 or 1)

	    }, {
	        key: 'draw',
	        value: function draw(typeObject, item, header, typeChart, direction, part, addition, row) {
	            var $log = this.$log;
	            var title = this.selectTitleForPart(part) + '_' + addition + '_' + header;
	            var data = void 0;
	            data = this.prepareDataToDraw(typeObject, item, header, direction, title, row);
	            //$log.info('test draw rpt0511 a', type);
	            var modalOption = {
	                size: 'dialog-1024',
	                controller: _report.ReportDialogController,
	                resolve: {
	                    data: data,
	                    type: typeChart
	                }
	            };

	            this.DialogService.open('report_chart', modalOption);
	        }
	    }]);

	    return Rpt0516Controller;
	}();

	var Rpt0516Component = exports.Rpt0516Component = {
	    //templateUrl: './views/app/components/rpt0516/rpt0516.component.html',
	    templateUrl: '/views/admin.rpt0516',
	    controller: Rpt0516Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 124 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1831Controller = function () {
	    Crm1831Controller.$inject = ["$scope", "$state", "$log", "API", "UtilsService", "ClientService", "$stateParams", "RouteService", "AclService"];
	    function Crm1831Controller($scope, $state, $log, API, UtilsService, ClientService, $stateParams, RouteService, AclService) {
	        'ngInject';

	        _classCallCheck(this, Crm1831Controller);

	        this.$state = $state;
	        this.$log = $log;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.RouteService = RouteService;
	        this.can = AclService.can;
	        this.m = {
	            form: {},
	            init: {},
	            dateOptions: {
	                // formatYear: 'yy',
	                startingDay: 1
	            },
	            datetimepicker_options: {
	                // viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	        this.m.cost_id = $stateParams.cost_id;
	        this.m.isSaving = false;
	    }

	    _createClass(Crm1831Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.m.form.cost_date = moment();
	            //this.$log.info('ahihi', this.m);
	            this.loadInit();
	        }
	    }, {
	        key: 'nomarlizeData',
	        value: function nomarlizeData(data) {
	            if (!data) {
	                return;
	            }
	            this.m.form.department_id = data.department_id;
	            this.m.form.cost_cat_id = data.cost_cat_id;
	            this.m.form.cost_date = new Date(data.cost_date);
	            this.m.form.confirm_time = new Date(data.confirm_time);
	            this.m.form.cancel_time = new Date(data.cancel_time);
	            this.m.form.created_at = new Date(data.created_at);

	            this.m.form.amount = parseInt(data.amount);
	            this.m.form.contra_account = data.contra_account;
	            this.m.form.voucher = data.voucher;
	            this.m.form.description = data.description;
	            this.m.form.cost_sts = data.cost_sts;
	            this.m.form.request_notes = data.request_notes;
	            this.m.form.confirm_notes = data.confirm_notes;
	            this.m.form.cancel_notes = data.cancel_notes;

	            this.m.form.confirm_by = data.confirm_by;
	            this.m.form.created_by = data.created_by;
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var param = {
	                cost_id: this.m.cost_id
	            };
	            var service = this.API.service('load-init', this.API.all('crm1831'));
	            service.post(param).then(function (response) {
	                _this.m.init.departments = response.data.departments;
	                _this.m.init.costcats = response.data.costcats;
	                _this.nomarlizeData(response.data.form);
	                _this.$log.info('m init: ', _this.m);
	            });
	        }
	    }, {
	        key: 'checkCondition',
	        value: function checkCondition(form) {
	            var ClientService = this.ClientService;
	            if (!form.voucher || form.voucher == "") {
	                ClientService.error("Chưa nhập số chứng từ");
	                return false;
	            }
	            if (!form.cost_date || form.cost_date == "") {
	                ClientService.error("Chưa nhập ngày hoặc ngày không đúng định dạng");
	                return false;
	            }
	            if (!form.description || form.description == "") {
	                ClientService.error("Chưa nhập diễn giải");
	                return false;
	            }
	            if (!form.contra_account || form.contra_account == "") {
	                ClientService.error("Chưa nhập tài khoản đối ứng");
	                return false;
	            }
	            if (!form.cost_cat_id || form.cost_cat_id == "") {
	                ClientService.error("Chưa chọn loại chi phí");
	                return false;
	            }
	            if (!form.department_id || form.department_id == "") {
	                ClientService.error("Chưa chọn phòng ban");
	                return false;
	            }
	            if (!form.amount || form.amount == "") {
	                ClientService.error("Chưa nhập phát sinh nợ");
	                return false;
	            }
	            if (!form.request_notes || form.request_notes == "") {
	                ClientService.error("Chưa nhập request_notes");
	                return false;
	            }
	            return true;
	        }
	    }, {
	        key: 'save',
	        value: function save() {
	            //let $log = this.$log;
	            var that = this;
	            var alerts = that.alerts;
	            var RouteService = that.RouteService;
	            var ClientService = that.ClientService;
	            if (that.m.isSaving == true) {
	                swal("Đang xử lý!");
	                return;
	            }
	            that.m.isSaving = true;
	            if (!that.checkCondition(that.m.form)) {
	                return;
	            }

	            var param = angular.copy(that.m.form);
	            param.cost_id = that.m.cost_id;
	            param.cost_date = moment(param.cost_date).format('YYYY-MM-DD');
	            that.$log.info('param: ', param);
	            swal({
	                title: "Bạn có muốn lưu thông tin chi phí này",
	                text: "Thông tin không thể sửa sau khi lưu",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var saveService = that.API.service('save', that.API.all('crm1831'));
	                saveService.post(param).then(function (response) {
	                    var id = response.data;
	                    ClientService.success(id);
	                    that.m.cost_id = id;
	                    // RouteService.goState('app.crm1830');
	                    that.loadInit();
	                });
	            });
	        }
	    }, {
	        key: 'sendRequest',
	        value: function sendRequest() {
	            var that = this;
	            var param = angular.copy(that.m.form);
	            param.cost_id = this.m.cost_id;
	            var ClientService = that.ClientService;
	            swal({
	                title: "Bạn có muốn đề xuất duyệt chi phí này",
	                text: "Thông tin không thể sửa sau khi đề xuất",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var saveService = that.API.service('send-request', that.API.all('crm1831'));
	                saveService.post(param).then(function (response) {
	                    var msg = response.data;
	                    ClientService.success(msg);
	                    // RouteService.goState('app.crm1830');
	                    that.loadInit();
	                });
	            });
	        }
	    }, {
	        key: 'accpet',
	        value: function accpet() {
	            var that = this;
	            var param = angular.copy(that.m.form);
	            param.cost_id = this.m.cost_id;
	            var ClientService = that.ClientService;
	            swal({
	                title: "Bạn có muốn duyệt xuất duyệt chi phí này",
	                text: "Thông tin sau khi duyệt sẽ được bộ phận kế toán chi trả ",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var saveService = that.API.service('accept', that.API.all('crm1831'));
	                saveService.post(param).then(function (response) {
	                    var msg = response.data;
	                    ClientService.success(msg);
	                    // RouteService.goState('app.crm1830');
	                    that.loadInit();
	                });
	            });
	        }
	    }, {
	        key: 'deny',
	        value: function deny() {
	            var that = this;
	            var param = angular.copy(that.m.form);
	            param.cost_id = this.m.cost_id;
	            var ClientService = that.ClientService;
	            swal({
	                title: "Bạn có muốn không duyệt xuất duyệt chi phí này",
	                text: "Thông tin không thể sửa sau khi đề xuất",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var saveService = that.API.service('accept', that.API.all('crm1831'));
	                saveService.post(param).then(function (response) {
	                    var msg = response.data;
	                    ClientService.success(msg);
	                    // RouteService.goState('app.crm1830');
	                    that.loadInit();
	                });
	            });
	        }
	    }, {
	        key: 'accountantConfirm',
	        value: function accountantConfirm() {
	            var that = this;
	            var param = angular.copy(that.m.form);
	            param.cost_id = this.m.cost_id;
	            var ClientService = that.ClientService;
	            swal({
	                title: "Bạn có muốn xác nhận chi trả",
	                text: "Thông tin không thể sửa sau khi đề xuất",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var saveService = that.API.service('acc-confirm', that.API.all('crm1831'));
	                saveService.post(param).then(function (response) {
	                    var msg = response.data;
	                    ClientService.success(msg);
	                    // RouteService.goState('app.crm1830');
	                    that.loadInit();
	                });
	            });
	        }
	    }, {
	        key: 'clickRequestCancel',
	        value: function clickRequestCancel() {
	            var that = this;
	            var param = angular.copy(that.m.form);
	            param.cost_id = this.m.cost_id;
	            var ClientService = that.ClientService;
	            swal({
	                title: "Bạn có muốn huỷ đề xuất thanh toán này",
	                text: "Thông tin không thể sửa sau khi đề xuất",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var saveService = that.API.service('cancel', that.API.all('crm1831'));
	                saveService.post(param).then(function (response) {
	                    var msg = response.data;
	                    ClientService.success(msg);
	                    // RouteService.goState('app.crm1830');
	                    that.loadInit();
	                });
	            });
	        }
	    }]);

	    return Crm1831Controller;
	}();

	var Crm1831Component = exports.Crm1831Component = {
	    //templateUrl: './views/app/components/crm1831/crm1831.component.html',
	    templateUrl: '/views/admin.crm1831',
	    controller: Crm1831Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 125 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1830Controller = function () {
	    Crm1830Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService"];
	    function Crm1830Controller($scope, $state, $compile, $log, AclService, API, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm1830Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.m = {
	            filter: {},
	            init: {},
	            dateOptions: {
	                // formatYear: 'yy',
	                startingDay: 1
	            },
	            datetimepicker_options: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Crm1830Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.m.filter.department_id = null;
	            this.m.filter.cost_cat_id = null;
	            this.m.filter.from_date = moment().subtract(15, 'days');
	            this.m.filter.to_date = moment();
	            var previousSearch = sessionStorage.crm1830;
	            this.loadInit();
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }
	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;
	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);
	            this.doSearch(page);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter.department_id = null;
	            this.m.filter.cost_cat_id = null;
	            this.m.filter.from_date = moment().subtract(15, 'days');
	            this.m.filter.to_date = moment();
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.doSearch(1);
	        }
	    }, {
	        key: '_getSearchFilter',
	        value: function _getSearchFilter() {
	            var param = angular.copy(this.m.filter);

	            if (param.from_date == null) {
	                this.m.filter.from_date = moment().subtract(15, 'days');
	                param.from_date = this.m.filter.from_date.format('YYYY-MM-DD');
	            } else {
	                param.from_date = moment(param.from_date).format('YYYY-MM-DD');
	            }

	            if (param.to_date == null) {
	                this.m.filter.to_date = moment();
	                param.to_date = this.m.filter.to_date.format('YYYY-MM-DD');
	            } else {
	                param.to_date = moment(param.to_date).format('YYYY-MM-DD');
	            }

	            return param;
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm1830'));
	            var param = this._getSearchFilter();
	            this.$log.info(param);
	            param.down = 0;
	            param.page = page;
	            sessionStorage.crm1830 = angular.toJson(param);
	            searchService.post(param).then(function (response) {
	                //this.$log.info(response);
	                _this.m.data = response.plain().data;
	            });
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this2 = this;

	            var service = this.API.service('load-init', this.API.all('crm1830'));
	            service.post().then(function (response) {
	                _this2.m.init = response.data;
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this3 = this;

	            var param = angular.copy(this.m.filter);
	            var service = this.API.service('download', this.API.all('crm1830'));
	            param.down = 1;
	            service.post(param).then(function (response) {
	                _this3.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Crm1830Controller;
	}();

	var Crm1830Component = exports.Crm1830Component = {
	    //templateUrl: './views/app/components/crm1830/crm1830.component.html',
	    templateUrl: '/views/admin.crm1830',
	    controller: Crm1830Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 126 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1821Controller = function () {
	    Crm1821Controller.$inject = ["$scope", "$state", "$log", "API", "UtilsService", "ClientService", "$stateParams", "RouteService"];
	    function Crm1821Controller($scope, $state, $log, API, UtilsService, ClientService, $stateParams, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Crm1821Controller);

	        this.$state = $state;
	        this.$log = $log;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.RouteService = RouteService;
	        this.m = {
	            form: {}
	        };
	        this.m.department_id = $stateParams.department_id;
	        this.loadInitData();
	    }

	    _createClass(Crm1821Controller, [{
	        key: "$onInit",
	        value: function $onInit() {}
	    }, {
	        key: "checkCondition",
	        value: function checkCondition(form) {
	            var ClientService = this.ClientService;
	            if (!form.name || form.name == "") {
	                ClientService.error("Chưa nhập tên phòng ban");
	                return false;
	            }
	            if (!form.description || form.description == "") {
	                ClientService.error("Chưa nhập mô tả phòng ban");
	                return false;
	            }
	            return true;
	        }
	    }, {
	        key: "save",
	        value: function save() {
	            //let $log = this.$log;
	            var alerts = this.alerts;
	            var RouteService = this.RouteService;
	            var ClientService = this.ClientService;
	            var saveService = this.API.service('save', this.API.all('crm1821'));
	            if (!this.checkCondition(this.m.form)) {
	                return;
	            }

	            var param = angular.copy(this.m.form);

	            param.department_id = this.m.department_id;

	            saveService.post(param).then(function (response) {
	                var msg = response.data;
	                ClientService.success(msg);
	                RouteService.goState('app.crm1820');
	            });
	        }
	    }, {
	        key: "loadInitData",
	        value: function loadInitData() {
	            var _this = this;

	            if (!this.m.department_id) {
	                return;
	            }
	            var param = {
	                department_id: this.m.department_id
	            };
	            var service = this.API.service('load-init', this.API.all('crm1821'));
	            service.post(param).then(function (response) {
	                _this.m.form = response.data.department;
	            });
	        }
	    }]);

	    return Crm1821Controller;
	}();

	var Crm1821Component = exports.Crm1821Component = {
	    //templateUrl: './views/app/components/crm1821/crm1821.component.html',
	    templateUrl: '/views/admin.crm1821',
	    controller: Crm1821Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 127 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1820Controller = function () {
	    Crm1820Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Crm1820Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm1820Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;

	        this.m = {
	            filter: {}
	        };
	    }

	    _createClass(Crm1820Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.crm1820;
	            this.loadInit();
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            this.doSearch(page);
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {}
	    }, {
	        key: 'search',
	        value: function search() {
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {};
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm1820'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;
	            sessionStorage.crm1820 = angular.toJson(param);

	            searchService.post(param).then(function (response) {
	                _this.m.data = response.plain().data;
	            });
	        }
	    }]);

	    return Crm1820Controller;
	}();

	var Crm1820Component = exports.Crm1820Component = {
	    //templateUrl: './views/app/components/crm1820/crm1820.component.html',
	    templateUrl: '/views/admin.crm1820',
	    controller: Crm1820Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 128 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1811Controller = function () {
	    Crm1811Controller.$inject = ["$scope", "$state", "$log", "API", "UtilsService", "ClientService", "$stateParams", "RouteService"];
	    function Crm1811Controller($scope, $state, $log, API, UtilsService, ClientService, $stateParams, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Crm1811Controller);

	        this.$state = $state;
	        this.$log = $log;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.RouteService = RouteService;
	        this.m = {
	            form: {}
	        };
	        this.m.cost_cat_id = $stateParams.cost_cat_id;
	        this.loadInitData();
	    }

	    _createClass(Crm1811Controller, [{
	        key: "$onInit",
	        value: function $onInit() {}
	    }, {
	        key: "checkCondition",
	        value: function checkCondition(form) {
	            var ClientService = this.ClientService;
	            if (!form.name || form.name == "") {
	                ClientService.error("Chưa nhập tên loại chi phí");
	                return false;
	            }
	            if (!form.description || form.description == "") {
	                ClientService.error("Chưa nhập mô tả loại chi phí");
	                return false;
	            }
	            return true;
	        }
	    }, {
	        key: "save",
	        value: function save() {
	            //let $log = this.$log;
	            var alerts = this.alerts;
	            var RouteService = this.RouteService;
	            var ClientService = this.ClientService;
	            var saveService = this.API.service('save', this.API.all('crm1811'));
	            if (!this.checkCondition(this.m.form)) {
	                return;
	            }

	            var param = angular.copy(this.m.form);

	            param.cost_cat_id = this.m.cost_cat_id;

	            saveService.post(param).then(function (response) {
	                var msg = response.data;
	                ClientService.success(msg);
	                RouteService.goState('app.crm1810');
	            });
	        }
	    }, {
	        key: "loadInitData",
	        value: function loadInitData() {
	            var _this = this;

	            if (!this.m.cost_cat_id) {
	                return;
	            }
	            var param = {
	                cost_cat_id: this.m.cost_cat_id
	            };
	            var service = this.API.service('load-init', this.API.all('crm1811'));
	            service.post(param).then(function (response) {
	                _this.m.form = response.data.cost_cat;
	            });
	        }
	    }]);

	    return Crm1811Controller;
	}();

	var Crm1811Component = exports.Crm1811Component = {
	    //templateUrl: './views/app/components/crm1811/crm1811.component.html',
	    templateUrl: '/views/admin.crm1811',
	    controller: Crm1811Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 129 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1810Controller = function () {
	    Crm1810Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Crm1810Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm1810Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;

	        this.m = {
	            filter: {}
	        };
	    }

	    _createClass(Crm1810Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.crm1810;
	            this.loadInit();
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            this.doSearch(page);
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {}
	    }, {
	        key: 'search',
	        value: function search() {
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {};
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm1810'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;
	            sessionStorage.crm1810 = angular.toJson(param);

	            searchService.post(param).then(function (response) {
	                _this.m.data = response.plain().data;
	            });
	        }
	    }]);

	    return Crm1810Controller;
	}();

	var Crm1810Component = exports.Crm1810Component = {
	    //templateUrl: './views/app/components/crm1810/crm1810.component.html',
	    templateUrl: '/views/admin.crm1810',
	    controller: Crm1810Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 130 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Rpt0515Controller = function () {
	    Rpt0515Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Rpt0515Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Rpt0515Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;

	        this.m = {

	            filter: {},
	            dateOptions: {
	                // formatYear: 'yy',
	                startingDay: 1
	            }
	        };
	        this.m.filter.promotion_id = 1;
	        this.m.filter.start_date = new Date();
	        this.m.filter.end_date = new Date();
	        this.loadInitData();
	    }

	    _createClass(Rpt0515Controller, [{
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var _this = this;

	            var service = this.API.service('load-promotion', this.API.all('rpt0515'));
	            service.post().then(function (response) {
	                var promotionList = response.data.promotionList;
	                if (promotionList != null) {
	                    _this.m.listPromotion = promotionList;
	                }
	            });
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter(promotionId, activeFlag) {
	            this.m.filter = {};
	        }
	    }, {
	        key: 'choose',
	        value: function choose(tab) {
	            this.m.activeFlag = tab;
	        }
	    }, {
	        key: 'loadDataForSalesman',
	        value: function loadDataForSalesman(promotionId) {
	            var _this2 = this;

	            var param = angular.copy(this.m.filter);
	            var serviceSalesman = this.API.service('load-salesman', this.API.all('rpt0515'));
	            //this.$log.info('ahihi check promotion', param);

	            this.m[promotionId][1] = {};
	            serviceSalesman.post(param).then(function (response) {
	                _this2.m[promotionId][1].data = response.data;
	                //this.$log.info('result1', this.m);
	            });
	        }
	    }, {
	        key: 'loadDataForArea',
	        value: function loadDataForArea(promotionId) {
	            var _this3 = this;

	            var param = angular.copy(this.m.filter);
	            var serviceArea = this.API.service('load-area', this.API.all('rpt0515'));

	            this.m[promotionId][2] = {};
	            serviceArea.post(param).then(function (response) {
	                _this3.m[promotionId][2].data = response.data;
	                //this.$log.info('result1', this.m);
	            });
	        }
	    }, {
	        key: 'loadDataForProducts',
	        value: function loadDataForProducts(promotionId) {
	            var _this4 = this;

	            var param = angular.copy(this.m.filter);
	            var serviceSalesman = this.API.service('load-product', this.API.all('rpt0515'));
	            //this.$log.info('ahihi check promotion', param);

	            this.m[promotionId][4] = {};
	            serviceSalesman.post(param).then(function (response) {
	                _this4.m[promotionId][4].data = response.data;
	            });
	        }
	    }, {
	        key: 'loadDataForStores',
	        value: function loadDataForStores(promotionId) {
	            var _this5 = this;

	            var param = angular.copy(this.m.filter);
	            var serviceStore = this.API.service('load-store', this.API.all('rpt0515'));
	            //this.$log.info('ahihi check promotion', param);

	            this.m[promotionId][5] = {};
	            serviceStore.post(param).then(function (response) {
	                _this5.m[promotionId][5].data = response.data;
	            });
	        }
	    }, {
	        key: 'search',
	        value: function search(promotionId, activeFlag) {
	            if (this.m[promotionId] == null) {
	                this.m[promotionId] = {};
	            }
	            switch (activeFlag) {
	                case 1:
	                    this.loadDataForSalesman(promotionId);
	                    break;
	                case 2:
	                    this.loadDataForArea(promotionId);
	                    break;
	                case 3:
	                    this.loadDataForLevel(promotionId);
	                    break;
	                case 4:
	                    this.loadDataForProducts(promotionId);
	                    break;
	                case 5:
	                    this.loadDataForStores(promotionId);
	                    break;
	            }
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Rpt0515Controller;
	}();

	var Rpt0515Component = exports.Rpt0515Component = {
	    //templateUrl: './views/app/components/rpt0515/rpt0515.component.html',
	    templateUrl: '/views/admin.rpt0515',
	    controller: Rpt0515Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 131 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1710Controller = function () {
	    Crm1710Controller.$inject = ["$scope", "$state", "API", "$log", "UtilsService", "ClientService", "$stateParams", "RouteService"];
	    function Crm1710Controller($scope, $state, API, $log, UtilsService, ClientService, $stateParams, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Crm1710Controller);

	        this.$scope = $scope;
	        this.$state = $state;

	        this.$log = $log;

	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.RouteService = RouteService;
	        this.m = {
	            filter: {},
	            dateOptions: {

	                // formatYear: 'yy',
	                startingDay: 1
	            }
	        };

	        this.m.promotion_id = $stateParams.promotion_id;
	        if (this.m.promotion_id == null) {

	            this.m.filter.from_date = new Date();
	            this.m.filter.to_date = new Date();
	            this.m.filter.promotion_name = null;
	            this.m.filter.description = null;
	            this.m.filter.promotion_sts = 1;
	            this.m.filter.meta_data = null;
	        } else {
	            this.loadInitData();
	        }
	    }

	    _createClass(Crm1710Controller, [{
	        key: 'save',
	        value: function save() {

	            var $log = this.$log;
	            //$log.info('aihihihihi', this.m.filter);
	            var alerts = this.alerts;
	            var RouteService = this.RouteService;
	            var ClientService = this.ClientService;
	            // them check dk
	            var saveService = this.API.service('save', this.API.all('crm1710'));
	            var param = angular.copy(this.m.filter);

	            if (this.m.promotion_id == null) {
	                param.promotion_id = null;
	            } else {
	                param.promotion_id = this.m.promotion_id;
	            }

	            saveService.post(param).then(function (response) {

	                if (param.promotion_id == null) {
	                    ClientService.success('Thêm mới chương trình thành công');
	                } else {
	                    ClientService.success('Cập nhật chương trình thành công');
	                }

	                RouteService.goState('app.crm1700');
	            });
	        }
	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var _this = this;

	            var param = {

	                promotion_id: this.m.promotion_id
	            };
	            var log = this.$log;
	            log.info('param: ', param);
	            var service = this.API.service('load-init', this.API.all('crm1710'));
	            service.post(param).then(function (response) {
	                _this.m.init = response.data; //initiate list of bank account

	                log.info('init: ', _this.m.init);
	                if (_this.m.init.inforPromotion != null) {
	                    _this.m.filter.from_date = new Date(_this.m.init.inforPromotion[0].from_date);
	                    _this.m.filter.to_date = new Date(_this.m.init.inforPromotion[0].to_date);
	                    _this.m.filter.promotion_name = _this.m.init.inforPromotion[0].promotion_name;
	                    _this.m.filter.description = _this.m.init.inforPromotion[0].description;
	                    _this.m.filter.meta_data = _this.m.init.inforPromotion[0].meta_data;
	                    _this.m.filter.promotion_sts = _this.m.init.inforPromotion[0].promotion_sts.toString();
	                    _this.m.filter.promotion_type = _this.m.init.inforPromotion[0].promotion_type.toString();
	                }
	                log.info('filter: ', _this.m.filter);
	            });
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Crm1710Controller;
	}();

	var Crm1710Component = exports.Crm1710Component = {
	    //templateUrl: './views/app/components/crm1710/crm1710.component.html',
	    templateUrl: '/views/admin.crm1710',
	    controller: Crm1710Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 132 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1700Controller = function () {
	    Crm1700Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Crm1700Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm1700Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;

	        this.m = {
	            filter: {}

	        };
	    }

	    _createClass(Crm1700Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.crm1700;
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);
	            this.doSearch(1);
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm1700'));
	            var param = angular.copy(this.m.filter);
	            //param.down = 0;
	            param.page = page;

	            sessionStorage.crm1700 = angular.toJson(param);

	            searchService.post(param).then(function (response) {
	                _this.$log.info(_this.m.filter);
	                _this.m.data = response.plain().data;
	            });
	        }
	    }]);

	    return Crm1700Controller;
	}();

	var Crm1700Component = exports.Crm1700Component = {
	    //templateUrl: './views/app/components/crm1700/crm1700.component.html',
	    templateUrl: '/views/admin.crm1700',
	    controller: Crm1700Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 133 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0740Controller = function () {
	    Crm0740Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService"];
	    function Crm0740Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm0740Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;

	        this.m = {
	            order: {}
	        };
	        this.m.message = "";
	        this.m.store_order_id = $stateParams.store_order_id;
	        this.m.store_delivery_id = $stateParams.store_delivery_id;
	        this.m.canEdit = true;
	        this.loadInitData();
	    }

	    _createClass(Crm0740Controller, [{
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var _this = this;

	            // let $log = this.$log;

	            var param = {
	                store_order_id: this.m.store_order_id,
	                store_delivery_id: this.m.store_delivery_id
	            };

	            var service = this.API.service('load-init', this.API.all('crm0740'));
	            service.post(param).then(function (response) {
	                if (response.data.store != null) {
	                    _this.m.store = response.data.store;
	                }
	                _this.m.order.asked_money = parseInt(response.data.delivery.total_with_discount);
	                _this.m.orderDetail = response.data.orderDetail;
	                _this.$log.info('ahihi', _this.m.orderDetail);
	                _this.calcOrderTotal();
	            });
	        }
	    }, {
	        key: 'searchProduct',
	        value: function searchProduct() {
	            var _this2 = this;

	            var $log = this.$log;

	            //$log.info(this.m);

	            // Get list product 
	            var searchService = this.API.service('search-product', this.API.all('crm0740'));
	            var param = angular.copy(this.m.filter);

	            var thisClass = this;
	            searchService.post(param).then(function (response) {
	                var list = response.plain().data.list;
	                if (thisClass.m.orderDetail != null && thisClass.m.orderDetail.length > 0) {
	                    angular.forEach(list, function (value, key) {
	                        var hide = false;
	                        for (var i = 0; i < thisClass.m.orderDetail.length; i++) {
	                            if (thisClass.m.orderDetail[i].product_id == value.product_id) {
	                                hide = true;
	                                break;
	                            }
	                        }
	                        value.hide = hide;
	                    });
	                }

	                _this2.m.productList = list;
	                //this.$log.info('ahihi', this.m.productList);
	            });
	        }
	    }, {
	        key: 'addProduct',
	        value: function addProduct(product) {
	            if (this.m.orderDetail == null) {
	                this.m.orderDetail = [];
	            }

	            var newProduct = {
	                product_id: product.product_id,
	                product_code: product.product_code,
	                name: product.product_cat_name,
	                product_name: product.name,
	                standard_packing: product.standard_packing,
	                unit_price: parseInt(product.accountant_price),
	                balance: 0,
	                amount: 0,
	                version_no: 0
	            };

	            this.m.orderDetail.push(newProduct);
	            product.hide = true;
	            this.calcOrderTotal();
	        }
	    }, {
	        key: 'removeProduct',
	        value: function removeProduct(product) {
	            var index = this.m.orderDetail.indexOf(product);
	            if (index >= 0) {
	                this.m.orderDetail.splice(index, 1);
	                this.calcOrderTotal();

	                for (var i = 0; i < this.m.productList.length; i++) {
	                    if (this.m.productList[i].product_id == product.product_id) {
	                        this.m.productList[i].hide = false;
	                    }
	                }
	            }
	            this.calcOrderTotal();
	        }
	    }, {
	        key: 'calcOrderTotal',
	        value: function calcOrderTotal() {

	            var total = 0;
	            angular.forEach(this.m.orderDetail, function (value) {
	                total += parseFloat(value.unit_price) * parseFloat(value.amount);
	            });

	            this.m.order.result_money = total;
	        }
	    }, {
	        key: 'clickCreate',
	        value: function clickCreate() {
	            var _this3 = this;

	            this.m.message = "";
	            if (!this.m.order.asked_money) {
	                return;
	            }

	            if (this.m.orderDetail == null) {
	                this.m.message = "Chưa nhập danh sách sản phẩm ";
	                return;
	            }

	            for (var i = 0; i < this.m.orderDetail.length; i++) {
	                if (this.m.orderDetail[i].unit_price == 0) {
	                    this.m.message = "Sản phẩm " + this.m.orderDetail[i].product_code + " chưa có giá tiền";
	                    return;
	                }
	            }

	            for (var i = 0; i < this.m.orderDetail.length; i++) {
	                if (this.m.orderDetail[i].amount > this.m.orderDetail[i].balance) {
	                    this.m.message = "Sản phẩm " + this.m.orderDetail[i].product_code + " có tồn nhỏ hơn xuất";
	                    return;
	                }
	            }

	            var totalMoney = parseInt(this.m.order.asked_money);

	            var createService = this.API.service('create-one', this.API.all('crm0740'));
	            var param = {
	                orderDetail: this.m.orderDetail,
	                totalMoney: totalMoney
	            };
	            createService.post(param).then(function (response) {
	                _this3.m.orderDetail = response.plain().data.list;
	                _this3.calcOrderTotal();
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this4 = this;

	            var param = {
	                list: this.m.orderDetail
	            };
	            var service = this.API.service('download', this.API.all('crm0740'));

	            service.post(param).then(function (response) {
	                //this.$log.info(response.data);
	                _this4.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Crm0740Controller;
	}();

	var Crm0740Component = exports.Crm0740Component = {
	    //templateUrl: './views/app/components/crm0740/crm0740.component.html',
	    templateUrl: '/views/admin.crm0740',
	    controller: Crm0740Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 134 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1630Controller = function () {
	    Crm1630Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Crm1630Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Crm1630Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.RouteService = RouteService;
	        this.can = AclService.can;
	        this.m = {
	            importDetail: [],
	            infor: {},
	            importWhStore: {},
	            importWhFac: {},
	            form: {
	                publishDate: moment(),
	                file: null
	            },
	            formUpload: {
	                file: null,
	                images: []
	            }
	        };
	        this.m.isUploaded = false;
	        this.m.canEdit = true;
	        this.m.store_id = $stateParams.store_id;
	        this.m.supplier_delivery_id = $stateParams.supplier_delivery_id;
	        this.m.import_type = $stateParams.import_type;
	        this.m.type = $stateParams.type;

	        // 1 la lay thong so tu nhap hang tu nha may
	        // 2 la2 lay thong so nhap hang (bao hanh - tra lai) tu cua hang 
	        if (this.m.type != null) {
	            if (this.m.type == 1) {
	                this.m.import_wh_factory_id = $stateParams.import_wh_id;
	                this.m.form.id = this.m.import_wh_factory_id;
	            } else {
	                this.m.import_wh_store_id = $stateParams.import_wh_id;
	            }
	        }

	        // this.$log.info('ahihihi', this.m);

	    }

	    _createClass(Crm1630Controller, [{
	        key: "$onInit",
	        value: function $onInit() {

	            this._setupFileUpload("fileUpload", this.m.formUpload);
	            this.loadImageList();

	            this.chooseInit();
	        }
	    }, {
	        key: "_setupFileUpload",
	        value: function _setupFileUpload(fileControlId, formModel) {
	            var self = this;
	            var fileControl = angular.element("#" + fileControlId);
	            fileControl.on('change', function () {
	                var filesSelected = fileControl[0].files;
	                if (filesSelected.length > 0) {
	                    var fileToLoad = filesSelected[0];
	                    var fileReader = new FileReader();

	                    fileReader.onload = function (fileLoadedEvent) {
	                        var srcData = fileLoadedEvent.target.result; // <--- data: base64 
	                        self.$scope.$apply(function () {
	                            formModel.file = srcData;
	                        });
	                    };
	                    fileReader.readAsDataURL(fileToLoad);
	                }
	            });
	        }
	    }, {
	        key: "chooseInit",
	        value: function chooseInit() {
	            //TH1: Khoi tạo record tổng để thủ kho nhập kho (vào từ crm1600) tham số đầu vào: supplier_delivery_id
	            //TH2: Mở nhà máy (vào từ crm1640) tham số đầu vào: import_wh_fac_id
	            //TH3: Khoi tao bao hanh - nhap kho moi (vào từ crm0300) tham số đầu vào: store_id, import_type
	            //TH4: Mo bao hanh - nhap kho cu (vào từ crm1640) tham số đầu vào: import_wh_store_id
	            if (this.m.import_wh_factory_id == null && this.m.import_wh_store_id == null) {

	                if (this.m.import_type == null || this.m.import_type <= 0) {
	                    this.ClientService.warning("Vui lòng chọn cửa hàng");
	                    this.RouteService.goState("app.crm0300");
	                    return;
	                }
	                this.loadInitData(3);
	            } else if (this.m.import_wh_factory_id != null && this.m.import_wh_store_id == null) {

	                this.loadInitData(1);
	            } else if (this.m.import_wh_store_id != null && this.m.import_wh_factory_id == null) {
	                this.m.canEdit = false;
	                this.loadInitData(4);
	            }
	        }
	    }, {
	        key: "loadInitData",
	        value: function loadInitData(type) {
	            var _this = this;

	            var $log = this.$log;
	            var param = {
	                store_id: this.m.store_id,
	                supplier_delivery_id: this.m.supplier_delivery_id,
	                import_wh_store_id: this.m.import_wh_store_id,
	                import_wh_factory_id: this.m.import_wh_factory_id,
	                type: type
	            };

	            var service = this.API.service('load-init', this.API.all('crm1630'));
	            service.post(param).then(function (response) {
	                if (response.data.store != null) {
	                    _this.m.infor.store = response.data.store;
	                }
	                if (response.data.supplier != null) {
	                    _this.m.infor.supplier = response.data.supplier[0];
	                }
	                _this.m.requestList = response.data.requestList;
	                if (response.data.importWhStore != null) {
	                    _this.m.importWhStore = response.data.importWhStore;
	                    _this.m.import_type = _this.m.importWhStore.import_type;
	                    _this.m.store_id = _this.m.importWhStore.store_id;
	                    _this.m.importDetail = response.data.importDetail;
	                    _this.m.warehouse_id = _this.m.importWhStore.warehouse_id;
	                    _this.m.notes = _this.m.importWhStore.notes;
	                }

	                if (response.data.importWhFac != null) {
	                    _this.m.importWhFac = response.data.importWhFac;
	                    _this.m.importDetail = response.data.importDetail;
	                    _this.m.infor.supplier = response.data.supplier;
	                    _this.m.warehouse_id = _this.m.importWhFac.warehouse_id;
	                    _this.m.notes = _this.m.importWhFac.notes;

	                    if (_this.m.importWhFac.active_flg == 1) {
	                        _this.m.canEdit = false;
	                    }
	                }
	                _this.m.warehouseList = response.data.warehouseList;
	                //$log.info('ahihi test response', this.m);
	            });
	        }
	    }, {
	        key: "searchProduct",
	        value: function searchProduct() {
	            // Get list product 
	            var searchService = this.API.service('search-product', this.API.all('crm1630'));
	            var param = angular.copy(this.m.filter);
	            var thisClass = this;
	            var $log = this.$log;
	            searchService.post(param).then(function (response) {
	                var list = response.plain().data.list;
	                //$log.info('product search ', list);
	                angular.forEach(list, function (value, key) {
	                    var hide = false;
	                    for (var i = 0; i < thisClass.m.importDetail.length; i++) {
	                        if (thisClass.m.importDetail[i].product_id == value.product_id) {
	                            hide = true;
	                            break;
	                        }
	                    }
	                    value.hide = hide;
	                });
	                thisClass.m.productList = list;
	            });
	        }
	    }, {
	        key: "addProduct",
	        value: function addProduct(product) {
	            if (this.m.importDetail == null) {
	                this.m.importDetail = [];
	            }
	            var newProduct = {
	                product_id: product.product_id,
	                product_code: product.product_code,
	                name: product.product_cat_name,
	                stock_code: product.stock_code,
	                product_name: product.name,
	                standard_packing: product.standard_packing,
	                product_cat_id: product.product_cat_id,
	                unit_price: product.selling_price,
	                length: product.length,
	                width: product.width,
	                height: product.height,
	                packaging: product.packaging,
	                amount: 0,
	                store_order_id: 0,
	                version_no: 0

	            };
	            this.m.importDetail.push(newProduct);
	            product.hide = true;
	            //this.calcOrderTotal();
	        }
	    }, {
	        key: "removeProduct",
	        value: function removeProduct(product) {
	            var index = this.m.importDetail.indexOf(product);
	            if (index >= 0) {
	                this.m.importDetail.splice(index, 1);
	                //this.calcOrderTotal();
	                for (var i = 0; i < this.m.productList.length; i++) {
	                    if (this.m.productList[i].product_id == product.product_id) {
	                        this.m.productList[i].hide = false;
	                    }
	                }
	            }
	            //this.calcOrderTotal();
	        }
	    }, {
	        key: "clickSave",
	        value: function clickSave() {
	            var detail = [];
	            var that = this;
	            if (that.m.warehouse_id == null) {
	                that.ClientService.error("Vui lòng chọn kho.");
	                return;
	            }

	            swal({
	                title: "Bạn có muốn lưu lại lần nhập hàng này",
	                text: "Sau khi bấm nút lưu sẽ không chỉnh sửa được nữa. Lưu ý vui lòng chọn kho để nhập chính xác.",
	                type: "warning",
	                showCancelButton: true,
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                angular.forEach(that.m.importDetail, function (value, key) {
	                    detail.push({
	                        product_id: value.product_id,
	                        amount: value.amount
	                    });
	                });
	                var salesman_id;

	                if (that.m.infor.store == null) {
	                    salesman_id = null;
	                } else {
	                    salesman_id = that.m.infor.store.salesman_id;
	                }

	                var param = {
	                    mode: 'SAVE',
	                    import_type: that.m.import_type,
	                    notes: that.m.notes,
	                    warehouse_id: that.m.warehouse_id,
	                    store_id: that.m.store_id,
	                    detail: detail,
	                    salesman_id: salesman_id,
	                    supplier_delivery_id: that.m.supplier_delivery_id,
	                    import_wh_store_id: that.m.importWhStore.import_wh_store_id,
	                    import_wh_factory_id: that.m.importWhFac.import_wh_factory_id
	                };
	                //this.$log.info('param', param);
	                var service = that.API.service('save', that.API.all('crm1630'));
	                service.post(param).then(function (response) {
	                    //this.$log.info('response.data', response.data);
	                    that.ClientService.success("Lưu thành công");
	                    that.RouteService.goState("app.crm1640");
	                });
	            });
	        }

	        /*
	         * send request import this product to warehouse on portal
	         * type : 1 - fac, 2 - store
	         */

	    }, {
	        key: "requestImport",
	        value: function requestImport() {
	            var _this2 = this;

	            //  check this is valid request by checking 2 type of id.
	            if (!this.m.import_wh_factory_id && !this.m.import_wh_store_id) {
	                return;
	            }
	            // For import store if confirm amount is larger than original amount than don't create request import
	            if (this.m.import_wh_store_id) {
	                for (var i = 0; i < this.m.importDetail.length; i++) {
	                    if (this.m.importDetail[i].amountImport == null || this.m.importDetail[i].amountImport < 0 || this.m.importDetail[i].amountImport > this.m.importDetail[i].amount) {
	                        this.ClientService.error("Dữ liệu không hợp lệ");
	                        return;
	                    }
	                }
	            }

	            var $log = this.$log;
	            var param = {
	                detail: this.m.importDetail,
	                infoStore: this.m.importWhStore,
	                warehouse_id: this.m.warehouse_id,
	                infoFac: this.m.importWhFac,
	                type: this.m.type, // 1 - fac , 2 - store
	                import_type: this.m.import_type // 1- nhap bao hanh, 2- nhap tra lai
	            };
	            //$log.info('param request', param);
	            var service = this.API.service('request-import', this.API.all('crm1630'));
	            service.post(param).then(function (response) {
	                var res = response.plain().data;
	                if (res.sts == true) {
	                    _this2.ClientService.success(res.msg);
	                } else {
	                    _this2.ClientService.error(res.msg);
	                }
	                _this2.chooseInit();
	            });
	        }
	    }, {
	        key: "accept",
	        value: function accept(item) {
	            var that = this;
	            //this.$log.debug(item);
	            swal({
	                title: "Bạn có muốn chấp nhận yêu cầu này?",
	                text: "",
	                type: "input",
	                showCancelButton: true,
	                closeOnConfirm: true,
	                inputPlaceholder: "Lý do"
	            }, function (inputValue) {
	                if (inputValue === false) return false;
	                if (inputValue === "") {
	                    swal.showInputError("You need to write something!");
	                    return false;
	                }

	                var param = {
	                    request_id: item.request_id,
	                    notes: inputValue,
	                    detail: that.m.importDetail
	                };

	                var service = that.API.service('accept', that.API.all('crm1630'));
	                service.post(param).then(function (res) {
	                    if (res.data.rtnCd == true) {
	                        that.ClientService.success(res.data.msg);
	                        that.loadInitData();
	                        // that.search();
	                    } else {
	                        that.ClientService.error(res.data.msg);
	                    }
	                    that.chooseInit();
	                });
	            });
	        }
	    }, {
	        key: "deny",
	        value: function deny(item) {
	            var that = this;
	            //this.$log.debug(item);
	            swal({
	                title: "Bạn có muốn từ chối yêu cầu này?",
	                text: "",
	                type: "input",
	                showCancelButton: true,
	                closeOnConfirm: true,
	                inputPlaceholder: "Lý do",
	                confirmButtonColor: "#DD6B55"
	            }, function (inputValue) {
	                if (inputValue === false) return false;
	                if (inputValue === "") {
	                    swal.showInputError("You need to write something!");
	                    return false;
	                }

	                var param = {
	                    request_id: item.request_id,
	                    notes: inputValue
	                };

	                var service = that.API.service('deny', that.API.all('crm1630'));
	                service.post(param).then(function (res) {
	                    if (res.data.rtnCd == true) {
	                        that.ClientService.success(res.data.msg);
	                        that.chooseInit();
	                        // that.search();
	                    } else {
	                        that.ClientService.error(res.data.msg);
	                    }
	                });
	            });
	        }
	    }, {
	        key: "upload",
	        value: function upload() {
	            var self = this;
	            var service = this.API.service('upload', this.API.all('crm1630'));

	            if (self.m.isUploaded == true) {
	                swal("Đang xử lý!");
	                return;
	            }

	            self.m.isUploaded = true;
	            var param = {
	                id: this.m.form.id,
	                file: this.m.formUpload.file
	            };

	            if (param.id > 0) {
	                service.post(param).then(function (response) {
	                    if (response.data.rtnCd == true) {
	                        self.m.formUpload.file = null;
	                        self.ClientService.success('Thêm chứng từ nhập hàng thành công');
	                        self.loadImageList();
	                    } else {
	                        self.ClientService.error('Không thể thêm hình ảnh');
	                    }
	                    self.m.isUploaded = false;
	                });
	            }
	        }
	    }, {
	        key: "loadImageList",
	        value: function loadImageList() {
	            var self = this;
	            var param = {
	                id: this.m.form.id
	            };

	            if (param.id > 0) {
	                var service = this.API.service('load-images', this.API.all('crm1630'));

	                service.post(param).then(function (response) {
	                    if (response.data.rtnCd == true) {
	                        self.m.formUpload.images = response.data.list;
	                    } else {
	                        self.ClientService.error('Có lỗi khi tải hình ảnh');
	                    }
	                });
	            }
	        }
	    }]);

	    return Crm1630Controller;
	}();

	var Crm1630Component = exports.Crm1630Component = {
	    //templateUrl: './views/app/components/crm1630/crm1630.component.html',
	    templateUrl: '/views/admin.crm1630',
	    controller: Crm1630Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 135 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1640Controller = function () {
	    Crm1640Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService"];
	    function Crm1640Controller($scope, $state, $compile, $log, AclService, API, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm1640Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.ClientService = ClientService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.m = {
	            activeFlag: 1,
	            1: {
	                filter: {},
	                data: {}
	            },
	            2: {
	                filter: {},
	                data: {}
	            },
	            download: [0, 0]
	            //this.loadInit();
	        };
	    }

	    _createClass(Crm1640Controller, [{
	        key: 'resetFilter',
	        value: function resetFilter(index) {
	            if (index < 1 || index > 2) {
	                return;
	            }
	            this.m[index].filter = {};
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(index, page) {
	            var _this = this;

	            var param = angular.copy(this.m[index].filter);

	            param.page = page;
	            param.index = index;
	            sessionStorage.crm1640 = angular.toJson(param);
	            this.m.download[index - 1] = 1;

	            // let $log = this.$log;
	            // $log.info('check param', param);
	            var searchService = this.API.service('search', this.API.all('crm1640'));
	            searchService.post(param).then(function (response) {
	                _this.m.init = response.plain().data;
	                _this.m[_this.m.init.index].data = _this.m.init.data;
	                _this.m.warehouseList = _this.m.init.warehouseList;
	                // $log.info('check response', this.m);
	            });
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit(index, page) {
	            var _this2 = this;

	            var loadService = this.API.service('load-init', this.API.all('crm1640'));
	            var param = angular.copy(this.m.filter);

	            loadService.post(param).then(function (response) {
	                _this2.m.supplierList = response.plain().data.supplierList;
	                _this2.doSearch(index, page);
	            });
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.crm1640;
	            if (angular.isUndefined(previousSearch)) {
	                this.doSearch(1, 1);
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;
	            var index = previousSearch.index;
	            this.m.activeFlag = index;
	            delete previousSearch['page'];
	            delete previousSearch['index'];
	            this.m[index].filter = angular.copy(previousSearch);
	            this.loadInit(index, page);
	        }
	    }, {
	        key: 'choose',
	        value: function choose(index) {
	            var $log = this.$log;
	            if (index < 1 || index > 2) {
	                return;
	            }
	            this.m.activeFlag = index;
	            //$log.info('check choose outside', this.m.download);
	            if (this.m.download[index - 1] == 0) {
	                //$log.info('check choose inside', index);
	                this.doSearch(index, 1);
	            }
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this3 = this;

	            var param = angular.copy(this.m[2].filter);
	            var service = this.API.service('download', this.API.all('crm1640'));
	            service.post(param).then(function (response) {
	                //this.$log.info(response.data);
	                _this3.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Crm1640Controller;
	}();

	var Crm1640Component = exports.Crm1640Component = {
	    //templateUrl: './views/app/components/crm1640/crm1640.component.html',
	    templateUrl: '/views/admin.crm1640',
	    controller: Crm1640Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 136 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1650Controller = function () {
	    Crm1650Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService"];
	    function Crm1650Controller($scope, $state, $compile, $log, AclService, API, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm1650Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.m = {};
	        this.loadInit();
	    }

	    _createClass(Crm1650Controller, [{
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm1650'));
	            var $log = this.$log;
	            searchService.post({}).then(function (response) {
	                var list = response.plain().data;

	                _this.m.list = list;
	                //$log.info('list ahihi', this.m);
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this2 = this;

	            var param = {
	                data: this.m.list
	            };
	            var service = this.API.service('download', this.API.all('crm1650'));
	            service.post(param).then(function (response) {
	                //this.$log.info(response.data);
	                _this2.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Crm1650Controller;
	}();

	var Crm1650Component = exports.Crm1650Component = {
	    //templateUrl: './views/app/components/crm1650/crm1650.component.html',
	    templateUrl: '/views/admin.crm1650',
	    controller: Crm1650Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 137 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0240Controller = function () {
	    Crm0240Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Crm0240Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm0240Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;

	        this.m = {
	            activeFlag: 1,
	            1: {
	                filter: {},
	                data: {}
	            },
	            2: {
	                filter: {},
	                data: {}
	            },
	            3: {
	                filter: {},
	                data: {}
	            },
	            4: {
	                filter: {},
	                data: {}
	            }
	        };
	    }

	    _createClass(Crm0240Controller, [{
	        key: 'resetFilter',
	        value: function resetFilter(index) {
	            if (index < 1 || index > 3) {
	                return;
	            }
	            this.m[index].filter = {};
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.crm0240;
	            if (angular.isUndefined(previousSearch)) {
	                this.doSearch(1, 1);
	                return;
	            }
	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;
	            var index = previousSearch.index;
	            this.m.activeFlag = index;
	            delete previousSearch['page'];
	            delete previousSearch['index'];
	            this.m[index].filter = angular.copy(previousSearch);
	            this.doSearch(index, page);
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(index, page) {
	            var self = this;

	            // Get list product 
	            var searchService = self.API.service('search', this.API.all('crm0240'));
	            var param = angular.copy(this.m[index].filter);

	            param.page = page;
	            param.index = index;
	            sessionStorage.crm0240 = angular.toJson(param);

	            searchService.post(param).then(function (response) {
	                self.m.init = response.plain().data;
	                self.$log.info(response);
	                // self.m.order = response.plain().data.order;
	                self.m[index].data = self.m.init.data;
	            });
	        }
	    }, {
	        key: 'choose',
	        value: function choose(number) {
	            this.m.activeFlag = number;
	            this.doSearch(number, 1);
	        }
	    }]);

	    return Crm0240Controller;
	}();

	var Crm0240Component = exports.Crm0240Component = {
	    //templateUrl: './views/app/components/crm0240/crm0240.component.html',
	    templateUrl: '/views/admin.crm0240.crm0240',
	    controller: Crm0240Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 138 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Cms0220Controller = function () {
	    Cms0220Controller.$inject = ["$scope", "$stateParams", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService", "RouteService"];
	    function Cms0220Controller($scope, $stateParams, $state, $compile, $log, AclService, API, UtilsService, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Cms0220Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.RouteService = RouteService;
	        this.m = {
	            form: {}
	        };

	        this.loadData(1);
	    }

	    _createClass(Cms0220Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var self = this;
	            var fileControl = angular.element("#file");
	            fileControl.on('change', function () {
	                var filesSelected = fileControl[0].files;
	                if (filesSelected.length > 0) {
	                    var fileToLoad = filesSelected[0];
	                    var fileReader = new FileReader();
	                    fileReader.onload = function (fileLoadedEvent) {
	                        var srcData = fileLoadedEvent.target.result; // <--- data: base64 
	                        self.$log.info('srcData', srcData);
	                        self.$scope.$apply(function () {
	                            self.m.form.file = srcData;
	                            self.$log.info('self.m.form.file', self.m.form.file);
	                        });
	                    };
	                    fileReader.readAsDataURL(fileToLoad);
	                }
	            });
	        }
	    }, {
	        key: 'loadData',
	        value: function loadData(page) {
	            var _this = this;

	            // let self = this;
	            var service = this.API.service('load', this.API.all('cms0220'));
	            var param = angular.copy(this.m.form);
	            param.page = page;
	            this.$log.info('param:', param);
	            service.post(param).then(function (response) {
	                _this.m.data = response.plain().data.data;
	                _this.$log.info("data", _this.m.data);
	            });
	        }
	    }, {
	        key: 'remove',
	        value: function remove($file_path) {
	            var $log = this.$log;
	            var thisClass = this;
	            var service = this.API.service('remove', this.API.all('cms0220'));
	            this.m.form.file_path = $file_path;
	            var param = angular.copy(this.m.form);
	            this.$log.info('param:', param);
	            swal({
	                title: 'Are you sure?',
	                text: 'You will not be able to recover this data!',
	                type: 'warning',
	                showCancelButton: true,
	                confirmButtonColor: '#DD6B55',
	                confirmButtonText: 'Yes, delete it!',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                service.post(param).then(function (response) {
	                    $log.info("data", thisClass.m.data);
	                    // $state.reload();
	                    thisClass.ClientService.success('Xóa hình ảnh tin tức thành công');
	                    thisClass.loadData();
	                    thisClass.RouteService.goState('app.cms0220');
	                });
	            });
	        }
	    }, {
	        key: 'upload',
	        value: function upload(isValid) {
	            var thisClass = this;
	            var $state = this.$state;
	            if (isValid) {
	                thisClass.$log.info('send');
	                var service = this.API.service('upload', this.API.all('cms0220'));
	                var param = angular.copy(this.m.form);
	                service.post(param).then(function (response) {

	                    if (response.data.rtnCd == true) {
	                        // thisClass.$log.info('response', response);
	                        // $state.reload();
	                        thisClass.m.form.file = null;
	                        thisClass.ClientService.success('Thêm hình ảnh tin tức thành công');
	                        thisClass.loadData();
	                        thisClass.RouteService.goState('app.cms0220');
	                    } else {
	                        // thisClass.m.form.file = null;
	                        thisClass.ClientService.error('Tên file bị trùng');
	                        thisClass.loadData();
	                        thisClass.RouteService.goState('app.cms0220');
	                    }
	                });
	            } else {
	                this.formSubmitted = true;
	            }
	        }
	    }]);

	    return Cms0220Controller;
	}();

	var Cms0220Component = exports.Cms0220Component = {
	    //templateUrl: './views/app/components/cms0220/cms0220.component.html',
	    templateUrl: '/views/admin.cms0220',
	    controller: Cms0220Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 139 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0913Controller = function () {
	    Crm0913Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService", "$stateParams"];
	    function Crm0913Controller($scope, $state, $compile, $log, AclService, API, UtilsService, ClientService, $stateParams) {
	        'ngInject';

	        _classCallCheck(this, Crm0913Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.can = AclService.can;
	        this.ClientService = ClientService;

	        this.m = {
	            is_check: false,
	            filter: {
	                check_date: moment()
	            },
	            list: null,
	            datetimepicker_options: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            },
	            mode: 0, // 0: watch, 1: confirm
	            title: "Watch mode",
	            warehouseCheck: {}
	        };
	        this.m.isConfirm = false;
	        // if ($stateParams.checkingDate != null) {
	        //     this.m.filter.check_date = moment($stateParams.checkingDate).format('YYYY-MM-DD');
	        //     this.m.filter.check_id = $stateParams.checkingId;
	        // }
	        if ($stateParams.check_warehouse_id != null) {
	            this.m.filter.check_warehouse_id = $stateParams.check_warehouse_id;
	            this.m.mode = 1;
	        }
	        if (this.m.mode == 1) {
	            this.m.title = "Comfirming mode";
	        }
	        this.onInit();
	    }

	    _createClass(Crm0913Controller, [{
	        key: 'onInit',
	        value: function onInit() {
	            this.loadInit();
	        }
	    }, {
	        key: 'calcWarehousePrice',
	        value: function calcWarehousePrice() {
	            var sum = 0;
	            if (this.m.list != null) {
	                angular.forEach(this.m.list, function (item) {
	                    //this.m.count.warehouse++;
	                    if (item.end_num > 0) {
	                        sum += parseInt(item.selling_price) * parseInt(item.end_num);
	                    }
	                });
	            }
	            this.m.sumWarehouse = sum;
	        }
	    }, {
	        key: 'calcWarehouseVol',
	        value: function calcWarehouseVol() {
	            var sum = 0;
	            var sum_cart = 0;

	            //this.m.count.warehouse = 0;
	            if (this.m.list != null) {
	                angular.forEach(this.m.list, function (item) {
	                    //this.m.count.warehouse++;
	                    if (item.end_num > 0) {
	                        sum += parseFloat(item.volume) * parseFloat(item.end_num) / parseFloat(item.standard_packing);
	                        sum_cart += parseFloat(item.end_num) / parseFloat(item.standard_packing);
	                    }
	                });
	            }

	            this.m.sumWarehouseVol = parseFloat(sum);
	            this.m.sumWarehouseCart = parseFloat(sum_cart);
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var loadService = this.API.service('load-init', this.API.all('crm0913'));
	            var param = angular.copy(this.m.filter);

	            loadService.post(param).then(function (response) {
	                _this.$log.info(response);
	                _this.m.init = response.plain().data;
	                _this.m.init.warehouseCheck = response.plain().data.warehouseCheck[0];
	                if (_this.m.init.warehouseCheck) {
	                    _this.m.filter.check_date = moment(_this.m.init.warehouseCheck.check_date).format('YYYY-MM-DD');
	                    _this.m.filter.warehouse_id = _this.m.init.warehouseCheck.warehouse_id;
	                    // this.$log.info('check ',this.m);
	                }

	                _this.search();
	            });
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                check_date: moment(new Date().toISOString()),
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this2 = this;

	            // let $log = this.$log;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm0913'));
	            var param = angular.copy(this.m.filter);
	            this.$log.info('filter:', this.m.filter);
	            this.$log.info('param 1:', param);
	            this.$log.info('this m:', this.m);

	            if (angular.isUndefined(param.check_date) || param.check_date == null || param.check_date == '') {
	                param.check_date = moment(new Date().toISOString()).format('YYYY-MM-DD');
	                this.$log.info('yes', this.m.mode);
	            } else {
	                param.check_date = moment(param.check_date).format('YYYY-MM-DD');
	                this.$log.info('no', this.m.mode);
	            }

	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;
	            // this.$log.info('param 2:',param); 

	            searchService.post(param).then(function (response) {
	                _this2.$log.info(response);
	                var list = response.plain().data.data;
	                // angular.forEach(list, function(item) {
	                //     item.end_num = parseInt(item.start_num) - parseInt(item.out_num) - parseInt(item.out_num_edit) + parseInt(item.in_num) + parseInt(item.in_num_edit);
	                // });
	                _this2.m.is_check = response.plain().data.is_check;
	                _this2.$log.info("check", _this2.m.is_check);
	                _this2.m.list = list;
	                _this2.calcWarehouseVol();
	                _this2.calcWarehousePrice();
	            });
	        }
	    }, {
	        key: 'save',
	        value: function save() {
	            var $log = this.$log;
	            var ClientService = this.ClientService;
	            var self = this;

	            $log.info('send');
	            var crm0913Service = this.API.service('save', this.API.all('crm0913'));
	            // let param = [];
	            // angular.forEach(self.m.list, function(item) {
	            //     param.push({
	            //         notes: item.notes
	            //     });
	            // });

	            var param = [];
	            angular.forEach(self.m.list, function (item) {
	                param.push({
	                    check_id: item.check_id,
	                    product_id: item.product_id,
	                    notes: item.notes
	                });
	            });

	            $log.info('param', param);
	            crm0913Service.post(param).then(function () {
	                // if (self.m.checkWarehouseId > 0) {
	                ClientService.success('Lưu ghi chú thành công');
	                // } else {
	                //     ClientService.success('Lưu ghi chi thất bại');
	                // }
	            });
	        }
	    }, {
	        key: 'confirmWarehouse',
	        value: function confirmWarehouse() {

	            if (this.m.mode != 1) {
	                return;
	            }

	            var self = this;
	            this.m.canEdit = false;
	            swal({
	                title: "Bạn có muốn xác nhận lần kiểm kho này?",
	                text: "Sau khi xác nhận hệ thống sẽ tự động điều chỉnh chênh lệch cho kho tương ứng.",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                if (self.m.isConfirm) {
	                    self.ClientService.warning('đang xử lý');
	                    return;
	                }
	                self.m.isConfirm = true;
	                //this.$log.info('check confirm');
	                var param = angular.copy(self.m.filter);
	                param.check_date = param.check_date.format('YYYY-MM-DD');
	                var service = self.API.service('confirm-warehouse', self.API.all('crm0913'));
	                service.post(param).then(function (response) {
	                    if (response.data.status) {
	                        self.ClientService.success('Xác nhận tồn kho thành công' + response.data.num + ' sự thay đổi');
	                    } else {
	                        self.ClientService.error(response.data.msg);
	                    }
	                    self.search();
	                    self.m.isConfirm = false;
	                });
	            });
	        }
	    }]);

	    return Crm0913Controller;
	}();

	var Crm0913Component = exports.Crm0913Component = {
	    //templateUrl: './views/app/components/crm0913/crm0913.component.html',
	    templateUrl: '/views/admin.crm0913',
	    controller: Crm0913Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Crm0321Component = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _crm = __webpack_require__(141);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0321Controller = function () {
	    Crm0321Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$filter", "DialogService"];
	    function Crm0321Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $filter, DialogService) {
	        'ngInject';

	        _classCallCheck(this, Crm0321Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.DialogService = DialogService;
	        this.$filter = $filter;

	        this.m = {
	            init: {},
	            filter: {
	                // month: moment()
	            },
	            data: {},
	            header: [],
	            datetimepicker_options: {
	                viewMode: 'months',
	                format: 'YYYY-MM'
	            }
	        };
	    }

	    _createClass(Crm0321Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.init();
	        }
	    }, {
	        key: 'init',
	        value: function init() {
	            var _this = this;

	            // Get list product 
	            var searchService = this.API.service('init', this.API.all('crm0321'));

	            searchService.post({}).then(function (response) {
	                _this.m.init = response.plain().data;
	                _this.search();
	            });
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            this.$log.info("this.m.filter", angular.copy(this.m.filter));
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.$log.info("orderOption", angular.copy(orderOption));
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            this.m.showChart = false;

	            var thisClass = this;
	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm0321'));
	            var param = angular.copy(this.m.filter);

	            if (param.month != null && param.month != "") {
	                param.month = param.month.format('YYYY-MM');
	            }

	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;
	            this.$log.info('param', param);
	            searchService.post(param).then(function (response) {
	                thisClass.m.data = response.plain().data;

	                if (thisClass.m.data.length > 0) {
	                    thisClass.m.header = thisClass.m.data[0].items;
	                    // thisClass.draw(thisClass.m.data[0]);
	                } else {
	                    thisClass.m.header = [];
	                }
	            });
	        }
	    }, {
	        key: 'draw',
	        value: function draw(_item) {
	            var modalOption = {
	                size: 'dialog-1024',
	                controller: _crm.Crm0321DialogController,
	                resolve: {
	                    item: function item() {
	                        return _item;
	                    }
	                }
	            };
	            this.DialogService.open('crm0321_chart', modalOption);
	        }
	    }]);

	    return Crm0321Controller;
	}();

	var Crm0321Component = exports.Crm0321Component = {
	    //templateUrl: './views/app/components/Crm0321/Crm0321.component.html',
	    templateUrl: '/views/admin.crm0321',
	    controller: Crm0321Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 141 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0321DialogController = exports.Crm0321DialogController = function () {
	    Crm0321DialogController.$inject = ["$scope", "$uibModalInstance", "DialogService", "$log", "$filter", "item"];
	    function Crm0321DialogController($scope, $uibModalInstance, DialogService, $log, $filter, item) {
	        'ngInject';

	        _classCallCheck(this, Crm0321DialogController);

	        this.$scope = $scope;
	        this.$log = $log;
	        this.DialogService = DialogService;
	        this.$uibModalInstance = $uibModalInstance;

	        this.m = {
	            msg: 'this is my model  2. StoreDialogController 11 22 33',
	            item: item,
	            amChartOptions: {
	                "type": "serial",
	                "theme": "light",
	                "dataDateFormat": "YYYY-MM",
	                "precision": 2,
	                "valueAxes": [{
	                    "id": "v1",
	                    "title": "Số tiền",
	                    "position": "left",
	                    "autoGridCount": false,
	                    "labelFunction": function labelFunction(value) {
	                        return "VND" + $filter('currency')(Math.round(value / 1000000), '', 0) + "M";
	                    }
	                }, {
	                    "id": "v2",
	                    "title": "Cấp",
	                    "gridAlpha": 0,
	                    "position": "right",
	                    "autoGridCount": false,
	                    "reversed": true
	                }],
	                "numberFormatter": {
	                    "precision": -1,
	                    "decimalSeparator": ",",
	                    "thousandsSeparator": ""
	                },
	                "graphs": [{
	                    "id": "g3",
	                    "valueAxis": "v1",
	                    // "lineColor": "#88A236",
	                    // "fillColors": "#88A236",
	                    "fillAlphas": 0.5,
	                    "type": "smoothedLine",
	                    "title": "Đặt hàng",
	                    "valueField": "order_total",
	                    "clustered": false,
	                    "columnWidth": 5,
	                    "legendValueText": "VND[[value]]",
	                    // "balloonText": "[[title]]<br /><b style='font-size: 130%'>$[[value]]M</b>",
	                    "balloonFunction": function balloonFunction(graphDataItem, graph) {
	                        var value = "<b>" + graph.title + "</b>: " + $filter('currency')(graphDataItem.values.value, '', 0);
	                        return value;
	                    }
	                }, {
	                    "id": "g4",
	                    "valueAxis": "v1",
	                    // "lineColor": "#4E9231",
	                    // "fillColors": "#4E9231",
	                    "fillAlphas": 0.5,
	                    "type": "smoothedLine",
	                    "title": "Đặt hàng (Sau CK)",
	                    "valueField": "order_total_with_discount",
	                    "clustered": false,
	                    "columnWidth": 4,
	                    "legendValueText": "$[[value]]M",
	                    // "balloonText": "[[title]]<br /><b style='font-size: 130%'>$[[value]]M</b>"
	                    "balloonFunction": function balloonFunction(graphDataItem, graph) {
	                        var value = "<b>" + graph.title + "</b>: " + $filter('currency')(graphDataItem.values.value, '', 0);
	                        return value;
	                    }
	                }, {
	                    "id": "g5",
	                    "valueAxis": "v1",
	                    // "lineColor": "#9F3548",
	                    // "fillColors": "#9F3548",
	                    "fillAlphas": 0.5,
	                    "type": "column",
	                    "title": "Giao hàng",
	                    "valueField": "delivery_total",
	                    "clustered": false,
	                    "columnWidth": 3,
	                    "legendValueText": "$[[value]]M",
	                    // "balloonText": "[[title]]<br /><b style='font-size: 130%'>$[[value]]M</b>"
	                    "balloonFunction": function balloonFunction(graphDataItem, graph) {
	                        var value = "<b>" + graph.title + "</b>: " + $filter('currency')(graphDataItem.values.value, '', 0);
	                        return value;
	                    }
	                }, {
	                    "id": "g6",
	                    "valueAxis": "v1",
	                    // "lineColor": "#7D2A68",
	                    // "fillColors": "#7D2A68",
	                    "fillAlphas": 0.5,
	                    "type": "column",
	                    "title": "Giao hàng (Sau CK)",
	                    "valueField": "delivery_total_with_discount",
	                    "clustered": false,
	                    "columnWidth": 2,
	                    "legendValueText": "",
	                    // "balloonText": "[[title]]<br /><b style='font-size: 130%'>$[[value]]M</b>"
	                    "balloonFunction": function balloonFunction(graphDataItem, graph) {
	                        var value = "<b>" + graph.title + "</b>: " + $filter('currency')(graphDataItem.values.value, '', 0);
	                        return value;
	                    }
	                }, {
	                    "id": "g7",
	                    "valueAxis": "v2",
	                    "bullet": "round",
	                    "bulletBorderAlpha": 1,
	                    "bulletColor": "#FFFFFF",
	                    "bulletSize": 5,
	                    "reversed": true,
	                    "hideBulletsCount": 50,
	                    "lineThickness": 2,
	                    "lineColor": "#FF7400",
	                    "type": "smoothedLine",
	                    "dashLength": 5,
	                    "title": "Cấp",
	                    "useLineColorForBulletBorder": true,
	                    "valueField": "store_rank",
	                    "legendValueText": "[[value]]",
	                    // "balloonText": "[[title]]<br /><b style='font-size: 130%'>[[value]]</b>",
	                    "balloonFunction": function balloonFunction(graphDataItem, graph) {
	                        var value = "<b>" + graph.title + "</b>: " + graphDataItem.values.value;
	                        return value;
	                    }
	                }],
	                "chartScrollbar": {
	                    "graph": "g1",
	                    "oppositeAxis": false,
	                    "offset": 30,
	                    "scrollbarHeight": 50,
	                    "backgroundAlpha": 0,
	                    "selectedBackgroundAlpha": 0.1,
	                    "selectedBackgroundColor": "#888888",
	                    "graphFillAlpha": 0,
	                    "graphLineAlpha": 0.5,
	                    "selectedGraphFillAlpha": 0,
	                    "selectedGraphLineAlpha": 1,
	                    "autoGridCount": true,
	                    "color": "#AAAAAA"
	                },
	                "chartCursor": {
	                    "pan": true,
	                    "valueLineEnabled": true,
	                    "valueLineBalloonEnabled": true,
	                    "cursorAlpha": 0,
	                    "valueLineAlpha": 0.2
	                },
	                "categoryField": "date",
	                "categoryAxis": {
	                    "parseDates": true,
	                    "dashLength": 1,
	                    "minorGridEnabled": true
	                },
	                "legend": {
	                    "useGraphSettings": true,
	                    "position": "top"
	                },
	                "balloon": {
	                    "borderThickness": 1,
	                    "shadowAlpha": 0
	                },
	                "export": {
	                    "enabled": true
	                }
	            }
	        };

	        this.loadChart();
	    }

	    _createClass(Crm0321DialogController, [{
	        key: 'loadChart',
	        value: function loadChart() {
	            // this.m.showChart = true;
	            var copy = angular.copy(this.m.amChartOptions);
	            copy.dataProvider = this.m.item.items;
	            this.m.amChartOptions = null;
	            this.m.amChartOptions = copy;

	            this.$scope.$broadcast('amCharts.updateData', this.m.item.items, 'myFirstChart');
	        }
	    }, {
	        key: 'cancel',
	        value: function cancel() {
	            this.DialogService.close();
	        }
	    }]);

	    return Crm0321DialogController;
	}();

/***/ }),
/* 142 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0140Controller = function () {
	    Crm0140Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Crm0140Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm0140Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.can = AclService.can;

	        this.m = {
	            filter: {},
	            form: {},
	            list: {}
	        };
	    }

	    _createClass(Crm0140Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            // this.load();
	            this.loadInit();
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var service = this.API.service('load-init', this.API.all('crm0140'));
	            service.post().then(function (response) {
	                _this.m.filter.supplier_id = 1;
	                _this.m.listSupplier = response.plain().data.listSupplier;
	                _this.load();
	            });
	        }
	    }, {
	        key: 'load',
	        value: function load() {
	            var _this2 = this;

	            console.log('this.m.form.supplier_id :>> ', this.m.filter.supplier_id);
	            var param = {
	                supplier_id: this.m.filter.supplier_id
	            };
	            var service = this.API.service('load', this.API.all('crm0140'));
	            service.post(param).then(function (response) {
	                _this2.m.list = response.plain().data.listPrice;
	                _this2.m.form = response.plain().data;
	                _this2.$log.info('this.m.list', _this2.m.list);
	                _this2.$log.info('response:', response.plain().data);
	                _this2.$log.info('this.m.form', _this2.m.form.crm_price_list);
	            });
	        }
	    }, {
	        key: 'save',
	        value: function save() {
	            var _this3 = this;

	            var service = this.API.service('save', this.API.all('crm0140'));
	            var param = this.m.form;
	            this.$log.info('param', param);
	            param.supplier_id = this.m.filter.supplier_id;
	            service.post(param).then(function (response) {
	                _this3.m.list = response.plain().data.listPrice;
	                _this3.m.form = response.plain().data;
	                _this3.$log.info('response:', response.plain().data);
	                _this3.$log.info('this.m.list', _this3.m.list);
	                _this3.$log.info('this.m.form', _this3.m.form.crm_price_list);
	                // this.ClientService.success(this.$translate.instant('MSG_I000003'));
	            });
	        }
	    }, {
	        key: 'clickPrint',
	        value: function clickPrint(dir) {
	            var _this4 = this;

	            var param = angular.copy(this.m.list);
	            param.dir = dir;
	            this.$log.info('param', param);
	            var service = this.API.service('print', this.API.all('crm0140'));
	            service.post(param).then(function (res) {
	                if (res.data.rtnCd == true) {
	                    window.open(res.data.url);
	                } else {
	                    _this4.ClientService.error('Không tải được tập tin.');
	                }
	            });
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.load();
	        }
	    }]);

	    return Crm0140Controller;
	}();

	var Crm0140Component = exports.Crm0140Component = {
	    //templateUrl: './views/app/components/crm0140/crm0140.component.html',
	    templateUrl: '/views/admin.crm0140',
	    controller: Crm0140Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 143 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Adm0110Controller = function () {
	    Adm0110Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Adm0110Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Adm0110Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.RouteService = RouteService;

	        this.m = {
	            form: {}
	        };
	    }

	    _createClass(Adm0110Controller, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }, {
	        key: 'save',
	        value: function save(isValid) {
	            var thisClass = this;

	            if (isValid) {
	                var service = this.API.service('adm0110');
	                var param = angular.copy(this.m.form);

	                service.post(param).then(function (response) {
	                    thisClass.$log.info('response', response);
	                    thisClass.ClientService.success('Thêm mới người dùng thành công');
	                    thisClass.RouteService.goState('app.userlist');
	                });
	            } else {
	                this.formSubmitted = true;
	            }
	        }
	    }]);

	    return Adm0110Controller;
	}();

	var Adm0110Component = exports.Adm0110Component = {
	    //templateUrl: './views/app/components/adm0110/adm0110.component.html',
	    templateUrl: '/views/admin.adm0110',
	    controller: Adm0110Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 144 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0130Controller = function () {
	    Hrm0130Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Hrm0130Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0130Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;

	        this.m = {
	            filter: {
	                year: moment()
	            },
	            data: null,
	            datetimepicker_options: {
	                viewMode: 'years',
	                format: 'YYYY'
	            }
	        };
	    }

	    _createClass(Hrm0130Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.init();
	        }
	    }, {
	        key: 'init',
	        value: function init() {
	            var _this = this;

	            var $log = this.$log;
	            var searchService = this.API.service('init', this.API.all('hrm0130'));
	            searchService.post({}).then(function (response) {
	                _this.m.init = response.plain().data;
	                _this.setInitData(response.data);
	                $log.info('this.m.init: ', _this.m.init);
	                _this.search();
	            });
	        }
	    }, {
	        key: 'setInitData',
	        value: function setInitData(data) {
	            this.m.init = data;
	            if (this.m.init.listYear != null && this.m.init.listYear.length > 0) {
	                this.m.filter.year = this.m.init.listYear[0].year;
	            } else {
	                this.m.filter.year = new Date().getFullYear();
	            }
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;
	            this.search(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this2 = this;

	            var $log = this.$log;
	            var searchService = this.API.service('search', this.API.all('hrm0130'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;
	            $log.info('filter', param);
	            searchService.post(param).then(function (response) {
	                // this.m.data = response.plain().data;
	                _this2.m.data = _this2.convertData(response.data.data_1);
	                _this2.m.data_2 = _this2.convertData(response.data.data_2);
	                _this2.m.data_3 = _this2.convertData(response.data.data_3);
	                $log.info('this.m.data', _this2.m.data);
	            });
	        }
	    }, {
	        key: 'convertData',
	        value: function convertData(data) {
	            var result = [];
	            angular.forEach(data, function (item, index) {
	                var curItem = null;
	                for (var i = 0; i < result.length; i++) {
	                    if (result[i].user_id == item.user_id) {
	                        curItem = result[i];
	                        break;
	                    }
	                }
	                if (curItem == null) {
	                    curItem = {
	                        user_id: item.user_id,
	                        user_name: item.user_name,
	                        t1: 0,
	                        t2: 0,
	                        t3: 0,
	                        t4: 0,
	                        t5: 0,
	                        t6: 0,
	                        t7: 0,
	                        t8: 0,
	                        t9: 0,
	                        t10: 0,
	                        t11: 0,
	                        t12: 0,
	                        total: 0
	                    };
	                    result.push(curItem);
	                }
	                var monthKey = 't' + item.month;
	                curItem[monthKey] = item.amount;
	                curItem['total'] = curItem['total'] + curItem[monthKey];
	            });

	            return result;
	        }
	    }]);

	    return Hrm0130Controller;
	}();

	var Hrm0130Component = exports.Hrm0130Component = {
	    //templateUrl: './views/app/components/hrm0130/hrm0130.component.html',
	    templateUrl: '/views/admin.hrm0130',
	    controller: Hrm0130Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 145 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0230Controller = function () {
	    Crm0230Controller.$inject = ["$scope", "$state", "$compile", "API", "$log", "UtilsService", "AclService", "ClientService", "$stateParams"];
	    function Crm0230Controller($scope, $state, $compile, API, $log, UtilsService, AclService, ClientService, $stateParams) {
	        'ngInject';

	        _classCallCheck(this, Crm0230Controller);

	        this.API = API;
	        this.$scope = $scope;
	        this.$state = $state;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.can = AclService.can;
	        this.$compile = $compile;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.m = {
	            init: {},
	            filter: {},
	            list: null,
	            datetimepicker_options: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Crm0230Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.init();
	        }
	    }, {
	        key: 'init',
	        value: function init() {
	            var _this = this;

	            // Get list product 
	            var searchService = this.API.service('init', this.API.all('crm0230'));

	            searchService.post({}).then(function (response) {
	                _this.m.init = response.plain().data;

	                if (_this.$stateParams.store_id != null) {
	                    _this.m.filter.storeId = _this.$stateParams.store_id;
	                    _this.search();
	                } else {
	                    var previousSearch = sessionStorage.crm0230;

	                    if (angular.isDefined(previousSearch)) {
	                        previousSearch = angular.fromJson(previousSearch);
	                        var page = previousSearch.page;
	                        delete previousSearch['page'];
	                        _this.m.filter = angular.copy(previousSearch);
	                        _this.doSearch(page);
	                    }
	                }
	            });
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.search(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this2 = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm0230'));
	            var param = angular.copy(this.m.filter);

	            if (param.start_date) {
	                param.start_date = moment(param.start_date).format('YYYY-MM-DD');
	            }

	            if (param.end_date) {
	                param.end_date = moment(param.end_date).format('YYYY-MM-DD');
	            }

	            param.page = page;
	            sessionStorage.crm0230 = angular.toJson(param);

	            searchService.post(param).then(function (response) {
	                _this2.m.data = response.plain().data;
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this3 = this;

	            var service = this.API.service('download', this.API.all('crm0230'));
	            var param = angular.copy(this.m.filter);
	            service.post(param).then(function (response) {
	                _this3.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Crm0230Controller;
	}();

	var Crm0230Component = exports.Crm0230Component = {
	    //templateUrl: './views/app/components/crm0230/crm0230.component.html',
	    templateUrl: '/views/admin.crm0230',
	    controller: Crm0230Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 146 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0231Controller = function () {
	    Crm0231Controller.$inject = ["$scope", "$state", "$compile", "DTOptionsBuilder", "DTColumnBuilder", "API", "$log", "UtilsService", "AclService", "ClientService", "$stateParams"];
	    function Crm0231Controller($scope, $state, $compile, DTOptionsBuilder, DTColumnBuilder, API, $log, UtilsService, AclService, ClientService, $stateParams) {
	        'ngInject';

	        _classCallCheck(this, Crm0231Controller);

	        this.API = API;
	        this.$scope = $scope;
	        this.$state = $state;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.can = AclService.can;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.m = {
	            init: {},
	            filter: {},
	            list: null,
	            datetimepicker_options: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Crm0231Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.init();
	        }
	    }, {
	        key: 'init',
	        value: function init() {
	            var _this = this;

	            var $log = this.$log;
	            // Get list product 
	            var searchService = this.API.service('init', this.API.all('crm0231'));
	            searchService.post({}).then(function (response) {
	                _this.m.init = response.plain().data;
	                // this.search();
	                if (_this.$stateParams.store_id != null) {
	                    _this.m.filter.storeId = _this.$stateParams.store_id;
	                    _this.search();
	                } else {
	                    var previousSearch = sessionStorage.crm0231;

	                    if (angular.isDefined(previousSearch)) {
	                        previousSearch = angular.fromJson(previousSearch);
	                        var page = previousSearch.page;
	                        delete previousSearch['page'];
	                        _this.m.filter = angular.copy(previousSearch);
	                        _this.doSearch(page);
	                    }
	                }
	            });
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.search(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this2 = this;

	            var $log = this.$log;
	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm0231'));
	            var param = angular.copy(this.m.filter);

	            if (param.start_date) {
	                param.start_date = moment(param.start_date).format('YYYY-MM-DD');
	            }

	            if (param.end_date) {
	                param.end_date = moment(param.end_date).format('YYYY-MM-DD');
	            }

	            param.page = page;
	            sessionStorage.crm0231 = angular.toJson(param);

	            //param.pageSize = $scope.m.paginationInfo.pageSize;
	            searchService.post(param).then(function (response) {
	                _this2.m.data = response.plain().data;
	                $log.debug('this.m.data', _this2.m.data);
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this3 = this;

	            var param = angular.copy(this.m.filter);
	            var service = this.API.service('download', this.API.all('crm0231'));
	            service.post(param).then(function (response) {
	                _this3.$log.info(response.data);
	                _this3.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Crm0231Controller;
	}();

	var Crm0231Component = exports.Crm0231Component = {
	    //templateUrl: './views/app/components/crm0231/crm0231.component.html',
	    templateUrl: '/views/admin.crm0231',
	    controller: Crm0231Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 147 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1620Controller = function () {
	    Crm1620Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Crm1620Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm1620Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.can = AclService.can;

	        this.m = {
	            filter: {},
	            init: {}
	            // this.search();
	        };this.loadInit();
	    }

	    _createClass(Crm1620Controller, [{
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var loadService = this.API.service('load-init', this.API.all('crm1620'));
	            var param = angular.copy(this.m.filter);

	            loadService.post(param).then(function (response) {
	                _this.m.init = response.plain().data;
	                _this.search();
	            });
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this2 = this;

	            var $log = this.$log;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm1620'));
	            var param = angular.copy(this.m.filter);

	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;

	            searchService.post(param).then(function (response) {
	                $log.info(response);
	                _this2.m.list = response.data;
	            });
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Crm1620Controller;
	}();

	var Crm1620Component = exports.Crm1620Component = {
	    //templateUrl: './views/app/components/crm1620/crm1620.component.html',
	    templateUrl: '/views/admin.crm1620',
	    controller: Crm1620Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 148 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0340Controller = function () {
	    Crm0340Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "ClientService", "API", "UtilsService"];
	    function Crm0340Controller($scope, $state, $compile, $log, AclService, ClientService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm0340Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.m = {
	            init: {},
	            form: {},
	            cart: {},
	            result: {}
	        };

	        this.loadInitData();
	    }

	    _createClass(Crm0340Controller, [{
	        key: 'loadInitData',
	        value: function loadInitData() {
	            this.init();
	            var $log = this.$log;
	            var service = this.API.service('load', this.API.all('crm0340'));
	            // let $state = this.$state;
	            var param = {};
	            var that = this;
	            service.post(param).then(function (response) {
	                that.m.init = response.data; // init area1List, area2List and userList
	                $log.info('check load init', that.m.init);
	            });
	        }
	    }, {
	        key: 'init',
	        value: function init() {
	            this.m.form.saleman_id = null;
	            this.m.form.start_date = null;
	            this.m.form.end_date = null;
	            this.m.form.area1 = null;
	            this.m.form.area2 = null;
	            this.m.form.store_list = null;
	            // 1: close, -1: open
	            this.m.openTable1 = 1; // init table 1 close
	            this.m.openTable2 = 1; // init table 2 close
	            //this.m.error.table2 = "";
	            this.m.form.store_type = 3;
	            this.m.form.assignment_status = 2;
	        }
	    }, {
	        key: 'choose',
	        value: function choose(type) {
	            // if opening table 1 then closing table 2 and opposite
	            if (type == 1) {
	                this.m.openTable1 = this.m.openTable1 * -1;
	                this.m.openTable2 = 1;
	            } else if (type == 2) {
	                this.m.openTable2 = this.m.openTable2 * -1;
	                this.m.openTable1 = 1;
	            }
	        }
	    }, {
	        key: 'assignUser',
	        value: function assignUser() {
	            var $log = this.$log;
	            if (this.m.cart == {}) {
	                return;
	            }
	            var assignService = this.API.service('assign', this.API.all('crm0340'));
	            var param = {
	                saleman_id: this.m.form.saleman_id,
	                cart: this.m.cart,
	                store_list: this.m.form.store_list,
	                openTable1: this.m.openTable1,
	                openTable2: this.m.openTable2
	            };

	            //$log.info('param assignUser', param);
	            var that = this;
	            assignService.post(param).then(function (response) {
	                var data = response.data;
	                that.m.result = data;
	                //$log.info('result assignUser', data);
	                if (data.status == 1) {
	                    that.ClientService.success('Thay đổi nhân viên thành công.');
	                } else {
	                    that.ClientService.error('Thay đổi nhân viên không thành công. Vui lòng kiểm tra lại.');
	                }
	            });
	        }
	    }, {
	        key: 'mergeStore',
	        value: function mergeStore() {
	            if (!this.m.form.store_id_valid || !this.m.form.store_id_fake) {
	                return;
	            }
	            var assignService = this.API.service('merge', this.API.all('crm0340'));
	            var param = {
	                store_valid: this.m.form.store_id_valid,
	                store_fake: this.m.form.store_id_fake
	            };
	            var that = this;
	            assignService.post(param).then(function (response) {
	                var data = response.data;
	                if (data.status == 1) {
	                    that.ClientService.success('Merge thành công.');
	                } else {
	                    that.ClientService.error('Merge không thành công. Vui lòng kiểm tra lại.');
	                }
	            });
	        }
	    }, {
	        key: 'addProvince',
	        value: function addProvince() {
	            var id = this.m.form.area1;
	            var listArea = this.m.init.areaList;
	            var cart = this.m.cart;
	            //this.$log.info('check cart', cart);
	            angular.forEach(listArea, function (value, key) {
	                if (value.area_id == id) {
	                    cart[id] = value;
	                }
	            });
	            this.m.cart = cart;
	            //this.$log.info('check', this.m.cart);
	        }
	    }, {
	        key: 'emptyProvince',
	        value: function emptyProvince() {
	            this.m.cart = {};
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Crm0340Controller;
	}();

	var Crm0340Component = exports.Crm0340Component = {
	    //templateUrl: './views/app/components/crm0340/crm0340.component.html',
	    templateUrl: '/views/admin.crm0340',
	    controller: Crm0340Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 149 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0140Controller = function () {
	    Hrm0140Controller.$inject = ["$scope", "$state", "API", "$log", "UtilsService", "ClientService"];
	    function Hrm0140Controller($scope, $state, API, $log, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0140Controller);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.m = {
	            filter: {},
	            list: null,
	            datetimepicker_options: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Hrm0140Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.init();
	        }
	    }, {
	        key: 'init',
	        value: function init() {
	            var _this = this;

	            var searchService = this.API.service('init', this.API.all('hrm0140'));

	            searchService.post({}).then(function (response) {
	                _this.m.init = response.plain().data;
	                _this.search();
	            });
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this2 = this;

	            var $log = this.$log;
	            var searchService = this.API.service('search', this.API.all('hrm0140'));
	            var param = angular.copy(this.m.filter);

	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;

	            searchService.post(param).then(function (response) {
	                _this2.$log.info("RESPONSE", response);
	                _this2.m.list = response.plain().data;
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this3 = this;

	            var param = angular.copy(this.m.filter);
	            var service = this.API.service('download', this.API.all('hrm0140'));

	            service.post(param).then(function (response) {
	                _this3.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Hrm0140Controller;
	}();

	var Hrm0140Component = exports.Hrm0140Component = {
	    //templateUrl: './views/app/components/hrm0140/hrm0140.component.html',
	    templateUrl: '/views/admin.hrm0140',
	    controller: Hrm0140Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 150 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0141Controller = function () {
	    Crm0141Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Crm0141Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm0141Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;

	        this.m = {
	            form: {},
	            list: {}
	        };
	    }

	    _createClass(Crm0141Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.load();
	        }
	    }, {
	        key: 'load',
	        value: function load() {
	            var _this = this;

	            var service = this.API.service('load', this.API.all('crm0140'));
	            service.post().then(function (response) {
	                _this.m.list = response.plain().data.listPrice;
	                _this.m.form = response.plain().data;
	                _this.$log.info('this.m.list', _this.m.list);
	                _this.$log.info('response:', response.plain().data);
	                _this.$log.info('this.m.form', _this.m.form.crm_price_list);
	            });
	        }
	    }]);

	    return Crm0141Controller;
	}();

	var Crm0141Component = exports.Crm0141Component = {
	    //templateUrl: './views/app/components/crm0141/crm0141.component.html',
	    templateUrl: '/views/admin.crm0141',
	    controller: Crm0141Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Crm0720Component = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _crm = __webpack_require__(152);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0720Controller = function () {
	    Crm0720Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService", "DialogService"];
	    function Crm0720Controller($scope, $state, $compile, $log, AclService, API, UtilsService, ClientService, DialogService) {
	        'ngInject';

	        _classCallCheck(this, Crm0720Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.can = AclService.can;
	        this.ClientService = ClientService;
	        this.DialogService = DialogService;

	        this.m = {
	            total: {},
	            filter: {
	                month: moment()
	            },
	            list: null,
	            // new_list: null,
	            // old_list: null,
	            datetimepicker_options: {
	                viewMode: 'months',
	                format: 'YYYY-MM'
	            },
	            infor: {}
	        };
	    }

	    _createClass(Crm0720Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.loadInit();
	            this.search();
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                month: moment(),
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var service = this.API.service('load-promotion', this.API.all('crm0720'));
	            service.post().then(function (response) {
	                var salesmanList = response.data.salesmanList;
	                if (salesmanList != null) {
	                    _this.m.listSalesman = salesmanList;
	                }
	            });
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this2 = this;

	            // let $log = this.$log;
	            var searchService = this.API.service('search', this.API.all('crm0720'));
	            var param = angular.copy(this.m.filter);
	            var thisClass = this;

	            if (angular.isUndefined(param.month) || param.month == null || param.month == '') {
	                param.month = moment().format('YYYY-MM');
	            } else {
	                param.month = param.month.format('YYYY-MM');
	            }

	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;

	            searchService.post(param).then(function (response) {
	                var list = response.plain().data.data;
	                list.data.forEach(function (item) {
	                    item.remain_lastmonth = parseInt(item.total_with_discount_lastmonth) - parseInt(item.payment_lastmonth);
	                    item.edit_thismonth = parseInt(item.payment_plus_thismonth) + parseInt(item.payment_minus_thismonth);
	                    item.remain = item.remain_lastmonth + parseInt(item.total_with_discount_thismonth) - parseInt(item.payment_thismonth) - parseInt(item.payment_plus_thismonth) - parseInt(item.payment_minus_thismonth);
	                });
	                _this2.m.list = list;

	                var resultSummary = response.plain().data.summary;
	                resultSummary.payment_lastmonth = parseInt(resultSummary.payment_lastmonth);
	                resultSummary.payment_minus_thismonth = parseInt(resultSummary.payment_minus_thismonth);
	                resultSummary.payment_plus_thismonth = parseInt(resultSummary.payment_plus_thismonth);
	                resultSummary.payment_thismonth = parseInt(resultSummary.payment_thismonth);
	                resultSummary.total_lastmonth = parseInt(resultSummary.total_lastmonth);
	                resultSummary.total_thismonth = parseInt(resultSummary.total_thismonth);
	                resultSummary.total_with_discount_lastmonth = parseInt(resultSummary.total_with_discount_lastmonth);
	                resultSummary.total_with_discount_thismonth = parseInt(resultSummary.total_with_discount_thismonth);

	                var summary = resultSummary;

	                console.log('resultSummary :>> ', resultSummary);
	                summary.remain_lastmonth = resultSummary.total_with_discount_lastmonth - resultSummary.payment_lastmonth;
	                summary.edit_thismonth = resultSummary.payment_plus_thismonth + resultSummary.payment_minus_thismonth;
	                summary.remain = summary.remain_lastmonth + resultSummary.total_with_discount_thismonth - resultSummary.payment_thismonth - resultSummary.payment_plus_thismonth - resultSummary.payment_minus_thismonth;

	                _this2.m.summary = summary;
	                console.log('this.m.summary :>> ', _this2.m.summary);
	                _this2.reCalculation(list);
	            });
	        }
	    }, {
	        key: 'reCalculation',
	        value: function reCalculation(list) {
	            var payment = 0;
	            var lastmonth = 0;
	            var thismonth = 0;
	            var discountThismonth = 0;
	            var remain = 0;
	            list.data.forEach(function (item) {
	                payment += parseInt(item.payment_thismonth);
	                lastmonth += parseInt(item.remain_lastmonth);
	                thismonth += parseInt(item.total_thismonth);
	                discountThismonth += parseInt(item.total_with_discount_thismonth);
	                remain += parseInt(item.remain);
	            });
	            this.m.total.payment = payment;
	            this.m.total.lastmonth = lastmonth;
	            this.m.total.thismonth = thismonth;
	            this.m.total.discountThismonth = discountThismonth;
	            this.m.total.remain = remain;
	        }
	    }, {
	        key: 'showInfoOfStore',
	        value: function showInfoOfStore(data, item) {
	            var $log = this.$log;
	            var param = {
	                item: item,
	                data: data
	            };
	            $log.info('check', param);
	            var modalOption = {
	                size: 'dialog-768',
	                controller: _crm.Crm0720DialogController,
	                resolve: {
	                    param: param
	                }
	            };

	            this.DialogService.open('crm0720_dialog', modalOption);
	        }
	    }, {
	        key: 'detailInfor',
	        value: function detailInfor(item) {
	            var _this3 = this;

	            var modalOption = void 0;
	            var DialogClose = void 0;
	            var that = this;
	            var param = {
	                store_id: item.store_id
	            };

	            if (this.m.infor[item.store_id] == null) {
	                var getInfoService = this.API.service('get-info', this.API.all('crm0720'));
	                getInfoService.post(param).then(function (response) {
	                    if (response.plain().data == null) {
	                        return;
	                    }
	                    _this3.m.infor[item.store_id] = response.plain().data;
	                    _this3.showInfoOfStore(_this3.m.infor[item.store_id], item);
	                });
	            } else {
	                this.showInfoOfStore(this.m.infor[item.store_id], item);
	            }
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this4 = this;

	            var param = angular.copy(this.m.filter);

	            if (angular.isUndefined(param.month) || param.month == null || param.month == '') {
	                param.month = moment(new Date().toISOString()).format('YYYY-MM');
	            } else {
	                param.month = param.month.format('YYYY-MM');
	            }

	            var service = this.API.service('download', this.API.all('crm0720'));
	            service.post(param).then(function (response) {
	                _this4.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Crm0720Controller;
	}();

	var Crm0720Component = exports.Crm0720Component = {
	    //templateUrl: './views/app/components/crm0720/crm0720.component.html',
	    templateUrl: '/views/admin.crm0720',
	    controller: Crm0720Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 152 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0720DialogController = exports.Crm0720DialogController = function () {
	    Crm0720DialogController.$inject = ["$scope", "$uibModalInstance", "DialogService", "$log", "$filter", "param"];
	    function Crm0720DialogController($scope, $uibModalInstance, DialogService, $log, $filter, param) {
	        'ngInject';

	        _classCallCheck(this, Crm0720DialogController);

	        this.$scope = $scope;
	        this.$log = $log;
	        this.DialogService = DialogService;
	        this.$uibModalInstance = $uibModalInstance;
	        this.$log.info('dialog param', param);
	        this.m = {
	            item: param.item,
	            data: param.data.delivery,
	            AVG: param.data.AVG,
	            detail: 1
	        };
	    }

	    _createClass(Crm0720DialogController, [{
	        key: 'showDetail',
	        value: function showDetail() {
	            this.m.detail = this.m.detail * -1;
	        }
	    }, {
	        key: 'cancel',
	        value: function cancel() {

	            this.DialogService.close();
	        }
	    }]);

	    return Crm0720DialogController;
	}();

/***/ }),
/* 153 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1610Controller = function () {
	    Crm1610Controller.$inject = ["$scope", "$state", "$compile", "DTOptionsBuilder", "DTColumnBuilder", "$log", "ClientService", "AclService", "API", "UtilsService", "RouteService", "$stateParams"];
	    function Crm1610Controller($scope, $state, $compile, DTOptionsBuilder, DTColumnBuilder, $log, ClientService, AclService, API, UtilsService, RouteService, $stateParams) {
	        'ngInject';

	        _classCallCheck(this, Crm1610Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.RouteService = RouteService;
	        this.ClientService = ClientService;
	        this.m = {
	            delivery: {},
	            init: {},
	            deliveryDetail: [],
	            form: {},
	            dateOptions: {
	                viewMode: 'days',
	                format: 'YYYY-MM-dd'
	            }
	        };

	        this.m.canEdit = true;
	        this.m.check_status = [1, 1, 1, 1, 1, 1, 1, 1, 1];
	        this.m.supplier_delivery_id = $stateParams.supplier_delivery_id;
	        this.m.supplier_order_id = $stateParams.supplier_order_id;

	        this.m.test = [0, 0, 0, 0]; // using to check valid input forms in thanh toan 1
	        this.m.testForm = [0, 0, 0, 0, 0, 0, 0]; // using to check valid input forms about information of delivery 

	        // this.$log.info('ahihi form init', this.m.testForm);
	        if (this.m.supplier_delivery_id == null) {
	            this.m.form.supplier_delivery_id = 0;
	        }

	        if (this.m.supplier_order_id == null || this.m.supplier_order_id <= 0) {
	            //$log.info(this.m);
	            this.ClientService.warning("Vui lòng chọn packing list invoice");
	            RouteService.goState("app.crm1600");
	            return;
	        }

	        this.loadInitData();
	    }

	    _createClass(Crm1610Controller, [{
	        key: 'choose',
	        value: function choose(index) {
	            var $log = this.$log;
	            this.m.check_status[index] = -1 * this.m.check_status[index];
	            //$log.info('check_status', this.m);
	        }
	    }, {
	        key: 'makeNotificationConfirm',
	        value: function makeNotificationConfirm(index) {
	            var str = "Lưu ngày ";
	            if (index == 1) str = str + "thanh toán lần 1 ";
	            if (index == 2) str = str + "sản xuất xong ";
	            if (index == 3) str = str + "bắt đầu vận chuyển từ Malaysia ";
	            if (index == 4) str = str + "hàng đến cảng ";
	            if (index == 5) str = str + "nhập kho ";
	            if (index == 5) str = str + "thanh toán lần 2 ";
	            str = str + "thành công";
	            return str;
	        }
	    }, {
	        key: 'checkValidForm1',
	        value: function checkValidForm1() {

	            var oke = true;
	            var msg = "";
	            if (this.m.form.contract_no == null || this.m.form.contract_no == "") {
	                this.m.test[0] = 1;
	                msg = "Chưa nhập mã hợp đồng ";
	                oke = false;
	            } else {
	                this.m.test[0] = 0;
	            }
	            if (this.m.form.payment_1_percent == null || this.m.form.payment_1_percent == "") {
	                this.m.test[1] = 1;
	                oke = false;
	                msg = msg + "Chưa nhập % thanh toán lần 1 ";
	            } else {
	                this.m.test[1] = 0;
	            }
	            if (this.m.form.payment_2_duration == null || this.m.form.payment_2_duration == "") {
	                this.m.test[2] = 1;
	                oke = false;
	                msg = msg + "Chưa nhập thời hạn thanh toán lần 2 ";
	            } else {
	                this.m.test[2] = 0;
	            }
	            if (!oke) {
	                this.ClientService.error(msg);
	            }
	            return oke;
	        }
	    }, {
	        key: 'checkValidForm2',
	        value: function checkValidForm2() {

	            var oke = true;
	            if (this.m.form.payment_desc == null || this.m.form.payment_desc == "") {
	                this.m.test[3] = 1;
	                oke = false;
	            } else {
	                this.m.test[3] = 0;
	            }

	            return oke;
	        }
	    }, {
	        key: 'checkValidForm3',
	        value: function checkValidForm3() {
	            var $log = this.$log;
	            //$log.info('check form ', this.m.form);
	            var oke = true;
	            if (this.m.form.rate == null || this.m.form.rate == "") {
	                this.m.testForm[0] = 1;
	                oke = false;
	            } else {
	                this.m.testForm[0] = 0;
	            }

	            if (this.m.form.vat_tax == null) {
	                this.m.testForm[2] = 1;
	                oke = false;
	            } else {
	                if (this.m.form.vat_tax > 100 || this.m.form.vat_tax < 0) {
	                    this.m.testForm[2] = 1;
	                    oke = false;
	                } else {
	                    this.m.testForm[2] = 0;
	                }
	            }
	            if (this.m.form.frieght_cost == null || this.m.form.frieght_cost < 0) {
	                this.m.testForm[3] = 1;
	                oke = false;
	                //$log.info('check frieght  ', this.m.form.frieght_cost);
	            } else {
	                this.m.testForm[3] = 0;
	            }
	            if (this.m.form.landed_cost == null || this.m.form.landed_cost < 0) {
	                this.m.testForm[4] = 1;
	                oke = false;
	            } else {
	                this.m.testForm[4] = 0;
	            }
	            if (this.m.form.insurance_cost == null || this.m.form.insurance_cost < 0) {
	                this.m.testForm[5] = 1;
	                oke = false;
	                // $log.info('check insurance_cost  ', this.m.form.insurance_cost);
	            } else {
	                this.m.testForm[5] = 0;
	            }
	            if (this.m.form.pi_no == null || this.m.form.pi_no == "") {
	                this.m.testForm[6] = 1;
	                oke = false;
	            } else {
	                this.m.testForm[6] = 0;
	            }

	            return oke;
	        }
	    }, {
	        key: 'checkValidForm2',
	        value: function checkValidForm2() {

	            var oke = true;
	            if (this.m.form.payment_desc == null || this.m.form.payment_desc == "") {
	                this.m.test[3] = 1;
	                oke = false;
	            } else {
	                this.m.test[3] = 0;
	            }

	            return oke;
	        }
	    }, {
	        key: 'checkValidForm5',
	        value: function checkValidForm5() {

	            var oke = true;
	            var msg = "";
	            if (this.m.form.warehouse_id == null || this.m.form.warehouse_id == "") {
	                msg = "Vui lòng chọn kho để nhập.";
	                oke = false;
	            }

	            if (!oke) {
	                this.ClientService.error(msg);
	            }
	            return oke;
	        }
	    }, {
	        key: 'confirm',
	        value: function confirm(index) {
	            var $log = this.$log;

	            //$log.info('ahihi', param);

	            if (index == 1 && !this.checkValidForm1()) {
	                return;
	            }

	            if (index == 5 && !this.checkValidForm5()) {
	                return;
	            }

	            var detail = [];
	            var that = this;
	            swal({
	                title: "Bạn có muốn xác nhận",
	                text: "Sau khi bấm nút xác nhận sẽ không chỉnh sửa được nữa. Lưu ý sau khi chọn kho nhập và đồng ý bạn sẽ không thể điều chỉnh được nữa.",
	                type: "warning",
	                showCancelButton: true,
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var param = {
	                    index: index,
	                    form: that.m.form
	                };
	                var confirmService = that.API.service('confirm', that.API.all('crm1610'));
	                confirmService.post(param).then(function (response) {
	                    that.init_confirm = response.data;

	                    //$log.info('response confirm: ', this.init_confirm);
	                    that.m.form.delivery_sts = parseInt(that.init_confirm.instance.delivery_sts);
	                    that.m.form.delivery_date = that.init_confirm.instance.delivery_date;
	                    that.m.form.finish_cont_date = that.init_confirm.instance.finish_cont_date;
	                    that.m.form.deliver_cont_date = that.init_confirm.instance.deliver_cont_date;
	                    that.m.form.arrive_port_date = that.init_confirm.instance.arrive_port_date;
	                    that.m.form.comming_pkh_date = that.init_confirm.instance.comming_pkh_date;
	                    that.m.form.payment_1_date = that.init_confirm.instance.payment_1_date;
	                    that.m.form.payment_2_date = that.init_confirm.instance.payment_2_date;
	                    that.ClientService.success(that.makeNotificationConfirm(that.m.form.delivery_sts));
	                });
	            });
	        }
	    }, {
	        key: 'checkExpectedDate',
	        value: function checkExpectedDate(index) {
	            var ok = true;
	            switch (index) {
	                case 2:
	                    if (this.m.form.finish_cont_expected_date == "") {
	                        ok = false;
	                    }
	                    break;
	                case 3:
	                    if (this.m.form.deliver_cont_expected_date == "") {
	                        ok = false;
	                    }
	                    break;
	                case 4:
	                    if (this.m.form.arrive_port_expected_date == "") {
	                        ok = false;
	                    }
	                    break;
	                case 5:
	                    if (this.m.form.comming_pkh_expected_date == "") {
	                        ok = false;
	                    }
	                    break;
	                case 6:
	                    if (this.m.form.payment_2_expected_date == "") {
	                        ok = false;
	                    }
	                    break;
	            }
	            return ok;
	        }
	    }, {
	        key: 'clickSaveDate',
	        value: function clickSaveDate(index) {
	            var $log = this.$log;
	            var param = {
	                index: index,
	                form: this.m.form
	                //$log.info('ahihi', param);
	                //$log.info('ahihi chua vao');
	            };if (!this.checkExpectedDate(index)) {
	                return;
	            }
	            //$log.info('ahihi vao oy date');
	            var confirmService = this.API.service('expected-date', this.API.all('crm1610'));
	            confirmService.post(param).then(function (response) {});
	        }
	    }, {
	        key: 'initForm',
	        value: function initForm() {
	            this.m.form.rate = 0;
	            this.m.form.vat_tax = 10;
	            this.m.form.frieght_cost = 0;
	            this.m.form.landed_cost = 0;
	            this.m.form.insurance_cost = 0;
	            this.m.form.pi_no = "";
	            this.m.form.notes = "";
	        }
	    }, {
	        key: 'nomarlizeForm',
	        value: function nomarlizeForm(init) {
	            this.m.form.rate = init.rate;
	            this.m.form.vat_tax = parseInt(init.vat_tax);
	            this.m.form.frieght_cost = parseInt(init.frieght_cost);
	            this.m.form.landed_cost = parseInt(init.landed_cost);
	            this.m.form.insurance_cost = parseInt(init.insurance_cost);
	            this.m.form.payment_1_date = this.makeDateForExpectedDate(init.payment_1_date);
	            this.m.form.finish_cont_date = this.makeDateForExpectedDate(init.finish_cont_date);
	            this.m.form.delivery_sts = parseInt(init.delivery_sts);
	            this.m.form.deliver_cont_date = this.makeDateForExpectedDate(init.deliver_cont_date);
	            this.m.form.arrive_port_date = this.makeDateForExpectedDate(init.arrive_port_date);
	            this.m.form.comming_pkh_date = this.makeDateForExpectedDate(init.comming_pkh_date);
	            this.m.form.payment_2_date = this.makeDateForExpectedDate(init.payment_2_date);
	            this.m.form.finish_cont_expected_date = this.makeDateForExpectedDate(init.finish_cont_expected_date);

	            this.m.form.deliver_cont_expected_date = this.makeDateForExpectedDate(init.deliver_cont_expected_date);
	            this.m.form.arrive_port_expected_date = this.makeDateForExpectedDate(init.arrive_port_expected_date);
	            this.m.form.comming_pkh_expected_date = this.makeDateForExpectedDate(init.comming_pkh_expected_date);
	            this.m.form.payment_2_expected_date = this.makeDateForExpectedDate(init.payment_2_expected_date);
	        }
	    }, {
	        key: 'makeDateForExpectedDate',
	        value: function makeDateForExpectedDate(date) {
	            if (date != null) {
	                return new Date(date);
	            }
	            return "";
	        }
	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var _this = this;

	            this.m.delivery.supplier_id = 1;
	            this.m.delivery.notes = null;
	            var $log = this.$log;
	            var param = {
	                supplier_delivery_id: this.m.supplier_delivery_id,
	                supplier_order_id: this.m.supplier_order_id
	                //$log.info('ahihi', param);
	            };this.initForm();
	            var initService = this.API.service('load-init', this.API.all('crm1610'));
	            initService.post(param).then(function (response) {
	                _this.m.init = response.data;
	                _this.m.deliveryDetail = _this.m.init.deliveryDetail;
	                _this.m.warehouseList = _this.m.init.warehouseList;

	                _this.m.form.supplier_id = _this.m.init.supplier[0].supplier_id;
	                //$log.info('init form ', this.m.init);

	                if (_this.m.supplier_delivery_id != null) {
	                    _this.m.form = _this.m.init.delivery[0];
	                    _this.nomarlizeForm(_this.m.init.delivery[0]);

	                    //$log.info('check init ', this.m.form);
	                    _this.m.form.payment_desc = "";
	                    _this.m.form.payment = parseFloat(_this.m.form.total) + parseFloat(_this.m.form.frieght_cost);
	                }
	                _this.calcDeliveryTotal();
	            });
	        }
	    }, {
	        key: 'searchProduct',
	        value: function searchProduct() {
	            var _this2 = this;

	            var $log = this.$log;
	            // Get list product 
	            var searchService = this.API.service('search-product', this.API.all('crm1610'));
	            var param = angular.copy(this.m.filter);

	            var thisClass = this;
	            searchService.post(param).then(function (response) {
	                var list = response.plain().data.list;
	                if (thisClass.m.deliveryDetail != null && thisClass.m.deliveryDetail.length > 0) {
	                    angular.forEach(list, function (value, key) {
	                        var hide = false;
	                        for (var i = 0; i < thisClass.m.deliveryDetail.length; i++) {
	                            if (thisClass.m.deliveryDetail[i].product_id == value.product_id) {
	                                hide = true;
	                                break;
	                            }
	                        }
	                        value.hide = hide;
	                    });
	                }

	                _this2.m.productList = list;
	            });
	        }
	    }, {
	        key: 'addProduct',
	        value: function addProduct(product) {
	            if (this.m.deliveryDetail == null) {
	                this.m.deliveryDetail = [];
	            }

	            var newProduct = {
	                product_id: product.product_id,
	                product_code: product.product_code,
	                name: product.product_cat_name,
	                stock_code: product.stock_code,
	                product_name: product.name_origin,
	                standard_packing: product.standard_packing,
	                product_cat_id: product.product_cat_id,
	                unit_price: product.selling_price,
	                length: product.length,
	                width: product.width,
	                height: product.height,
	                packaging: product.packaging,
	                amount: 0,
	                store_delivery_id: 0,
	                version_no: 0
	                //cần thêm giá vốn
	                // cần thêm thể tích thùng

	            };

	            this.m.deliveryDetail.push(newProduct);
	            product.hide = true;
	            this.calcDeliveryTotal();
	        }
	    }, {
	        key: 'calcDeliveryTotal',
	        value: function calcDeliveryTotal() {
	            if (this.m.deliveryDetail == null) return;
	            var total = 0;
	            var totalVAT = 0;
	            var totalVolume = 0;
	            angular.forEach(this.m.deliveryDetail, function (value) {
	                total += parseFloat(value.unit_price) * parseFloat(value.amount);
	                totalVAT += parseFloat(value.unit_price) * parseFloat(value.amount) * ((parseFloat(value.duty_tax) + 100) / 100);
	                totalVolume += parseFloat(Math.ceil(value.amount / value.standard_packing) * parseFloat(value.length) * parseFloat(value.width) * parseFloat(value.height) / 1000000000);
	            });
	            totalVAT = totalVAT * parseInt(this.m.form.rate);
	            this.m.delivery.total_duty = totalVAT;
	            //this.$log.info('rate ', this.m.form.rate);
	            //this.$log.info('form ', this.m.form);
	            this.m.delivery.totalVAT = totalVAT * 10 / 100;
	            this.m.delivery.importCost = this.m.delivery.totalVAT + this.m.form.frieght_cost + this.m.form.landed_cost + this.m.form.insurance_cost;
	            this.m.delivery.von = this.m.delivery.importCost + totalVAT;
	            this.m.delivery.total = total;
	            this.m.delivery.totalVolume = totalVolume;
	        }
	    }, {
	        key: 'roundUp',
	        value: function roundUp(number) {
	            return Math.ceil(number);
	        }
	    }, {
	        key: 'removeProduct',
	        value: function removeProduct(product) {
	            var index = this.m.deliveryDetail.indexOf(product);
	            if (index >= 0) {
	                this.m.deliveryDetail.splice(index, 1);
	                this.calcDeliveryTotal();
	                for (var i = 0; i < this.m.productList.length; i++) {
	                    if (this.m.productList[i].product_id == product.product_id) {
	                        this.m.productList[i].hide = false;
	                    }
	                }
	            }
	            this.calcDeliveryTotal();
	        }
	    }, {
	        key: 'clickPrintCheck',
	        value: function clickPrintCheck() {
	            var _this3 = this;

	            var param = {
	                supplier_delivery_id: this.m.supplier_delivery_id,
	                payment_desc: this.m.form.payment_desc
	            };
	            var $log = this.$log;
	            if (!this.checkValidForm2() || !this.checkValidForm1()) {
	                return;
	            }
	            var service = this.API.service('print-check', this.API.all('crm1610'));
	            service.post(param).then(function (res) {
	                if (res.data.rtnCd == true) {

	                    window.open(res.data.url);
	                } else {
	                    _this3.ClientService.error('Không tải được tập tin.');
	                }
	            });
	        }
	    }, {
	        key: 'clickSave',
	        value: function clickSave() {
	            var _this4 = this;

	            var deliveryDetail = [];
	            var oke = true;
	            angular.forEach(this.m.deliveryDetail, function (value, key) {
	                if (value.duty_tax > 100 || value.duty_tax < 0) {
	                    oke = false;
	                }
	                deliveryDetail.push({
	                    product_id: value.product_id,
	                    amount: value.amount,
	                    price: value.unit_price,
	                    duty_tax: value.duty_tax
	                });
	            });
	            // this.$log.info('ahihi form ', this.m.testForm);
	            if (!oke) {
	                this.ClientService.error("duty tax không hợp lệ");
	                return;
	            }
	            if (!this.checkValidForm3()) {
	                return;
	            }

	            //this.$log.info('order', this.m.order);
	            var param = {
	                mode: 'SAVE',
	                supplier_id: this.m.form.supplier_id,
	                supplier_order_id: this.m.supplier_order_id,
	                notes: this.m.form.notes,
	                pi_no: this.m.form.pi_no,
	                deliveryDetail: deliveryDetail,
	                supplier_delivery_id: this.m.supplier_delivery_id,
	                total: this.m.delivery.total,
	                totalVolume: this.m.delivery.totalVolume,
	                totalDuty: this.m.delivery.total_duty,
	                rate: this.m.form.rate,
	                duty_tax: this.m.form.duty_tax,
	                vat_tax: this.m.form.vat_tax,
	                frieght_cost: this.m.form.frieght_cost,
	                landed_cost: this.m.form.landed_cost,
	                insurance_cost: this.m.form.insurance_cost
	            };
	            // this.$log.info('param', param);
	            var service = this.API.service('save', this.API.all('crm1610'));
	            service.post(param).then(function (response) {
	                //this.$log.info('response.data', response.data);
	                _this4.ClientService.success("Lưu thành công");
	                _this4.RouteService.goState("app.crm1600");
	            });
	        }
	    }, {
	        key: 'downloadForWarehouse',
	        value: function downloadForWarehouse() {
	            var _this5 = this;

	            var param = {
	                supplier_delivery_id: this.m.supplier_delivery_id
	            };

	            var service = this.API.service('download-warehouse', this.API.all('crm1610'));

	            service.post(param).then(function (response) {
	                //this.$log.info(response.data);
	                _this5.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }, {
	        key: 'downloadForAdmin',
	        value: function downloadForAdmin() {
	            var _this6 = this;

	            var param = {
	                supplier_delivery_id: this.m.supplier_delivery_id
	            };

	            var service = this.API.service('download-admin', this.API.all('crm1610'));

	            service.post(param).then(function (response) {
	                //this.$log.info(response.data);
	                _this6.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }, {
	        key: 'saveActualDate',
	        value: function saveActualDate() {
	            var _this7 = this;

	            var $log = this.$log;
	            var param = {
	                supplier_delivery_id: this.m.form.supplier_delivery_id,
	                payment_1_date: this.m.form.payment_1_date,
	                finish_cont_date: this.m.form.finish_cont_date,
	                deliver_cont_date: this.m.form.deliver_cont_date,
	                arrive_port_date: this.m.form.arrive_port_date,
	                comming_pkh_date: this.m.form.comming_pkh_date,
	                payment_2_date: this.m.form.payment_2_date
	            };

	            var confirmService = this.API.service('actual-date', this.API.all('crm1610'));
	            confirmService.post(param).then(function (response) {
	                _this7.ClientService.success("Save successfully");
	            });
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Crm1610Controller;
	}();

	var Crm1610Component = exports.Crm1610Component = {
	    //templateUrl: './views/app/components/crm1610/crm1610.component.html',
	    templateUrl: '/views/admin.crm1610',
	    controller: Crm1610Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 154 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1600Controller = function () {
	    Crm1600Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Crm1600Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm1600Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;

	        this.m = {
	            filter: {},
	            datetimepicker_options: {
	                // viewMode: 'months',
	                format: 'YYYY-MM-DD'
	            }
	        };

	        this.m.filter.end_date = moment();
	        this.loadInit();
	    }

	    _createClass(Crm1600Controller, [{
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var loadService = this.API.service('load-init', this.API.all('crm1600'));
	            var param = angular.copy(this.m.filter);

	            loadService.post(param).then(function (response) {
	                _this.m.init = response.plain().data;
	                _this.search();
	            });
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this2 = this;

	            var $log = this.$log;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm1600'));
	            var param = angular.copy(this.m.filter);

	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;

	            searchService.post(param).then(function (response) {
	                //$log.info(response);
	                _this2.m.list = response.data;
	            });
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Crm1600Controller;
	}();

	var Crm1600Component = exports.Crm1600Component = {
	    //templateUrl: './views/app/components/crm1600/crm1600.component.html',
	    templateUrl: '/views/admin.crm1600',
	    controller: Crm1600Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 155 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1510Controller = function () {
	    Crm1510Controller.$inject = ["$scope", "$state", "$compile", "$stateParams", "$log", "AclService", "API", "UtilsService", "RouteService", "ClientService"];
	    function Crm1510Controller($scope, $state, $compile, $stateParams, $log, AclService, API, UtilsService, RouteService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm1510Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.RouteService = RouteService;
	        this.ClientService = ClientService;

	        this.m = {
	            filter: {}
	        };

	        this.m.packing_id = $stateParams.packing_id;
	        this.loadInitData();
	    }

	    _createClass(Crm1510Controller, [{
	        key: 'save',
	        value: function save() {
	            var _this = this;

	            var RouteService = this.RouteService;
	            var ClientService = this.ClientService;
	            this.$log.info("this.form", this.m.form);

	            var service = this.API.service('save', this.API.all('crm1510'));
	            var param = angular.copy(this.m.filter);
	            param.packing_id = this.m.packing_id;

	            this.$log.info("param", param);

	            service.post(param).then(function (response) {
	                if (_this.m.packing_id != null) {
	                    _this.ClientService.success("Cập nhật packing thành công");
	                } else {
	                    _this.ClientService.success("Thêm packing thành công");
	                }
	                _this.RouteService.goState("app.crm1500");
	            });
	        }
	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var _this2 = this;

	            if (this.m.packing_id != null) {
	                var initService = this.API.service('load-init', this.API.all('crm1510'));
	                var param = angular.copy(this.m);
	                param.packing_id = this.m.packing_id;
	                initService.post(param).then(function (response) {
	                    _this2.$log.info(response);
	                    _this2.m.init = response.data;
	                    _this2.m.filter.length = _this2.m.init[0].length;
	                    _this2.m.filter.width = _this2.m.init[0].width;
	                    _this2.m.filter.height = _this2.m.init[0].height;
	                });
	            }
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Crm1510Controller;
	}();

	var Crm1510Component = exports.Crm1510Component = {
	    //templateUrl: './views/app/components/crm1510/crm1510.component.html',
	    templateUrl: '/views/admin.crm1510',
	    controller: Crm1510Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 156 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1500Controller = function () {
	    Crm1500Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Crm1500Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm1500Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;

	        this.m = {
	            filter: {}
	        };
	        this.doSearch(1);
	    }

	    _createClass(Crm1500Controller, [{
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            var $log = this.$log;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm1500'));
	            var param = angular.copy(this.m.filter);

	            param.page = page;

	            searchService.post(param).then(function (response) {
	                _this.$log.info(response);
	                _this.m.list = response.data;
	            });
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Crm1500Controller;
	}();

	var Crm1500Component = exports.Crm1500Component = {
	    //templateUrl: './views/app/components/crm1500/crm1500.component.html',
	    templateUrl: '/views/admin.crm1500',
	    controller: Crm1500Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 157 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1310Controller = function () {
	    Crm1310Controller.$inject = ["$scope", "$state", "$compile", "$log", "ClientService", "AclService", "API", "UtilsService", "RouteService", "$stateParams"];
	    function Crm1310Controller($scope, $state, $compile, $log, ClientService, AclService, API, UtilsService, RouteService, $stateParams) {
	        'ngInject';

	        _classCallCheck(this, Crm1310Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.RouteService = RouteService;
	        this.m = {
	            order: {},
	            init: {},
	            orderDetail: [],
	            form: {}
	        };
	        this.m.canEdit = true;
	        this.m.test = [0, 0]; //test form of supplier and rate
	        this.m.supplier_order_id = $stateParams.supplier_order_id;
	        this.m.supplier_id = $stateParams.supplier_id;
	        this.$log.info('check init');
	        this.loadInitData();
	    }

	    _createClass(Crm1310Controller, [{
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var _this = this;

	            var $log = this.$log;
	            var param = {

	                supplier_order_id: this.m.supplier_order_id,
	                supplier_id: this.m.supplier_id
	                //$log.info('supplier_id', this.m.supplier_order_id);
	                //param.supplier_order_id = this.m.supplier_order_id;
	            };var initService = this.API.service('load-init', this.API.all('crm1310'));
	            initService.post(param).then(function (response) {
	                _this.m.init = response.data;
	                //$log.info('ahihi', this.m.init.order);
	                if (response.data.supplier != null) {
	                    _this.m.supplier = response.data.supplier;
	                }

	                if (_this.m.supplier_order_id != null) {
	                    _this.m.orderDetail = _this.m.init.orderDetail;
	                    _this.m.order = _this.m.init.order;
	                    _this.m.supplier_id = _this.m.init.supplier[0].supplier_id;
	                    _this.m.order.order_date = _this.m.init.order[0].order_date;
	                    _this.m.order.total = _this.m.init.order[0].total;
	                    _this.m.order.discount = _this.m.init.order[0].discount;

	                    _this.m.order.total_with_discount = _this.m.init.order[0].total_with_discount;
	                }
	            });
	        }
	    }, {
	        key: 'searchProduct',
	        value: function searchProduct() {
	            var _this2 = this;

	            var $log = this.$log;

	            //$log.info(this.m);

	            // Get list product 
	            var searchService = this.API.service('search-product', this.API.all('crm1310'));
	            var param = angular.copy(this.m.filter);

	            var thisClass = this;
	            searchService.post(param).then(function (response) {
	                var list = response.plain().data.list;
	                if (thisClass.m.orderDetail != null && thisClass.m.orderDetail.length > 0) {
	                    angular.forEach(list, function (value, key) {
	                        var hide = false;
	                        for (var i = 0; i < thisClass.m.orderDetail.length; i++) {
	                            if (thisClass.m.orderDetail[i].product_id == value.product_id) {
	                                hide = true;
	                                break;
	                            }
	                        }
	                        value.hide = hide;
	                    });
	                }

	                _this2.m.productList = list;
	                // $log.debug('this.m.list', this.m.productList);
	            });
	        }
	    }, {
	        key: 'addProduct',
	        value: function addProduct(product) {
	            if (this.m.orderDetail == null) {
	                this.m.orderDetail = [];
	            }

	            var newProduct = {
	                product_id: product.product_id,
	                product_code: product.product_code,
	                product_name: product.product_name,
	                pakaging: product.pakaging,
	                unit_price: product.selling_price,
	                pakaging_type: product.pakagingType,
	                describes: product.describes,
	                amount: 0,
	                store_order_id: 0,
	                version_no: 0
	                //cần thêm giá vốn
	                // cần thêm thể tích thùng

	            };

	            this.m.orderDetail.push(newProduct);
	            product.hide = true;
	            this.calcOrderTotal();
	        }
	    }, {
	        key: 'calcOrderTotal',
	        value: function calcOrderTotal() {
	            if (this.m.order == null) return;
	            var total = 0;
	            var discount = this.m.order.discount;
	            var total_with_discount = 0;
	            angular.forEach(this.m.orderDetail, function (value) {
	                total += parseFloat(value.unit_price) * parseFloat(value.amount);
	            });
	            total_with_discount = total - total * (discount / 100);

	            this.m.discount = discount;
	            this.m.order.total = total;
	            this.m.order.total_with_discount = total_with_discount;
	        }
	    }, {
	        key: 'roundUp',
	        value: function roundUp(number) {
	            return Math.ceil(number);
	        }
	    }, {
	        key: 'checkValidForm',
	        value: function checkValidForm() {

	            var oke = true;
	            if (this.m.form.supplier_id == null) {
	                this.m.test[0] = 1;
	                oke = false;
	            } else {
	                this.m.test[0] = 0;
	            }
	            if (this.m.form.rate == null || this.m.form.rate == "") {
	                this.m.test[1] = 1;
	                oke = false;
	            } else {
	                this.m.test[1] = 0;
	            }
	            return oke;
	        }
	    }, {
	        key: 'clickSave',
	        value: function clickSave() {
	            var _this3 = this;

	            var orderDetail = [];

	            angular.forEach(this.m.orderDetail, function (value, key) {
	                orderDetail.push({
	                    product_id: value.product_id,
	                    amount: value.amount,
	                    unit_price: value.unit_price,
	                    pakaging: value.pakaging,
	                    describes: value.describes,
	                    pakaging_type: value.pakaging_type,
	                    product_name: value.product_name
	                });
	            });

	            //this.$log.info('order', this.m.order);
	            var param = {
	                mode: 'SAVE',
	                supplier_id: this.m.supplier_id,
	                notes: this.m.order.notes,
	                carton: this.m.order.carton,
	                orderDetail: orderDetail,
	                supplier_order_id: this.m.supplier_order_id,
	                total: this.m.order.total,
	                total_with_discount: this.m.order.total_with_discount,
	                discount: this.m.order.discount
	            };
	            //this.$log.info('param', param);
	            var service = this.API.service('save', this.API.all('crm1310'));
	            service.post(param).then(function (response) {
	                //this.$log.info('response.data', response.data);
	                _this3.ClientService.success("Lưu thành công");
	                _this3.m.supplier_order_id = response.data.supplierOrderId;
	                _this3.RouteService.goState("app.crm1300");
	            });
	        }
	    }, {
	        key: 'removeProduct',
	        value: function removeProduct(product) {
	            var index = this.m.orderDetail.indexOf(product);
	            if (index >= 0) {
	                this.m.orderDetail.splice(index, 1);
	                this.calcOrderTotal();

	                for (var i = 0; i < this.m.productList.length; i++) {
	                    if (this.m.productList[i].product_id == product.product_id) {
	                        this.m.productList[i].hide = false;
	                    }
	                }
	            }
	            this.calcOrderTotal();
	        }
	    }, {
	        key: 'clickPrintCheck',
	        value: function clickPrintCheck() {
	            var _this4 = this;

	            var param = {
	                supplier_order_id: this.m.supplier_order_id
	            };

	            // this.$log.debug('download');
	            // this.ClientService.downloadFile('api/crm0210/print-check', param);
	            var service = this.API.service('print-check', this.API.all('crm1310'));
	            service.post(param).then(function (res) {
	                if (res.data.rtnCd == true) {
	                    _this4.m.form.send_po_date = res.data.send_po_date;
	                    window.open(res.data.url);
	                    _this4.loadInitData();
	                } else {
	                    _this4.ClientService.error('Không tải được tập tin.');
	                }
	            });
	        }
	    }, {
	        key: 'clickCreateExport',
	        value: function clickCreateExport() {
	            var that = this;
	            swal({
	                title: "Bạn có muốn xuất đơn hàng này?",
	                text: "Đơn hàng sau khi xuất sẽ không thể sửa đổi.",
	                type: "warning",
	                showCancelButton: true,
	                confirmButtonColor: '#DD6B55',
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var param = {
	                    supplier_order_id: that.m.supplier_order_id
	                };

	                that.RouteService.goState("app.crm1610", param);
	            });
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Crm1310Controller;
	}();

	var Crm1310Component = exports.Crm1310Component = {
	    //templateUrl: './views/app/components/crm1310/crm1310.component.html',
	    templateUrl: '/views/admin.crm1310',
	    controller: Crm1310Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 158 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1300Controller = function () {
	    Crm1300Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Crm1300Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm1300Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;

	        this.m = {
	            filter: {},
	            datetimepicker_options: {
	                // viewMode: 'months',
	                format: 'YYYY-MM-DD'
	            }
	        };
	        this.m.filter.end_date = moment();
	        this.search();
	    }

	    _createClass(Crm1300Controller, [{
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            var $log = this.$log;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm1300'));
	            var param = angular.copy(this.m.filter);

	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;

	            searchService.post(param).then(function (response) {

	                _this.m.list = response.data;
	            });
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Crm1300Controller;
	}();

	var Crm1300Component = exports.Crm1300Component = {
	    //templateUrl: './views/app/components/crm1300/crm1300.component.html',
	    templateUrl: '/views/admin.crm1300',
	    controller: Crm1300Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 159 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1110Controller = function () {
	    Crm1110Controller.$inject = ["$scope", "$state", "$compile", "$stateParams", "$log", "AclService", "API", "UtilsService", "RouteService", "ClientService"];
	    function Crm1110Controller($scope, $state, $compile, $stateParams, $log, AclService, API, UtilsService, RouteService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm1110Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.RouteService = RouteService;
	        this.ClientService = ClientService;

	        this.m = {
	            filter: {}
	        };
	        this.m.delivery_vendor_id = $stateParams.delivery_vendor_id;

	        this.loadInitData();
	    }

	    _createClass(Crm1110Controller, [{
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var _this = this;

	            this.m.filter.contact_name = null;
	            this.m.filter.contact_email = null;
	            this.m.filter.contact_tel = null;
	            this.m.filter.contact_mobile1 = null;
	            this.m.filter.contact_mobile2 = null;
	            this.m.filter.notes = null;
	            if (this.m.delivery_vendor_id != null) {
	                var initService = this.API.service('load-init', this.API.all('crm1110'));
	                var param = angular.copy(this.m);

	                initService.post(param).then(function (response) {
	                    _this.$log.info(response);
	                    _this.m.init = response.plain().data;
	                    _this.$log.info('vendor', _this.m.init.inforVendor);
	                    _this.m.filter.contact_name = _this.m.init.inforVendor[0].contact_name;
	                    _this.m.filter.delivery_vendor_name = _this.m.init.inforVendor[0].delivery_vendor_name;
	                    _this.m.filter.contact_email = _this.m.init.inforVendor[0].contact_email;
	                    _this.m.filter.contact_tel = _this.m.init.inforVendor[0].contact_tel;
	                    _this.m.filter.contact_mobile1 = _this.m.init.inforVendor[0].contact_mobile1;
	                    _this.m.filter.contact_mobile2 = _this.m.init.inforVendor[0].contact_mobile2;
	                    _this.m.filter.notes = _this.m.init.inforVendor[0].notes;
	                });
	            }
	        }
	    }, {
	        key: 'save',
	        value: function save() {
	            var _this2 = this;

	            var RouteService = this.RouteService;
	            var ClientService = this.ClientService;
	            this.$log.info("this.form", this.m.form);

	            this.$log.info('vao save dc oy ahihihihihihihihihihihhihihi');
	            this.$log.info('filter: ', this.m.filter);

	            var service = this.API.service('save', this.API.all('crm1110'));
	            var param = angular.copy(this.m.filter);
	            param.delivery_vendor_id = this.m.delivery_vendor_id;
	            service.post(param).then(function (response) {
	                if (_this2.m.delivery_vendor_id != null) {
	                    _this2.ClientService.success("Cập nhật người giao hàng thành công");
	                } else {
	                    _this2.ClientService.success("Thêm người giao hàng thành công");
	                }
	                _this2.RouteService.goState("app.crm1100");
	            });
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Crm1110Controller;
	}();

	var Crm1110Component = exports.Crm1110Component = {
	    //templateUrl: './views/app/components/crm1110/crm1110.component.html',
	    templateUrl: '/views/admin.crm1110',
	    controller: Crm1110Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 160 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Adm0400Controller = function () {
	    Adm0400Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService"];
	    function Adm0400Controller($scope, $state, $compile, $log, AclService, API, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Adm0400Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;

	        this.m = {
	            form: {}
	        };
	    }

	    _createClass(Adm0400Controller, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }, {
	        key: 'run',
	        value: function run() {
	            var _this = this;

	            if (this.m.form.cmd == null || this.m.form.cmd.length <= 0) {
	                self.ClientService.warning("Vui lòng nhập nội dung");
	                return;
	            }

	            var self = this;
	            var service = this.API.service('run', this.API.all('adm0400'));
	            var param = angular.copy(this.m.form);
	            service.post(param).then(function (response) {
	                _this.$log.info(response);
	                self.ClientService.success("Đang thực thi, hãy tải lại dữ liệu sau vài phút nữa.");
	            });
	        }
	    }, {
	        key: 'clear',
	        value: function clear(name) {
	            var _this2 = this;

	            swal({
	                title: 'X\xE1c nh\u1EADn',
	                text: 'B\u1EA1n c\xF3 mu\u1ED1n x\xF3a ' + name + ' kh\xF4ng?',
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                _this2.API.service('clean', _this2.API.all('adm0400')).post({ name: name }).then(function (response) {
	                    _this2.ClientService.success('\u0110\xE3 th\u1EF1c hi\u1EC7n xong (' + name + ' - ' + response.data.rtnCd + ')');
	                });
	            });
	        }
	    }]);

	    return Adm0400Controller;
	}();

	var Adm0400Component = exports.Adm0400Component = {
	    templateUrl: '/views/admin.adm0400',
	    controller: Adm0400Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 161 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0912Controller = function () {
	    Crm0912Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService"];
	    function Crm0912Controller($scope, $state, $compile, $log, AclService, API, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm0912Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.can = AclService.can;
	        this.ClientService = ClientService;

	        this.m = {
	            filter: {
	                days: 0
	            },
	            totalMoney: 0,
	            list: null
	        };
	    }

	    _createClass(Crm0912Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.loadInit();
	            // this.search();
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var loadService = this.API.service('load-init', this.API.all('crm0912'));
	            var param = angular.copy(this.m.filter);

	            loadService.post(param).then(function (response) {
	                _this.m.init = response.plain().data;

	                _this.search();
	            });
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                days: 0,
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this2 = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm0912'));
	            var param = angular.copy(this.m.filter);

	            param.page = page;
	            searchService.post(param).then(function (response) {
	                var list = response.plain().data.data;

	                // Cal sum
	                _this2.calSum(list);
	                _this2.m.list = list;
	            });
	        }
	    }, {
	        key: 'calSum',
	        value: function calSum(list) {
	            var totalMoney = 0;
	            list.forEach(function (item) {
	                totalMoney += parseInt(item.selling_price) * parseInt(item.remain);
	            });
	            this.m.totalMoney = totalMoney;
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this3 = this;

	            var param = angular.copy(this.m.filter);
	            var service = this.API.service('download', this.API.all('crm0912'));
	            service.post(param).then(function (response) {
	                _this3.$log.info(response.data);
	                _this3.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }, {
	        key: 'run',
	        value: function run() {
	            var self = this;
	            swal({
	                title: "Bạn có muốn tính lại số ngày tồn kho không?",
	                text: "Quá trình này sẽ mất vài phút",
	                type: "warning",
	                showCancelButton: true,
	                closeOnConfirm: true
	                // confirmButtonColor: "#DD6B55"
	            }, function () {

	                var service = self.API.service('exec', self.API.all('crm0912'));
	                service.post().then(function (res) {
	                    self.ClientService.success(res.data.msg);
	                });
	            });
	        }
	    }]);

	    return Crm0912Controller;
	}();

	var Crm0912Component = exports.Crm0912Component = {
	    //templateUrl: './views/app/components/crm0912/crm0912.component.html',
	    templateUrl: '/views/admin.crm0912',
	    controller: Crm0912Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Rpt0514Component = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _report = __webpack_require__(86);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Rpt0514Controller = function () {
	    Rpt0514Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "ClientService", "DialogService", "$stateParams", "RouteService", "ChartService", "$filter"];
	    function Rpt0514Controller($scope, $state, $compile, $log, AclService, API, ClientService, DialogService, $stateParams, RouteService, ChartService, $filter) {
	        'ngInject';

	        _classCallCheck(this, Rpt0514Controller);

	        this.$scope = $scope;
	        this.$state = $state;

	        this.$log = $log;
	        this.AclService = AclService;
	        this.$compile = $compile;
	        this.ChartService = ChartService;
	        this.API = API;
	        this.ClientService = ClientService;
	        this.DialogService = DialogService;
	        this.$filter = $filter;

	        this.m = {
	            chart: {},
	            activeFlag: 1,
	            datetimepicker_options: {
	                viewMode: 'years',
	                format: 'YYYY'
	            }
	        };
	        this.m.tab_name = ['', 'Overview', 'Sản phẩm', 'Checkin', 'CS'];

	        this.m.store_id = $stateParams.store_id;

	        if (this.m.store_id == null || this.m.store_id <= 0) {

	            this.ClientService.warning("Vui lòng chọn cửa hàng");
	            RouteService.goState("app.crm0300");
	            return;
	        }
	        for (var i = 1; i < 6; i++) {
	            this.m[i] = {
	                filter: {
	                    year: moment().format('YYYY'),
	                    data_type: 1,
	                    view_mode: 1,
	                    time_mode: "0",
	                    tab: i,
	                    current_rate: 23500
	                },
	                data: {
	                    total: 0
	                }
	            };
	        }
	        this.onInit();
	    }

	    _createClass(Rpt0514Controller, [{
	        key: 'onInit',
	        value: function onInit() {
	            var previousSearch = sessionStorage.rpt0514;
	            this.loadInit();
	            if (angular.isUndefined(previousSearch)) {
	                this.loadData(2);
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var index = previousSearch.index;

	            this.m.activeFlag = index;
	            delete previousSearch['index'];
	            this.m[index].filter = angular.copy(previousSearch);
	            this.loadData(this.m.activeFlag);
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var loadService = this.API.service('load-init', this.API.all('rpt0514'));
	            // let param = angular.copy(this.m.filter);
	            var param = {};
	            param.store_id = this.m.store_id;
	            loadService.post(param).then(function (response) {
	                // this.$log.info(response);
	                _this.m.init = response.plain().data;
	            });
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(index, page) {
	            var _this2 = this;

	            var $log = this.$log;
	            // Get list product 

	            var searchService = this.API.service('search', this.API.all('rpt0514'));
	            var param = angular.copy(this.m[index].filter);
	            if (param.from_date) {
	                param.from_date = moment(param.from_date).format('YYYY-MM-DD');
	            }
	            if (param.to_date) {
	                param.to_date = moment(param.to_date).format('YYYY-MM-DD');
	            }
	            param.index = index;
	            param.page = page;
	            param.store_id = this.m.store_id;
	            sessionStorage.rpt0514 = angular.toJson(param);
	            //param.pageSize = $scope.m.paginationInfo.pageSize;

	            searchService.post(param).then(function (response) {
	                _this2.m[index].data = response.plain().data.data;
	                if (index == 5) {
	                    var images = _this2.m[index].data.images;

	                    _this2.m[index].data.data.data.forEach(function (element) {
	                        element.images = _this2.$filter("filter")(images, { check_in_id: element.id });
	                    });
	                }
	            });
	        }
	    }, {
	        key: 'chooseTab',
	        value: function chooseTab(index) {
	            if (index < 1 || index > 10) {
	                return;
	            }
	            // this.$log.info('check : ',this.m);
	            this.m.activeFlag = index;
	            switch (index) {
	                case 1:
	                    this.loadOverview(index);
	                case 2:
	                    this.loadData(index);
	                    break;
	                case 3:
	                    this.doSearch(index, 1);
	                    break;
	                case 4:
	                    this.doSearch(index, 1);
	                    break;
	                case 5:
	                    this.doSearch(index, 1);
	                    break;
	            }
	        }
	    }, {
	        key: 'loadOverview',
	        value: function loadOverview(index) {
	            var thisClass = this;
	            var $log = this.$log;

	            var servicePart1Child = this.API.service('load-overview', this.API.all('rpt0514'));
	            var year = null;
	            var param = angular.copy(this.m[index].filter);
	            param.index = index;
	            param.store_id = this.m.store_id;
	            if (param.year == null) {
	                year = moment();
	                param.year = year.format('YYYY');
	                this.m[index].filter = param;
	            } else {
	                param.year = moment(param.year).format('YYYY');
	            }
	            sessionStorage.rpt0514 = angular.toJson(param);

	            servicePart1Child.post(param).then(function (response) {
	                // thisClass.m.downloadPart1[year] = 1;
	                thisClass.m[index].data = response.data;
	                thisClass.createChartStatisticDelivery(thisClass.m[index].data.deliveryData);
	            });
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter(index) {
	            if (index < 1 || index > 10) {
	                return;
	            }
	            this.m[index].filter = {
	                year: moment().format('YYYY'),
	                data_type: 1,
	                time_mode: "0",
	                view_mode: 1,
	                tab: index
	            };
	            this.loadData(index);
	        }
	    }, {
	        key: 'loadData',
	        value: function loadData(index) {
	            var thisClass = this;
	            var $log = this.$log;

	            var servicePart1Child = this.API.service('load-data', this.API.all('rpt0514'));
	            var year = null;
	            var param = angular.copy(this.m[index].filter);
	            param.index = index;
	            param.store_id = this.m.store_id;
	            if (param.year == null) {
	                year = moment();
	                param.year = year.format('YYYY');
	                this.m[index].filter = param;
	            } else {
	                param.year = moment(param.year).format('YYYY');
	            }
	            sessionStorage.rpt0514 = angular.toJson(param);

	            servicePart1Child.post(param).then(function (response) {
	                // thisClass.m.downloadPart1[year] = 1;
	                thisClass.m[index].data = response.data;
	            });
	        }
	    }, {
	        key: 'createChartStatisticDelivery',
	        value: function createChartStatisticDelivery(dataInput) {
	            var chart = {};

	            var series = ['Sales'];
	            var colors = ['#BF465C'];
	            var labels = [];
	            var line1 = [];

	            angular.forEach(dataInput, function (item) {
	                labels.push(item.yearmonth);
	                line1.push(item.total);
	            });

	            var data = [line1];

	            this.m.chart.chartStatisticDelivery = this.ChartService.get_angular_chart(series, colors, data, labels);
	        }
	    }, {
	        key: 'line_chart',
	        value: function line_chart(item) {
	            var title = "";
	            var that = this;
	            var $log = this.$log;
	            var param = angular.copy(that.m[that.m.activeFlag].filter);
	            var data = null;
	            var root_title = "";
	            var name = [];
	            var activeFlag = that.m.activeFlag;
	            param.index = 2;
	            name.push(that.m.tab_name[activeFlag]);
	            name.push(item['Name']);

	            if (param.index == 3 || param.index == 4) {
	                if (param['data_type']) {
	                    for (var i = 0; i < this.m.init.listDataType.length; i++) {

	                        if (this.m.init.listDataType[i].id == param['data_type']) {
	                            name.push(this.m.init.listDataType[i].name);
	                            break;
	                        }
	                    }
	                }
	            } else if (param.index == 2) {
	                if (param['data_type'] == 1) {
	                    name.push("Số lượng");
	                } else {
	                    name.push("Số tiên USD");
	                }
	            }

	            if (param['product_cat_id']) {
	                for (var i = 0; i < this.m.init.catList.length; i++) {
	                    if (this.m.init.catList[i].product_cat_id == param['product_cat_id']) {
	                        name.push(this.m.init.catList[i].name);
	                        break;
	                    }
	                }
	            }

	            if (param['area_group_id']) {
	                for (var i = 0; i < this.m.init.listAreaGroup.length; i++) {
	                    // $log.info('name',this.m.init.listAreaGroup[i]);
	                    if (this.m.init.listAreaGroup[i].area_group_id == param['area_group_id']) {
	                        name.push(this.m.init.listAreaGroup[i].name);
	                        break;
	                    }
	                }
	            }
	            if (param['area1']) {
	                for (var i = 0; i < this.m.init.listArea1.length; i++) {
	                    if (this.m.init.listArea1[i].area_id == param['area1']) {
	                        name.push(this.m.init.listArea1[i].name);
	                        break;
	                    }
	                }
	            }

	            if (param['salesman_id']) {
	                for (var i = 0; i < this.m.init.salesmanList.length; i++) {
	                    if (this.m.init.salesmanList[i].id == param['salesman_id']) {
	                        name.push(this.m.init.salesmanList[i].name);
	                        break;
	                    }
	                }
	            }
	            for (var i = 0; i < name.length; i++) {
	                root_title = root_title + ' - ' + name[i];
	            }
	            if (param.time_mode == 0) {
	                data = that.ChartService.get_line_by_month(item, param, root_title);
	            } else {
	                data = that.ChartService.get_line_by_year(item, root_title);
	            }
	            $log.info('data line', data);
	            var modalOption = {
	                size: 'dialog-1024',
	                controller: _report.ReportDialogController,
	                resolve: {
	                    data: { 1: data }
	                }
	            };
	            that.DialogService.open('report_chart', modalOption);
	        }
	    }, {
	        key: 'draw_vertical',
	        value: function draw_vertical(activeFlag, category) {
	            var data = this.m[activeFlag].data.data;
	            var param = this.m[activeFlag].filter;
	            param.index = activeFlag;

	            var $log = this.$log;
	            var key_name = 'Name';
	            var root_title = "";
	            var name = [];
	            if (param["time_mode"] == 0) {
	                name.push(moment(param.year).format('YYYY'));
	            }
	            name.push(" Top 15 theo ");
	            name.push(this.m.tab_name[activeFlag]);
	            name.push(category);

	            if (param['import_type']) {
	                if (param['import_type'] == 1) {
	                    name.push("Bảo hành");
	                } else {
	                    name.push("Trả lại");
	                }
	            }

	            if (param.index == 3 || param.index == 4) {
	                if (param['data_type']) {
	                    for (var i = 0; i < this.m.init.listDataType.length; i++) {

	                        if (this.m.init.listDataType[i].id == param['data_type']) {
	                            name.push(this.m.init.listDataType[i].name);
	                            break;
	                        }
	                    }
	                }
	            } else if (param.index == 2) {
	                if (param['data_type'] == 1) {
	                    name.push("Số lượng");
	                } else {
	                    name.push("Số tiên USD");
	                }
	            }

	            if (param['handle_id']) {

	                for (var i = 0; i < this.m.init.handleList.length; i++) {
	                    $log.info('handle name', this.m.init.handleList[i]);
	                    if (this.m.init.handleList[i].handle_id == param['handle_id']) {
	                        name.push(this.m.init.handleList[i].name);
	                        break;
	                    }
	                }
	            }

	            if (param['product_cat_id']) {
	                for (var i = 0; i < this.m.init.catList.length; i++) {
	                    // $log.info('name',this.m.init.catList[i]);
	                    if (this.m.init.catList[i].product_cat_id == param['product_cat_id']) {
	                        name.push(this.m.init.catList[i].name);
	                        break;
	                    }
	                }
	            }
	            if (param['area_group_id']) {
	                for (var i = 0; i < this.m.init.listAreaGroup.length; i++) {
	                    // $log.info('name',this.m.init.listAreaGroup[i]);
	                    if (this.m.init.listAreaGroup[i].area_group_id == param['area_group_id']) {
	                        name.push(this.m.init.listAreaGroup[i].name);
	                        break;
	                    }
	                }
	            }
	            if (param['area1']) {
	                for (var i = 0; i < this.m.init.listArea1.length; i++) {
	                    if (this.m.init.listArea1[i].area_id == param['area1']) {
	                        name.push(this.m.init.listArea1[i].name);
	                        break;
	                    }
	                }
	            }

	            if (param['salesman_id']) {
	                for (var i = 0; i < this.m.init.salesmanList.length; i++) {
	                    if (this.m.init.salesmanList[i].id == param['salesman_id']) {
	                        name.push(this.m.init.salesmanList[i].name);
	                        break;
	                    }
	                }
	            }

	            $log.info('name', name);

	            for (var i = 0; i < name.length; i++) {
	                root_title = root_title + ' - ' + name[i];
	            }
	            var title = {
	                0: root_title,
	                1: root_title
	            };
	            var data_chart = this.ChartService.get_vertical(data, param, title, category, key_name);

	            var modalOption = {
	                size: 'dialog-1024',
	                controller: _report.ReportDialogController,
	                resolve: {
	                    data: { 1: data_chart }
	                }
	            };

	            this.DialogService.open('report_chart', modalOption);
	        }
	    }, {
	        key: 'compare',
	        value: function compare(item) {
	            var compareService = this.API.service('compare', this.API.all('rpt0513'));
	            var year = null;
	            var that = this;

	            var param = angular.copy(that.m[that.m.activeFlag].filter);
	            var activeFlag = that.m.activeFlag;
	            param.id = item.id;
	            param.year = null;
	            param.index = 3;
	            param.tab = 3;
	            param.store_id = this.m.store_id;

	            var $log = this.$log;
	            var root_title = "";
	            var name = [];
	            $log.info('param compare', param);

	            // name.push(that.m.tab_name[activeFlag]);
	            name.push(item['Name']);

	            // for (var i=0;i<name.length;i++){
	            //     root_title = root_title +' - '+name[i];
	            // }
	            var title = {
	                0: "So sánh giữa 4 năm " + root_title + item.Name,
	                1: "So sánh luỹ kế giữa 4 năm " + root_title + item.Name,
	                2: "Chuyển động 4 năm " + root_title + item.Name
	            };

	            compareService.post(param).then(function (response) {
	                // thisClass.m.downloadPart1[year] = 1;
	                var res = response.data;
	                $log.info('res', res);
	                var data = that.ChartService.get_compare(res, param, title);

	                var modalOption = {
	                    size: 'dialog-1024',
	                    controller: _report.ReportDialogController,
	                    resolve: {
	                        data: data
	                    }
	                };
	                that.DialogService.open('report_chart', modalOption);
	            });
	        }
	    }]);

	    return Rpt0514Controller;
	}();

	var Rpt0514Component = exports.Rpt0514Component = {
	    //templateUrl: './views/app/components/rpt0514/rpt0514.component.html',
	    //  '/views/admin.rpt0513.rpt0513'
	    templateUrl: '/views/admin.rpt0514.rpt0514',
	    controller: Rpt0514Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Rpt0510Component = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _report = __webpack_require__(86);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Rpt0510Controller = function () {
	    Rpt0510Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$filter", "DialogService"];
	    function Rpt0510Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $filter, DialogService) {
	        'ngInject';

	        _classCallCheck(this, Rpt0510Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.$filter = $filter;
	        this.DialogService = DialogService;
	        this.m = {
	            filter: {
	                date: new Date()
	            },
	            data: []
	        };
	    }

	    _createClass(Rpt0510Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.search();
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            var thisClass = this;
	            var service = this.API.service('search', this.API.all('rpt0510'));
	            var param = angular.copy(this.m.filter);

	            if (param.date != null && param.date != "") {
	                param.date = this.$filter("date")(param.date, 'yyyy-MM-dd');
	            }

	            service.post(param).then(function (response) {
	                thisClass.$log.info('response', response);
	                thisClass.m.data = response.plain().data; // not fixed yet
	            });
	        }
	    }, {
	        key: 'getDataHorizontalByStore',
	        value: function getDataHorizontalByStore(item) {
	            var smallItem = {};
	            var dataProvider = [];
	            angular.forEach(item, function (value, key) {
	                //$log.info('draw part 3', key);
	                if (key != "Time" && key != "Total" && key != "$$hashKey") {
	                    smallItem = {};
	                    smallItem.key = key;
	                    smallItem.value = value;
	                    dataProvider.push(smallItem);
	                }
	            });
	            return dataProvider;
	        }
	    }, {
	        key: 'getDataVerticalByStore',
	        value: function getDataVerticalByStore(item, header) {
	            var smallItem = {};
	            var dataProvider = [];
	            angular.forEach(item, function (value, key) {
	                smallItem = {};
	                smallItem.key = item[key].Time;
	                if (item[key][header] == null) {
	                    smallItem.value = 0;
	                } else {
	                    smallItem.value = item[key][header];
	                }

	                dataProvider.unshift(smallItem);
	            });
	            return dataProvider;
	        }
	    }, {
	        key: 'prepareDataToDraw',
	        value: function prepareDataToDraw(typeObject, item, header, direction, title, row) {
	            var dataProvider = [];
	            var $log = this.$log;
	            switch (typeObject) {
	                case 2:
	                    if (direction == 0) {
	                        dataProvider = this.getDataHorizontalByStore(item);
	                        title = title + '_' + item.Time;
	                    } else {
	                        dataProvider = this.getDataVerticalByStore(item, header);
	                    }
	                    break;
	            }
	            var data = {
	                title: title,
	                dataProvider: dataProvider
	            };
	            return data;
	        }
	    }, {
	        key: 'selectTitleForPart',
	        value: function selectTitleForPart(part) {
	            switch (part) {
	                case 1:
	                    return "DOANH SỐ CÁC CẤP";

	            }
	            return "";
	        }

	        // typeObject (product or store : 1 or 2), item (data), header, type( line or bar: 2 or 1), direction (horizontal or vertical: 0 or 1)

	    }, {
	        key: 'draw',
	        value: function draw(typeObject, item, header, typeChart, direction, part, addition, row) {
	            var $log = this.$log;
	            var title = this.selectTitleForPart(part) + '_' + addition + '_' + header;
	            var data = void 0;
	            data = this.prepareDataToDraw(typeObject, item, header, direction, title, row);
	            //$log.info('test draw rpt0511 a', type);
	            var modalOption = {
	                size: 'dialog-1024',
	                controller: _report.ReportDialogController,
	                resolve: {
	                    data: data,
	                    type: typeChart
	                }
	            };

	            this.DialogService.open('report_chart', modalOption);
	        }
	    }]);

	    return Rpt0510Controller;
	}();

	var Rpt0510Component = exports.Rpt0510Component = {
	    //templateUrl: './views/app/components/rpt0510/rpt0510.component.html',
	    templateUrl: '/views/admin.rpt0510',
	    controller: Rpt0510Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Rpt0513Component = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _report = __webpack_require__(86);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Rpt0513Controller = function () {
	    Rpt0513Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "DialogService", "ClientService", "ChartService"];
	    function Rpt0513Controller($scope, $state, $compile, $log, AclService, API, UtilsService, DialogService, ClientService, ChartService) {
	        'ngInject';

	        _classCallCheck(this, Rpt0513Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.DialogService = DialogService;
	        this.ClientService = ClientService;
	        this.ChartService = ChartService;

	        this.m = {
	            download: [0, 0, 0, 0],
	            activeFlag: 1,
	            datetimepicker_options: {
	                viewMode: 'years',
	                format: 'YYYY'
	            }
	        };
	        this.m.tab_name = ['', 'Overview', 'Nhập hàng', 'Giao hàng', 'Warranty', 'Hàng nợ', 'Profit'];

	        for (var i = 1; i < 9; i++) {
	            this.m[i] = {
	                filter: {
	                    year: moment().format('YYYY'),
	                    data_type: 1,
	                    view_mode: 1,
	                    time_mode: "0",
	                    tab: i,
	                    current_rate: 23500,
	                    supplier_id: ""
	                },
	                data: {
	                    total: 0
	                }
	            };
	        }

	        // this.m.filter.order_date = new Date();
	        this.onInit();
	    }

	    _createClass(Rpt0513Controller, [{
	        key: 'condition_direction',
	        value: function condition_direction(orderDirection, a_first, a_second) {
	            if (orderDirection == 'asc') {
	                if (a_first > a_second) {
	                    return true;
	                } else {
	                    return false;
	                }
	            } else {
	                if (a_first < a_second) {
	                    return true;
	                } else {
	                    return false;
	                }
	            }
	        }
	    }, {
	        key: 'sort_direction',
	        value: function sort_direction(orderBy, orderDirection) {
	            // this.$log.info('info 1');
	            var temp = {};
	            for (var i = 0; i < this.m[7].data.length - 1; i++) {
	                for (var j = i + 1; j < this.m[7].data.length; j++) {
	                    if (this.condition_direction(orderDirection, this.m[7].data[i][orderBy], this.m[7].data[j][orderBy])) {
	                        temp = this.m[7].data[i];
	                        this.m[7].data[i] = this.m[7].data[j];
	                        this.m[7].data[j] = temp;
	                    }
	                }
	            }
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy, activeFlag) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m[activeFlag].filter.orderBy, this.m[activeFlag].filter.orderDirection);
	            this.m[activeFlag].filter.orderBy = orderOption.orderBy;
	            this.m[activeFlag].filter.orderDirection = orderOption.orderDirection;
	            // this.$log.info('info 2');
	            this.sort_direction(orderBy, orderOption.orderDirection);
	        }
	    }, {
	        key: 'onInit',
	        value: function onInit() {
	            var previousSearch = sessionStorage.rpt0513;
	            this.loadInit();
	            if (angular.isUndefined(previousSearch)) {
	                this.loadData(3);
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var index = previousSearch.index;

	            this.m.activeFlag = index;
	            delete previousSearch['index'];
	            this.m[index].filter = angular.copy(previousSearch);
	            this.loadData(this.m.activeFlag);
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var loadService = this.API.service('load-init', this.API.all('rpt0513'));
	            // let param = angular.copy(this.m.filter);

	            loadService.post().then(function (response) {
	                _this.$log.info(response);
	                _this.m.init = response.plain().data;
	            });
	        }
	    }, {
	        key: 'chooseTab',
	        value: function chooseTab(index) {
	            if (index < 1 || index > 10) {
	                return;
	            }
	            // this.$log.info('check : ',this.m);
	            this.m.activeFlag = index;
	            this.loadData(index);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter(index) {
	            if (index < 1 || index > 10) {
	                return;
	            }
	            this.m[index].filter = {
	                year: moment().format('YYYY'),
	                data_type: 1,
	                time_mode: "0",
	                view_mode: 1,
	                tab: index
	            };
	            this.loadData(index);
	        }
	    }, {
	        key: 'loadData',
	        value: function loadData(index) {
	            var thisClass = this;
	            var $log = this.$log;

	            var servicePart1Child = this.API.service('load-data', this.API.all('rpt0513'));
	            var year = null;
	            var param = angular.copy(this.m[index].filter);
	            param.index = index;
	            if (param.year == null) {
	                year = moment();
	                param.year = year.format('YYYY');
	                this.m[index].filter = param;
	            } else {
	                param.year = moment(param.year).format('YYYY');
	            }
	            sessionStorage.rpt0513 = angular.toJson(param);
	            $log.info('this.m[index].filter', this.m[index].filter);
	            $log.info('param 1', param);
	            servicePart1Child.post(param).then(function (response) {
	                // thisClass.m.downloadPart1[year] = 1;
	                thisClass.m[index].data = response.data;
	                // $log.info('data', thisClass.m[index].data);
	                if (index == 7) {
	                    $log.info('param 1');
	                    thisClass.makePriceList();
	                }
	            });
	        }
	    }, {
	        key: 'makePriceList',
	        value: function makePriceList() {
	            var $log = this.$log;
	            var current_rate = this.m[7].filter.current_rate;
	            var discount = [44, 47, 50, 53, 56, 59, 62, 67];
	            angular.forEach(this.m[7].data, function (value) {
	                value["cost"] = value.purchase_price / (1 - 10 / 100 - 0.35 / 100 - 0.3 / 100) * current_rate;
	                for (var i = 0; i < discount.length; i++) {
	                    // $log.info('param 1', discount[i]);
	                    value["v" + discount[i].toString()] = value.selling_price * (1 - discount[i] / 100) - value["cost"];
	                    value["p" + discount[i].toString()] = value["v" + discount[i].toString()] / value["cost"] * 100;
	                }
	            });
	            $log.info('data ', this.m[7].data);
	        }
	    }, {
	        key: 'line_chart',
	        value: function line_chart(item) {
	            var title = "";
	            var that = this;
	            var $log = this.$log;
	            var param = angular.copy(that.m[that.m.activeFlag].filter);
	            var data = null;
	            var root_title = "";
	            var name = [];
	            var activeFlag = that.m.activeFlag;
	            param.index = activeFlag;
	            name.push(that.m.tab_name[activeFlag]);
	            name.push(item['Name']);

	            if (param.index == 3 || param.index == 4) {
	                if (param['data_type']) {
	                    for (var i = 0; i < this.m.init.listDataType.length; i++) {

	                        if (this.m.init.listDataType[i].id == param['data_type']) {
	                            name.push(this.m.init.listDataType[i].name);
	                            break;
	                        }
	                    }
	                }
	            } else if (param.index == 2) {
	                if (param['data_type'] == 1) {
	                    name.push("Số lượng");
	                } else {
	                    name.push("Số tiên USD");
	                }
	            }

	            if (param['product_cat_id']) {
	                for (var i = 0; i < this.m.init.catList.length; i++) {
	                    if (this.m.init.catList[i].product_cat_id == param['product_cat_id']) {
	                        name.push(this.m.init.catList[i].name);
	                        break;
	                    }
	                }
	            }

	            if (param['area_group_id']) {
	                for (var i = 0; i < this.m.init.listAreaGroup.length; i++) {
	                    // $log.info('name',this.m.init.listAreaGroup[i]);
	                    if (this.m.init.listAreaGroup[i].area_group_id == param['area_group_id']) {
	                        name.push(this.m.init.listAreaGroup[i].name);
	                        break;
	                    }
	                }
	            }
	            if (param['area1']) {
	                for (var i = 0; i < this.m.init.listArea1.length; i++) {
	                    if (this.m.init.listArea1[i].area_id == param['area1']) {
	                        name.push(this.m.init.listArea1[i].name);
	                        break;
	                    }
	                }
	            }

	            if (param['salesman_id']) {
	                for (var i = 0; i < this.m.init.salesmanList.length; i++) {
	                    if (this.m.init.salesmanList[i].id == param['salesman_id']) {
	                        name.push(this.m.init.salesmanList[i].name);
	                        break;
	                    }
	                }
	            }
	            for (var i = 0; i < name.length; i++) {
	                root_title = root_title + ' - ' + name[i];
	            }
	            if (param.time_mode == 0) {
	                data = that.ChartService.get_line_by_month(item, param, root_title);
	            } else {
	                data = that.ChartService.get_line_by_year(item, root_title);
	            }
	            $log.info('data line', data);
	            var modalOption = {
	                size: 'dialog-1024',
	                controller: _report.ReportDialogController,
	                resolve: {
	                    data: { 1: data }
	                }
	            };
	            that.DialogService.open('report_chart', modalOption);
	        }
	    }, {
	        key: 'draw_vertical',
	        value: function draw_vertical(activeFlag, category) {
	            var data = this.m[activeFlag].data.data;
	            var param = this.m[activeFlag].filter;
	            param.index = activeFlag;

	            var $log = this.$log;
	            var key_name = 'Name';
	            var root_title = "";
	            var name = [];
	            if (param["time_mode"] == 0) {
	                name.push(moment(param.year).format('YYYY'));
	            }
	            name.push(" Top 15 theo ");
	            name.push(this.m.tab_name[activeFlag]);
	            name.push(category);

	            if (param['import_type']) {
	                if (param['import_type'] == 1) {
	                    name.push("Bảo hành");
	                } else {
	                    name.push("Trả lại");
	                }
	            }

	            if (param.index == 3 || param.index == 4) {
	                if (param['data_type']) {
	                    for (var i = 0; i < this.m.init.listDataType.length; i++) {

	                        if (this.m.init.listDataType[i].id == param['data_type']) {
	                            name.push(this.m.init.listDataType[i].name);
	                            break;
	                        }
	                    }
	                }
	            } else if (param.index == 2) {
	                if (param['data_type'] == 1) {
	                    name.push("Số lượng");
	                } else {
	                    name.push("Số tiên USD");
	                }
	            }

	            if (param['handle_id']) {

	                for (var i = 0; i < this.m.init.handleList.length; i++) {
	                    $log.info('handle name', this.m.init.handleList[i]);
	                    if (this.m.init.handleList[i].handle_id == param['handle_id']) {
	                        name.push(this.m.init.handleList[i].name);
	                        break;
	                    }
	                }
	            }

	            if (param['product_cat_id']) {
	                for (var i = 0; i < this.m.init.catList.length; i++) {
	                    // $log.info('name',this.m.init.catList[i]);
	                    if (this.m.init.catList[i].product_cat_id == param['product_cat_id']) {
	                        name.push(this.m.init.catList[i].name);
	                        break;
	                    }
	                }
	            }
	            if (param['area_group_id']) {
	                for (var i = 0; i < this.m.init.listAreaGroup.length; i++) {
	                    // $log.info('name',this.m.init.listAreaGroup[i]);
	                    if (this.m.init.listAreaGroup[i].area_group_id == param['area_group_id']) {
	                        name.push(this.m.init.listAreaGroup[i].name);
	                        break;
	                    }
	                }
	            }
	            if (param['area1']) {
	                for (var i = 0; i < this.m.init.listArea1.length; i++) {
	                    if (this.m.init.listArea1[i].area_id == param['area1']) {
	                        name.push(this.m.init.listArea1[i].name);
	                        break;
	                    }
	                }
	            }

	            if (param['salesman_id']) {
	                for (var i = 0; i < this.m.init.salesmanList.length; i++) {
	                    if (this.m.init.salesmanList[i].id == param['salesman_id']) {
	                        name.push(this.m.init.salesmanList[i].name);
	                        break;
	                    }
	                }
	            }

	            $log.info('name', name);

	            for (var i = 0; i < name.length; i++) {
	                root_title = root_title + ' - ' + name[i];
	            }
	            var title = {
	                0: root_title,
	                1: root_title
	            };
	            var data_chart = this.ChartService.get_vertical(data, param, title, category, key_name);

	            var modalOption = {
	                size: 'dialog-1024',
	                controller: _report.ReportDialogController,
	                resolve: {
	                    data: { 1: data_chart }
	                }
	            };

	            this.DialogService.open('report_chart', modalOption);
	        }
	    }, {
	        key: 'compare',
	        value: function compare(item) {
	            var compareService = this.API.service('compare', this.API.all('rpt0513'));
	            var year = null;
	            var that = this;

	            var param = angular.copy(that.m[that.m.activeFlag].filter);
	            var activeFlag = that.m.activeFlag;
	            param.id = item.id;
	            param.year = null;
	            param.index = activeFlag;

	            var $log = this.$log;
	            var root_title = "";
	            var name = [];
	            $log.info('param compare', param);

	            name.push(that.m.tab_name[activeFlag]);
	            name.push(item['Name']);
	            if (param.index == 3 || param.index == 4) {
	                if (param['data_type']) {
	                    for (var i = 0; i < this.m.init.listDataType.length; i++) {

	                        if (this.m.init.listDataType[i].id == param['data_type']) {
	                            name.push(this.m.init.listDataType[i].name);
	                            break;
	                        }
	                    }
	                }
	            } else if (param.index == 2) {
	                if (param['data_type'] == 1) {
	                    name.push("Số lượng (cái)");
	                } else {
	                    name.push("Số tiên USD");
	                }
	            }

	            if (param['area_group_id']) {
	                for (var i = 0; i < this.m.init.listAreaGroup.length; i++) {
	                    $log.info('name', this.m.init.listAreaGroup[i]);
	                    if (this.m.init.listAreaGroup[i].area_group_id == param['area_group_id']) {
	                        name.push(this.m.init.listAreaGroup[i].name);
	                        break;
	                    }
	                }
	            }
	            if (param['area1']) {
	                for (var i = 0; i < this.m.init.listArea1.length; i++) {
	                    if (this.m.init.listArea1[i].area_id == param['area1']) {
	                        name.push(this.m.init.listArea1[i].name);
	                        break;
	                    }
	                }
	            }

	            if (param['salesman_id']) {
	                for (var i = 0; i < this.m.init.salesmanList.length; i++) {
	                    if (this.m.init.salesmanList[i].id == param['salesman_id']) {
	                        name.push(this.m.init.salesmanList[i].name);
	                        break;
	                    }
	                }
	            }
	            for (var i = 0; i < name.length; i++) {
	                root_title = root_title + ' - ' + name[i];
	            }
	            var title = {
	                0: "So sánh giữa 4 năm " + root_title,
	                1: "So sánh luỹ kế giữa 4 năm " + root_title,
	                2: "Chuyển động 4 năm " + root_title
	            };

	            compareService.post(param).then(function (response) {
	                // thisClass.m.downloadPart1[year] = 1;
	                var res = response.data;
	                $log.info('res', res);
	                var data = that.ChartService.get_compare(res, param, title);

	                var modalOption = {
	                    size: 'dialog-1024',
	                    controller: _report.ReportDialogController,
	                    resolve: {
	                        data: data
	                    }
	                };
	                that.DialogService.open('report_chart', modalOption);
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download(data) {
	            var _this2 = this;

	            var param = {
	                data: data
	            };
	            var service = this.API.service('download', this.API.all('rpt0513'));
	            service.post(param).then(function (response) {
	                //this.$log.info(response.data);
	                _this2.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Rpt0513Controller;
	}();

	var Rpt0513Component = exports.Rpt0513Component = {
	    //templateUrl: './views/app/components/rpt0513/rpt0513.component.html',
	    templateUrl: '/views/admin.rpt0513.rpt0513',
	    controller: Rpt0513Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Rpt0512Component = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _report = __webpack_require__(86);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Rpt0512Controller = function () {
	    Rpt0512Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "DialogService", "ChartService"];
	    function Rpt0512Controller($scope, $state, $compile, $log, AclService, API, UtilsService, DialogService, ChartService) {
	        'ngInject';

	        _classCallCheck(this, Rpt0512Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.DialogService = DialogService;
	        this.ChartService = ChartService;

	        this.m = {
	            download: [0, 0, 0, 0],
	            activeFlag: 1,
	            datetimepicker_options: {
	                viewMode: 'years',
	                format: 'YYYY'
	            }
	        };

	        this.m.tab_name = ['', 'Giao hàng', 'Đặt hàng', 'Thanh toán', '', 'Cửa hàng mới', 'Bảo hành'];

	        for (var i = 1; i < 7; i++) {
	            this.m[i] = {
	                filter: {
	                    data_type: 1,
	                    view_mode: 1,
	                    time_mode: "0",
	                    year: moment().format('YYYY')
	                },
	                data: {
	                    total: 0
	                }
	            };
	        }
	        // this.m.filter.order_date = new Date();
	        this.onInit();
	    }

	    _createClass(Rpt0512Controller, [{
	        key: 'onInit',
	        value: function onInit() {
	            var previousSearch = sessionStorage.rpt0512;
	            this.loadInit();
	            if (angular.isUndefined(previousSearch)) {
	                this.loadData(1);
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var index = previousSearch.index;

	            this.m.activeFlag = index;
	            delete previousSearch['index'];
	            this.m[index].filter = angular.copy(previousSearch);
	            this.loadData(this.m.activeFlag);
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var loadService = this.API.service('load-init', this.API.all('rpt0512'));
	            // let param = angular.copy(this.m.filter);

	            loadService.post().then(function (response) {
	                _this.$log.info(response);
	                _this.m.init = response.plain().data;
	            });
	        }
	    }, {
	        key: 'chooseTab',
	        value: function chooseTab(index) {
	            if (index < 1 || index > 9) {
	                return;
	            }
	            // this.$log.info('check : ',this.m);
	            this.m.activeFlag = index;
	            this.loadData(index);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter(index) {
	            if (index < 1 || index > 9) {
	                return;
	            }
	            this.m[index].filter = {
	                data_type: 1,
	                view_mode: 1,
	                time_mode: "0",
	                year: moment().format('YYYY')
	            };
	            this.loadData(index);
	        }
	    }, {
	        key: 'loadData',
	        value: function loadData(index) {
	            var thisClass = this;
	            var $log = this.$log;

	            var servicePart1Child = this.API.service('load-data', this.API.all('rpt0512'));
	            var year = null;
	            var param = angular.copy(this.m[index].filter);
	            param.index = index;
	            if (param.year == null) {
	                year = moment();
	                param.year = year.format('YYYY');
	                this.m[index].filter = param;
	            } else {
	                param.year = moment(param.year).format('YYYY');
	            }
	            sessionStorage.rpt0512 = angular.toJson(param);

	            $log.info('param ', param);
	            servicePart1Child.post(param).then(function (response) {
	                // thisClass.m.downloadPart1[year] = 1;
	                $log.info('thisClass.m[index] ', thisClass.m[index]);

	                thisClass.m[index].data = response.data;
	            });
	        }
	    }, {
	        key: 'draw_vertical',
	        value: function draw_vertical(activeFlag, category) {
	            var data = this.m[activeFlag].data.data;
	            var param = this.m[activeFlag].filter;
	            var $log = this.$log;
	            var key_name = 'Name';
	            var root_title = "";

	            var name = [];

	            if (param["time_mode"] == 0) {
	                name.push(moment(param.year).format('YYYY'));
	            }
	            name.push(" Top 15 theo ");
	            name.push(this.m.tab_name[activeFlag]);
	            name.push(category);

	            if (param['area_group_id']) {
	                for (var i = 0; i < this.m.init.listAreaGroup.length; i++) {
	                    // $log.info('name',this.m.init.listAreaGroup[i]);
	                    if (this.m.init.listAreaGroup[i].area_group_id == param['area_group_id']) {
	                        name.push(this.m.init.listAreaGroup[i].name);
	                        break;
	                    }
	                }
	            }

	            $log.info('name', name);

	            if (activeFlag == 1 || activeFlag == 2) {
	                if (param['data_type']) {
	                    for (var i = 0; i < this.m.init.listDataType.length; i++) {
	                        if (this.m.init.listDataType[i].id == param['data_type']) {
	                            name.push(this.m.init.listDataType[i].name);
	                            break;
	                        }
	                    }
	                }
	            }
	            if (param['salesman_id']) {
	                for (var i = 0; i < this.m.init.salesmanList.length; i++) {
	                    if (this.m.init.salesmanList[i].id == param['salesman_id']) {
	                        name.push(this.m.init.salesmanList[i].name);
	                        break;
	                    }
	                }
	            }
	            for (var i = 0; i < name.length; i++) {
	                root_title = root_title + ' - ' + name[i];
	            }
	            var title = {
	                0: root_title,
	                1: root_title
	            };
	            var data_chart = this.ChartService.get_vertical(data, param, title, category, key_name);

	            var modalOption = {
	                size: 'dialog-1024',
	                controller: _report.ReportDialogController,
	                resolve: {
	                    data: { 1: data_chart }
	                }
	            };

	            this.DialogService.open('report_chart', modalOption);
	        }
	    }, {
	        key: 'line_chart',
	        value: function line_chart(item) {
	            var title = "";
	            var that = this;
	            var $log = this.$log;
	            var param = angular.copy(that.m[that.m.activeFlag].filter);
	            var data = null;
	            var root_title = "";
	            var name = [];
	            var activeFlag = that.m.activeFlag;
	            name.push(that.m.tab_name[activeFlag]);
	            name.push(item['Name']);

	            if (activeFlag == 1 || activeFlag == 2) {
	                if (param['data_type']) {
	                    for (var i = 0; i < this.m.init.listDataType.length; i++) {
	                        if (this.m.init.listDataType[i].id == param['data_type']) {
	                            name.push(this.m.init.listDataType[i].name);
	                            break;
	                        }
	                    }
	                }
	            }
	            if (param['import_type']) {
	                if (param['import_type'] == 1) {
	                    name.push("Bảo hành");
	                } else {
	                    name.push("Trả lại");
	                }
	            }
	            if (param['area_group_id']) {
	                for (var i = 0; i < this.m.init.listAreaGroup.length; i++) {
	                    // $log.info('name',this.m.init.listAreaGroup[i]);
	                    if (this.m.init.listAreaGroup[i].area_group_id == param['area_group_id']) {
	                        name.push(this.m.init.listAreaGroup[i].name);
	                        break;
	                    }
	                }
	            }
	            if (param['salesman_id']) {
	                for (var i = 0; i < this.m.init.salesmanList.length; i++) {
	                    if (this.m.init.salesmanList[i].id == param['salesman_id']) {
	                        name.push(this.m.init.salesmanList[i].name);
	                        break;
	                    }
	                }
	            }
	            for (var i = 0; i < name.length; i++) {
	                root_title = root_title + ' - ' + name[i];
	            }
	            if (param.time_mode == 0) {
	                data = that.ChartService.get_line_by_month(item, param, root_title);
	            } else {
	                data = that.ChartService.get_line_by_year(item, root_title);
	            }
	            $log.info('data line', data);
	            var modalOption = {
	                size: 'dialog-1024',
	                controller: _report.ReportDialogController,
	                resolve: {
	                    data: { 1: data }
	                }
	            };
	            that.DialogService.open('report_chart', modalOption);
	        }
	    }, {
	        key: 'compare',
	        value: function compare(item) {
	            var compareService = this.API.service('compare', this.API.all('rpt0512'));

	            var that = this;
	            var param = angular.copy(that.m[that.m.activeFlag].filter);
	            var activeFlag = that.m.activeFlag;

	            param.index = that.m.activeFlag;
	            // id of area : area id
	            param.id = item.id;
	            // To load 3 year of area id
	            param.year = null;
	            var root_title = "";
	            var name = [];

	            name.push(that.m.tab_name[activeFlag]);
	            name.push(item['Name']);
	            if (activeFlag == 1 || activeFlag == 2) {
	                if (param['data_type']) {
	                    for (var i = 0; i < this.m.init.listDataType.length; i++) {
	                        if (this.m.init.listDataType[i].id == param['data_type']) {
	                            name.push(this.m.init.listDataType[i].name);
	                            break;
	                        }
	                    }
	                }
	            }

	            for (var i = 0; i < name.length; i++) {
	                root_title = root_title + ' - ' + name[i];
	            }
	            var title = {
	                0: "So sánh giữa 4 năm " + root_title,
	                1: "So sánh luỹ kế giữa 4 năm " + root_title,
	                2: "Chuyển động 4 năm " + root_title
	            };
	            // $log.info('param ', param);  
	            compareService.post(param).then(function (response) {
	                // thisClass.m.downloadPart1[year] = 1;
	                var res = response.data;

	                var data = that.ChartService.get_compare(res, param, title);
	                var modalOption = {
	                    size: 'dialog-1024',
	                    controller: _report.ReportDialogController,
	                    resolve: {
	                        data: data
	                    }
	                };
	                that.DialogService.open('report_chart', modalOption);
	            });
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Rpt0512Controller;
	}();

	var Rpt0512Component = exports.Rpt0512Component = {
	    //templateUrl: './views/app/components/rpt0512/rpt0512.component.html',
	    templateUrl: '/views/admin.rpt0512.rpt0512',
	    controller: Rpt0512Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Rpt0511Component = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _report = __webpack_require__(86);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Rpt0511Controller = function () {
	    Rpt0511Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "DialogService", "ChartService"];
	    function Rpt0511Controller($scope, $state, $compile, $log, AclService, API, UtilsService, DialogService, ChartService) {
	        'ngInject';

	        _classCallCheck(this, Rpt0511Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.DialogService = DialogService;
	        this.ChartService = ChartService;

	        this.m = {

	            activeFlag: 1,
	            datetimepicker_options: {
	                viewMode: 'years',
	                format: 'YYYY'
	            }
	        };
	        for (var i = 1; i < 5; i++) {
	            this.m[i] = {
	                filter: {
	                    year: moment().format('YYYY'),
	                    data_type: "1"
	                },
	                data: {
	                    total: 0
	                }
	            };
	        }
	        // this.m.filter.order_date = new Date();
	        this.onInit();
	    }

	    _createClass(Rpt0511Controller, [{
	        key: 'onInit',
	        value: function onInit() {
	            var previousSearch = sessionStorage.rpt0511;
	            this.loadInit();
	            if (angular.isUndefined(previousSearch)) {
	                this.loadData(1);
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var index = previousSearch.index;

	            this.m.activeFlag = index;
	            delete previousSearch['index'];
	            this.m[index].filter = angular.copy(previousSearch);
	            this.loadData(this.m.activeFlag);
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var loadService = this.API.service('load-init', this.API.all('rpt0511'));
	            // let param = angular.copy(this.m.filter);

	            loadService.post().then(function (response) {
	                _this.$log.info(response);
	                _this.m.init = response.plain().data;
	            });
	        }
	    }, {
	        key: 'chooseTab',
	        value: function chooseTab(index) {
	            if (index < 1 || index > 9) {
	                return;
	            }
	            // this.$log.info('check : ',this.m);
	            this.m.activeFlag = index;
	            this.loadData(index);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter(index) {
	            if (index < 1 || index > 9) {
	                return;
	            }
	            this.m[index].filter = {
	                year: moment().format('YYYY'),
	                data_type: "1"
	            };
	            this.loadData(index);
	        }
	    }, {
	        key: 'loadData',
	        value: function loadData(index) {
	            var thisClass = this;
	            var $log = this.$log;

	            var servicePart1Child = this.API.service('load-data', this.API.all('rpt0511'));
	            var year = null;
	            var param = angular.copy(this.m[index].filter);
	            param.index = index;
	            if (param.year == null) {
	                year = moment();
	                param.year = year.format('YYYY');
	                this.m[index].filter = param;
	            } else {
	                param.year = moment(param.year).format('YYYY');
	            }
	            sessionStorage.rpt0511 = angular.toJson(param);

	            $log.info('param ', param);
	            servicePart1Child.post(param).then(function (response) {
	                // thisClass.m.downloadPart1[year] = 1;
	                thisClass.m[index].data = response.data;
	                $log.info(thisClass.m);
	            });
	        }
	    }, {
	        key: 'draw_vertical',
	        value: function draw_vertical(activeFlag, category) {
	            var data = this.m[activeFlag].data.data;
	            var param = this.m[activeFlag].filter;
	            var $log = this.$log;
	            var key_name = 'Name';

	            var data_chart = this.ChartService.get_vertical(data, param, category, key_name);

	            var modalOption = {
	                size: 'dialog-1024',
	                controller: _report.ReportDialogController,
	                resolve: {
	                    data: { 1: data_chart }
	                }
	            };

	            this.DialogService.open('report_chart', modalOption);
	        }
	    }, {
	        key: 'compare',
	        value: function compare(item) {

	            var $log = this.$log;

	            var compareService = null;
	            var that = this;
	            var param = angular.copy(item);
	            if (that.m.activeFlag == 1) {
	                compareService = that.API.service('compare', that.API.all('rpt0518'));
	            } else if (that.m.activeFlag == 2) {
	                param.index = 1;
	                compareService = that.API.service('compare', that.API.all('rpt0512'));
	            }if (that.m.activeFlag == 3) {
	                compareService = that.API.service('compare', that.API.all('rpt0513'));
	                param.type = 2;
	                param.area_group_id = that.m[that.m.activeFlag].filter.area_group_id;
	                param.data_type = that.m[that.m.activeFlag].filter.data_type;
	            }

	            $log.info('test param:', param);

	            compareService.post(param).then(function (response) {
	                // thisClass.m.downloadPart1[year] = 1;
	                var res = response.data;
	                $log.info('test response:', res);
	                var data = that.ChartService.get_compare(res, item);
	                var modalOption = {
	                    size: 'dialog-1024',
	                    controller: _report.ReportDialogController,
	                    resolve: {
	                        data: data
	                    }
	                };
	                that.DialogService.open('report_chart', modalOption);
	            });
	        }
	    }]);

	    return Rpt0511Controller;
	}();

	var Rpt0511Component = exports.Rpt0511Component = {
	    //templateUrl: './views/app/components/rpt0511/rpt0511.component.html',
	    templateUrl: '/views/admin.rpt0511.rpt0511',
	    controller: Rpt0511Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 167 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Cms0210Controller = function () {
	    Cms0210Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Cms0210Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Cms0210Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.RouteService = RouteService;

	        this.m = {
	            form: {
	                publishDate: moment(),
	                file: null
	            },
	            formUpload: {
	                file: null,
	                images: []
	            },
	            datetimepicker_options: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };

	        if ($stateParams.id > 0) {
	            this.m.form.id = $stateParams.id;
	        } else {
	            this.m.form.id = 0;
	        }
	    }

	    _createClass(Cms0210Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this._setupFileUpload("file", this.m.form);
	            this._setupFileUpload("fileUpload", this.m.formUpload);

	            this.m.urlImageFrontend = document.getElementById('urlImageFrontend').value;
	            this.loadInitData();
	            this.loadImageList();
	        }
	    }, {
	        key: '_setupFileUpload',
	        value: function _setupFileUpload(fileControlId, formModel) {
	            var self = this;
	            var fileControl = angular.element("#" + fileControlId);
	            fileControl.on('change', function () {
	                var filesSelected = fileControl[0].files;
	                if (filesSelected.length > 0) {
	                    var fileToLoad = filesSelected[0];
	                    var fileReader = new FileReader();

	                    fileReader.onload = function (fileLoadedEvent) {
	                        var srcData = fileLoadedEvent.target.result; // <--- data: base64 
	                        self.$scope.$apply(function () {
	                            formModel.file = srcData;
	                        });
	                    };
	                    fileReader.readAsDataURL(fileToLoad);
	                }
	            });
	        }
	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var self = this;
	            if (this.m.form.id > 0) {
	                var service = this.API.service('load', this.API.all('cms0210'));
	                var param = { newsId: this.m.form.id };
	                service.post(param).then(function (response) {
	                    self.m.form.title = response.data.news[0].title;
	                    self.m.form.publishDate = moment(response.data.news[0].publish_date);
	                    self.m.form.description = response.data.news[0].description;
	                    self.m.form.keywords = response.data.news[0].keywords;
	                    self.m.form.content = response.data.news[0].content;
	                    self.m.form.short_content = response.data.news[0].short_content;
	                    self.m.form.slug = response.data.news[0].slug;
	                    if (response.data.news[0].feature_image_path != null && response.data.news[0].feature_image_path.length > 0) {
	                        self.m.form.pathFile = self.m.urlImageFrontend + response.data.news[0].feature_image_path;
	                    }
	                });
	            } else {
	                this.m.form.content = '\n<p>\n    Nh\u1EB1m h\u1ED7 tr\u1EE3 c\xE1c \u0111\u1EA1i l\xFD kinh doanh s\u1EA3n ph\u1EA9m WaterTec, C\xF4ng ty Phan Khang Home th\u1EF1c hi\u1EC7n \u0111\u0103ng qu\u1EA3ng c\xE1o d\xF2ng s\u1EA3n ph\u1EA9m cao c\u1EA5p KATANA tr\xEAn B\xE1o Tu\u1ED5i tr\u1EBB ra ng\xE0y th\u1EE9 T\u01B0 (15/2/2017). \n    M\u1ECDi chi ti\u1EBFt vui l\xF2ng li\xEAn h\u1EC7 hotline <a class="btn-ga" ga-cat="contact" ga-action="call" ga-label="0906610116" href="tel:0906610116">(+84)90-6610-116</a> ho\u1EB7c <a class="btn-ga" ga-cat="contact" ga-action="click" ga-label="www.phankhangco.com" href="http://www.phankhangco.com">www.phankhangco.com</a>\n</p>';
	            }
	        }
	    }, {
	        key: 'save',
	        value: function save(isValid) {
	            var thisClass = this;

	            if (isValid) {
	                thisClass.$log.info('send');
	                var service = this.API.service('cms0210');
	                var param = angular.copy(this.m.form);
	                if (param.publishDate != null && moment.isMoment(param.publishDate)) {
	                    param.publishDate = param.publishDate.format('YYYY-MM-DD');
	                }
	                service.post(param).then(function (response) {
	                    thisClass.$log.info('response', response);
	                    if (thisClass.m.form.id > 0) {
	                        thisClass.ClientService.success('Cập nhật tin tức thành công');
	                    } else {
	                        thisClass.ClientService.success('Thêm mới tin tức thành công');
	                    }

	                    // thisClass.RouteService.goState('app.cms0200')
	                    thisClass.RouteService.goState('app.cms0211', { id: response.data.newsId });
	                }, function (response) {
	                    thisClass.$log.info('response', response);
	                    thisClass.ClientService.error('Đã có lỗi xãy ra');
	                });
	            } else {
	                this.formSubmitted = true;
	            }
	        }
	    }, {
	        key: 'upload',
	        value: function upload() {
	            var self = this;
	            var service = this.API.service('upload', this.API.all('cms0210'));
	            var param = {
	                id: this.m.form.id,
	                file: this.m.formUpload.file
	            };

	            if (param.id > 0) {
	                service.post(param).then(function (response) {
	                    if (response.data.rtnCd == true) {
	                        self.m.formUpload.file = null;
	                        self.ClientService.success('Thêm hình ảnh tin tức thành công');
	                        self.loadImageList();
	                    } else {
	                        self.ClientService.error('Không thể thêm hình ảnh');
	                    }
	                });
	            }
	        }
	    }, {
	        key: 'loadImageList',
	        value: function loadImageList() {
	            var self = this;
	            var param = {
	                id: this.m.form.id
	            };

	            if (param.id > 0) {
	                var service = this.API.service('load-images', this.API.all('cms0210'));

	                service.post(param).then(function (response) {
	                    if (response.data.rtnCd == true) {
	                        self.m.formUpload.images = response.data.list;
	                    } else {
	                        self.ClientService.error('Có lỗi khi tải hình ảnh');
	                    }
	                });
	            }
	        }
	    }, {
	        key: 'removeImage',
	        value: function removeImage(file) {
	            file = file.substr(file.lastIndexOf("/") + 1);

	            var self = this;
	            swal({
	                title: 'B\u1EA1n c\xF3 mu\u1ED1n x\xF3a h\xECnh \u1EA3nh "' + file + '" kh\xF4ng?',
	                text: "Hình ảnh này sẽ không còn hiển thị trong nội dung tin tức được nữa, hãy chắn chắn rằng bạn đã không còn sử dụng hình ảnh này.",
	                type: "warning",
	                showCancelButton: true,
	                confirmButtonColor: '#DD6B55',
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var param = {
	                    id: self.m.form.id,
	                    file: file
	                };

	                var service = self.API.service('remove-image', self.API.all('cms0210'));
	                service.post(param).then(function (res) {
	                    self.loadImageList();
	                });
	            });
	        }
	    }, {
	        key: 'insertImage',
	        value: function insertImage(file) {
	            var imgTag = '\n        <p class="text-center" style="align: text-center">\n        <img class="img-responsive" src=\'' + this.m.urlImageFrontend + '/' + file + '\' alt="watertec" style="margin:0 auto" />\n        </p>\n        ';
	            this.m.form.content = this.m.form.content + imgTag;
	        }
	    }]);

	    return Cms0210Controller;
	}();

	var Cms0210Component = exports.Cms0210Component = {
	    //templateUrl: './views/app/components/cms0210/cms0210.component.html',
	    templateUrl: '/views/admin.cms0210',
	    controller: Cms0210Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 168 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Cms0200Controller = function () {
	    Cms0200Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService"];
	    function Cms0200Controller($scope, $state, $compile, $log, AclService, API, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Cms0200Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;

	        this.m = {
	            filter: {},
	            data: null,
	            dateOptions: {
	                // formatYear: 'yy',
	                startingDay: 1
	            },
	            datetimepicker_options: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Cms0200Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.cms0200;

	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            this.doSearch(page);
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var thisClass = this;
	            // Get list 
	            var searchService = this.API.service('search', this.API.all('cms0200'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;

	            sessionStorage.cms0200 = angular.toJson(param);

	            thisClass.$log.info('param', param);
	            searchService.post(param).then(function (response) {
	                thisClass.$log.info(response.plain().data);
	                thisClass.m.data = response.plain().data.data;
	                thisClass.$log.info(thisClass.m.data);
	            });
	        }
	    }, {
	        key: 'updateShow',
	        value: function updateShow(id, show_flg) {
	            var thisClass = this;
	            // Get list 
	            var searchService = this.API.service('edit', this.API.all('cms0200'));
	            var param = {
	                id: id,
	                show_flg: show_flg
	            };

	            searchService.post(param).then(function (response) {
	                var resData = response.plain().data.data;
	                if (resData.rtnCd) {
	                    thisClass.doSearch(thisClass.m.filter.page);
	                    thisClass.ClientService.success(resData.msg);
	                } else {
	                    thisClass.ClientService.error(resData.msg);
	                }
	            });
	        }
	    }]);

	    return Cms0200Controller;
	}();

	var Cms0200Component = exports.Cms0200Component = {
	    //templateUrl: './views/app/components/cms0200/cms0200.component.html',
	    templateUrl: '/views/admin.cms0200',
	    controller: Cms0200Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 169 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0911Controller = function () {
	    Crm0911Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Crm0911Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm0911Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;

	        this.m = {};
	    }

	    _createClass(Crm0911Controller, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Crm0911Controller;
	}();

	var Crm0911Component = exports.Crm0911Component = {
	    //templateUrl: './views/app/components/crm0911/crm0911.component.html',
	    templateUrl: '/views/admin.crm0911',
	    controller: Crm0911Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 170 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0330Controller = function () {
	    Crm0330Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "$filter", "$stateParams"];
	    function Crm0330Controller($scope, $state, $compile, $log, AclService, API, UtilsService, $filter, $stateParams) {
	        'ngInject';

	        _classCallCheck(this, Crm0330Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.$filter = $filter;
	        this.$stateParams = $stateParams;

	        this.m = {
	            filter: {
	                // month: moment()
	            },
	            data: {},
	            datetimepicker_options: {
	                viewMode: 'months',
	                format: 'YYYY-MM'
	            }
	        };
	    }

	    _createClass(Crm0330Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            if (this.$stateParams.store_id != null) {
	                this.m.filter.store_id = this.$stateParams.store_id;
	            } else {
	                var previousSearch = sessionStorage.crm0330;
	                if (angular.isDefined(previousSearch)) {
	                    previousSearch = angular.fromJson(previousSearch);
	                    this.m.filter = previousSearch;
	                }
	            }

	            this.init();
	        }
	    }, {
	        key: 'init',
	        value: function init() {
	            var _this = this;

	            // Get list product 
	            var searchService = this.API.service('init', this.API.all('crm0330'));

	            searchService.post({}).then(function (response) {
	                _this.m.init = response.plain().data;
	                _this.search();
	            });
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var thisClass = this;
	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm0330'));
	            var param = angular.copy(this.m.filter);

	            param.page = page;
	            sessionStorage.crm0330 = angular.toJson(param);
	            searchService.post(param).then(function (response) {
	                thisClass.m.data = response.plain().data;
	            });
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.doSearch(1);
	        }
	    }]);

	    return Crm0330Controller;
	}();

	var Crm0330Component = exports.Crm0330Component = {
	    //templateUrl: './views/app/components/crm0330/crm0330.component.html',
	    templateUrl: '/views/admin.crm0330',
	    controller: Crm0330Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 171 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Rpt0310Controller = function () {
	    Rpt0310Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Rpt0310Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Rpt0310Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;

	        this.m = {};
	    }

	    _createClass(Rpt0310Controller, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Rpt0310Controller;
	}();

	var Rpt0310Component = exports.Rpt0310Component = {
	    //templateUrl: './views/app/components/rpt0310/rpt0310.component.html',
	    templateUrl: '/views/admin.rpt0310',
	    controller: Rpt0310Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 172 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	// import { DateUtils } from '../../../utils/DateUtils'
	var Crm0920Controller = function () {
	    Crm0920Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService"];
	    function Crm0920Controller($scope, $state, $compile, $log, AclService, API, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm0920Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.can = AclService.can;
	        this.ClientService = ClientService;

	        this.m = {
	            filter: {
	                fromDate: moment().subtract(15, 'days'),
	                toDate: moment()
	            },
	            list: null,
	            datetimepicker_options: {
	                // viewMode: 'months',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Crm0920Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.crm0920;

	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            this.doSearch(page);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                fromDate: moment().subtract(15, 'days'),
	                toDate: moment(),
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm0920'));
	            var param = this._getSearchFilter();
	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;

	            sessionStorage.crm0920 = angular.toJson(param);
	            var self = this;
	            searchService.post(param).then(function (response) {
	                // self.$log.info('first-time:', response);

	                var list = response.plain().data.data;
	                self.m.warehouseList = response.plain().data.warehouseList;
	                self.m.supplierList = response.plain().data.supplierList;
	                self.m.statusOrderList = response.plain().data.statusOrderList;
	                self.m.statusDeliveryList = response.plain().data.statusDeliveryList;
	                self.m.data = list;
	            });
	        }
	    }, {
	        key: '_getSearchFilter',
	        value: function _getSearchFilter() {
	            var param = angular.copy(this.m.filter);

	            if (param.fromDate == null) {
	                this.m.filter.fromDate = moment().subtract(15, 'days');
	                param.fromDate = this.m.filter.fromDate.format('YYYY-MM-DD');
	            } else {
	                param.fromDate = moment(param.fromDate).format('YYYY-MM-DD');
	            }

	            if (param.toDate == null) {
	                this.m.filter.toDate = moment();
	                param.toDate = this.m.filter.toDate.format('YYYY-MM-DD');
	            } else {
	                param.toDate = moment(param.toDate).format('YYYY-MM-DD');
	            }

	            return param;
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this = this;

	            var param = this._getSearchFilter();
	            var service = this.API.service('download', this.API.all('crm0920'));
	            service.post(param).then(function (response) {
	                // this.$log.info(response.data);
	                _this.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Crm0920Controller;
	}();

	var Crm0920Component = exports.Crm0920Component = {
	    //templateUrl: './views/app/components/crm0920/crm0920.component.html',
	    templateUrl: '/views/admin.crm0920',
	    controller: Crm0920Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 173 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0910Controller = function () {
	    Crm0910Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService"];
	    function Crm0910Controller($scope, $state, $compile, $log, AclService, API, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm0910Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.can = AclService.can;
	        this.ClientService = ClientService;

	        this.m = {
	            filter: {
	                month: moment()
	            },
	            list: null,
	            datetimepicker_options: {
	                viewMode: 'months',
	                format: 'YYYY-MM'
	            },
	            sumWarehouseVol: 0,
	            sumWarehouse: 0,
	            sumWarehouseCart: 0
	        };
	    }

	    _createClass(Crm0910Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.loadInit();
	            this.search();
	        }
	    }, {
	        key: 'calcWarehousePrice',
	        value: function calcWarehousePrice() {
	            var sum = 0;
	            if (this.m.list != null) {
	                angular.forEach(this.m.list, function (item) {
	                    //this.m.count.warehouse++;
	                    if (item.end_num > 0) {
	                        sum += parseInt(item.selling_price) * parseInt(item.end_num);
	                    }
	                });
	            }
	            this.m.sumWarehouse = sum;
	        }
	    }, {
	        key: 'calcWarehouseVol',
	        value: function calcWarehouseVol() {
	            var sum = 0;
	            var sum_cart = 0;

	            //this.m.count.warehouse = 0;
	            if (this.m.list != null) {
	                angular.forEach(this.m.list, function (item) {
	                    //this.m.count.warehouse++;
	                    if (item.end_num > 0) {
	                        sum += parseFloat(item.volume) * parseFloat(item.end_num) / parseFloat(item.standard_packing);
	                        sum_cart += parseFloat(item.end_num) / parseFloat(item.standard_packing);
	                    }
	                });
	            }

	            this.m.sumWarehouseVol = parseFloat(sum);
	            this.m.sumWarehouseCart = parseFloat(sum_cart);
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var loadService = this.API.service('load-init', this.API.all('crm0910'));

	            loadService.post().then(function (response) {
	                // this.$log.info(response);

	                _this.m.init = response.plain().data;
	            });
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                month: moment(),
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this2 = this;

	            // let $log = this.$log;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm0910'));
	            var param = angular.copy(this.m.filter);

	            if (angular.isUndefined(param.month) || param.month == null || param.month == '') {
	                param.month = moment().format('YYYY-MM');
	            } else {
	                param.month = param.month.format('YYYY-MM');
	            }

	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;

	            searchService.post(param).then(function (response) {
	                _this2.$log.info(response);

	                var list = response.plain().data.data;

	                // angular.forEach(list, function(item) {
	                //     item.end_num = parseInt(item.start_num) - parseInt(item.out_num) - parseInt(item.out_num_edit) + parseInt(item.in_num) + parseInt(item.in_num_edit);
	                // });

	                _this2.m.list = list;
	                _this2.calcWarehousePrice();
	                _this2.calcWarehouseVol();
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this3 = this;

	            var param = angular.copy(this.m.filter);

	            if (angular.isUndefined(param.month) || param.month == null || param.month == '') {
	                param.month = moment().format('YYYY-MM');
	            } else {
	                param.month = param.month.format('YYYY-MM');
	            }

	            var service = this.API.service('download', this.API.all('crm0910'));
	            service.post(param).then(function (response) {
	                _this3.$log.info(response.data);
	                _this3.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Crm0910Controller;
	}();

	var Crm0910Component = exports.Crm0910Component = {
	    //templateUrl: './views/app/components/crm0910/crm0910.component.html',
	    templateUrl: '/views/admin.crm0910',
	    controller: Crm0910Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 174 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1200Controller = function () {
	    Crm1200Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService"];
	    function Crm1200Controller($scope, $state, $compile, $log, AclService, API, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm1200Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;

	        this.m = {
	            filter: {},
	            data: {}
	        };
	        this.doSearch(1);
	    }

	    _createClass(Crm1200Controller, [{
	        key: "$onInit",
	        value: function $onInit() {}
	    }, {
	        key: "resetFilter",
	        value: function resetFilter() {
	            this.m.filter.store_name = "";
	            this.m.filter.bank_name = "";
	            this.m.filter.bank_account_no = "";
	        }
	    }, {
	        key: "search",
	        value: function search() {
	            this.doSearch(1);
	        }
	    }, {
	        key: "doSearch",
	        value: function doSearch(page) {
	            var _this = this;

	            var $log = this.$log;
	            var searchService = this.API.service('search', this.API.all('crm1200'));
	            var param = angular.copy(this.m.filter);
	            param.down = 0;
	            param.page = page;
	            searchService.post(param).then(function (response) {
	                _this.m.data = response.plain().data;
	                $log.info('this.m.data', _this.m.data);
	            });
	        }
	    }, {
	        key: "download",
	        value: function download() {
	            var _this2 = this;

	            var param = angular.copy(this.m.filter);
	            var service = this.API.service('download', this.API.all('crm1200'));
	            param.down = 1;
	            service.post(param).then(function (response) {
	                _this2.$log.info(response.data);
	                _this2.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Crm1200Controller;
	}();

	var Crm1200Component = exports.Crm1200Component = {
	    //templateUrl: './views/app/components/crm1200/crm1200.component.html',
	    templateUrl: '/views/admin.crm1200',
	    controller: Crm1200Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 175 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1210Controller = function () {
	    Crm1210Controller.$inject = ["$scope", "$state", "$compile", "$log", "$stateParams", "RouteService", "ClientService", "AclService", "API", "UtilsService"];
	    function Crm1210Controller($scope, $state, $compile, $log, $stateParams, RouteService, ClientService, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm1210Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.RouteService = RouteService;
	        this.ClientService = ClientService;

	        this.m = {
	            filter: {}
	        };

	        this.m.store_id = $stateParams.store_id;
	        this.m.bank_account_id = $stateParams.bank_account_id;

	        this.$log.info('this.m.store_id', this.m.store_id);

	        if (this.m.store_id == null || this.m.store_id <= 0) {
	            $log.info(this.m);
	            this.ClientService.warning("Vui lòng chọn cửa hàng");
	            RouteService.goState("app.crm0300");
	            return;
	        }
	    }

	    _createClass(Crm1210Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.loadInitData();
	        }
	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var _this = this;

	            var $log = this.$log;

	            var param = {
	                store_id: this.m.store_id,
	                bank_account_id: this.m.bank_account_id

	            };
	            $log.info('param: ', param);
	            var service = this.API.service('load-init', this.API.all('crm1210'));

	            service.post(param).then(function (response) {
	                $log.info('respone: ', response.data);
	                if (response.data.store != null) {
	                    _this.m.store = response.data.store;
	                    $log.info('respone: ', _this.m.store);
	                    _this.m.filter.store_id = _this.m.store.store_id; // send to insert
	                    _this.m.filter.address = _this.m.store.address; //show on screen 
	                    _this.m.filter.name = _this.m.store.name; //show on screen 
	                    _this.m.filter.salesman_id = _this.m.store.salesman_id; // send to insert
	                    _this.m.filter.salesman_name = _this.m.store.salesman_name; //show on screen 
	                }
	                if (response.data.bank_account != null) {
	                    _this.m.bank_account = response.data.bank_account;
	                    _this.m.filter.bank_name = _this.m.bank_account.bank_name;
	                    _this.m.filter.bank_branch = _this.m.bank_account.bank_branch;
	                    _this.m.filter.bank_account_no = _this.m.bank_account.bank_account_no;
	                    _this.m.filter.bank_account_name = _this.m.bank_account.bank_account_name;
	                    _this.m.filter.notes = _this.m.bank_account.notes;
	                }
	            });
	        }
	    }, {
	        key: 'save',
	        value: function save() {
	            var _this2 = this;

	            var $log = this.$log;
	            var RouteService = this.RouteService;
	            var ClientService = this.ClientService;
	            var msg = "";
	            $log.info('send');
	            var crm1210Service = this.API.service('save', this.API.all('crm1210'));
	            var $state = this.$state;
	            var param = angular.copy(this.m.filter);
	            param.bank_account_id = this.m.bank_account_id;
	            crm1210Service.post(param).then(function (response) {
	                if (_this2.m.bank_account_id == null) {
	                    msg = "Thêm tài khoản ngân hàng thành công";
	                } else {
	                    msg = "Cập nhật khoản ngân hàng thành công";
	                }
	                $log.info(msg);
	                ClientService.success(msg);
	                RouteService.goState('app.crm1200');
	            });
	        }
	    }]);

	    return Crm1210Controller;
	}();

	var Crm1210Component = exports.Crm1210Component = {
	    //templateUrl: './views/app/components/crm1210/crm1210.component.html',
	    templateUrl: '/views/admin.crm1210',
	    controller: Crm1210Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 176 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0810Controller = function () {
	    Crm0810Controller.$inject = ["$scope", "$state", "$stateParams", "$compile", "AclService", "DTOptionsBuilder", "DTColumnBuilder", "API", "$log", "UtilsService", "RouteService", "ClientService"];
	    function Crm0810Controller($scope, $state, $stateParams, $compile, AclService, DTOptionsBuilder, DTColumnBuilder, API, $log, UtilsService, RouteService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm0810Controller);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.alerts = [];
	        this.RouteService = RouteService;
	        this.ClientService = ClientService;
	        this.AclService = AclService;
	        this.can = AclService.can;
	        this.$scope = $scope;
	        // this.$log.info('this can: ', this.can);
	        this.m = {
	            checkWarehouseId: null,
	            checkWarehouseNote: null,
	            productActive: 0,
	            checkDate: moment(),
	            list: null,
	            dateOptions: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            },
	            form: {
	                publishDate: moment(),
	                file: null
	            },
	            formUpload: {
	                file: null,
	                images: []
	            }
	        };
	        this.m.isUploaded = false;

	        if ($stateParams.checkWarehouseId > 0) {
	            this.m.checkWarehouseId = $stateParams.checkWarehouseId;
	        } else {
	            this.m.checkWarehouseId = 0;
	        }
	        this.m.form.id = this.m.checkWarehouseId;

	        if ($stateParams.alerts) {
	            this.alerts.push($stateParams.alerts);
	        }
	    }

	    _createClass(Crm0810Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this._setupFileUpload("fileUpload", this.m.formUpload);
	            this.loadImageList();
	            this.doSearch();
	        }
	    }, {
	        key: '_setupFileUpload',
	        value: function _setupFileUpload(fileControlId, formModel) {
	            var self = this;
	            var fileControl = angular.element("#" + fileControlId);
	            fileControl.on('change', function () {
	                var filesSelected = fileControl[0].files;
	                if (filesSelected.length > 0) {
	                    var fileToLoad = filesSelected[0];
	                    var fileReader = new FileReader();

	                    fileReader.onload = function (fileLoadedEvent) {
	                        var srcData = fileLoadedEvent.target.result; // <--- data: base64 
	                        self.$scope.$apply(function () {
	                            formModel.file = srcData;
	                        });
	                    };
	                    fileReader.readAsDataURL(fileToLoad);
	                }
	            });
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch() {
	            // Get list product 
	            //this.$log.info('productActive', this.m.productActive);
	            var self = this;
	            if (this.m.checkWarehouseId > 0) {
	                var service = this.API.service('load', this.API.all('crm0810'));
	                var param = { checkWarehouseId: self.m.checkWarehouseId, productActive: self.m.productActive };
	                service.post(param).then(function (response) {
	                    self.m.list = response.plain().data.list;
	                    self.m.info = response.plain().data.info[0];
	                    self.m.warehouseList = response.plain().data.warehouseList;
	                    self.m.warehouse_id = self.m.info.warehouse_id;
	                    self.m.checkWarehouseNote = response.plain().data.info[0].notes;
	                    self.m.checkDate = moment(response.plain().data.info[0].check_date).format('YYYY-MM-DD');
	                    //self.$log.info('info:', self.m.checkDate);
	                });
	            } else {
	                var searchService = this.API.service('search', this.API.all('crm0810'));
	                var _param = { productActive: self.m.productActive };
	                searchService.post(_param).then(function (response) {
	                    self.m.warehouseList = response.plain().data.warehouseList;
	                    self.m.list = response.plain().data.list;
	                });
	            }
	        }
	    }, {
	        key: 'checkValidWarehouse',
	        value: function checkValidWarehouse() {
	            var oke = true;
	            var msg = "";
	            if (this.m.warehouse_id == null || this.m.warehouse_id == "") {
	                msg = "Vui lòng chọn kho để nhập.";
	                oke = false;
	            }

	            if (!oke) {
	                this.ClientService.error(msg);
	            }
	            return oke;
	        }
	    }, {
	        key: 'save',
	        value: function save() {
	            var $log = this.$log;
	            var RouteService = this.RouteService;
	            var ClientService = this.ClientService;
	            var self = this;

	            if (!this.checkValidWarehouse()) {
	                return;
	            }
	            swal({
	                title: "Bạn có muốn lưu lại lần kiểm kho này?",
	                text: "Trong lần tạo đầu tiên, vui lòng kiểm tra kĩ các thông tin sau vì bạn sẽ không thể chỉnh sửa: ngày kiểm và thông tin kho kiểm.\
	                     \r\n   Bạn được quyền chỉnh sửa trong vòng 4 ngày kể từ ngày tạo đơn: số lượng sản phẩm, ghi chú sản phẩm và ghi chú.",
	                type: "warning",
	                showCancelButton: true,
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                //$log.info('send', self);
	                var crm0810Service = self.API.service('save', self.API.all('crm0810'));
	                var param = {};
	                var index = 1;
	                param.checkWarehouseId = self.m.checkWarehouseId;

	                // Format date for check date
	                var checkDate = moment(new Date().toISOString()).format('YYYY-MM-DD');
	                if (self.m.checkDate != null && self.m.checkDate != undefined) {
	                    checkDate = moment(self.m.checkDate).format('YYYY-MM-DD');
	                }
	                param.checkDate = checkDate;

	                // Add note to param.
	                param.sumary_note = self.m.checkWarehouseNote;

	                //Add warehouse id to param
	                param.warehouse_id = self.m.warehouse_id;
	                param.data = [];
	                angular.forEach(self.m.list, function (item) {
	                    if (!item.amount) {
	                        item.amount = 0;
	                    }
	                    param.data.push({
	                        product_id: item.product_id,
	                        seq_no: index++,
	                        amount: item.amount,
	                        unit_price: item.selling_price,
	                        notes: item.notes
	                    });
	                });

	                //$log.info('param', param);
	                crm0810Service.post(param).then(function (response) {
	                    status = response.plain().data.status;
	                    if (status == 1) {
	                        ClientService.success('Thêm mới chi tiết kho thành công');
	                    } else if (status == 2) {
	                        ClientService.success('Cập nhật chi tiết kho thành công');
	                    } else if (status == -1) {
	                        ClientService.error("Bạn đã quá thời hạn được chỉnh sửa");
	                    } else if (status == -2) {
	                        ClientService.error("Không được nhập kiểm kho quá 1 lần cho cùng 1 ngày cho cùng 1 warehouse");
	                    }
	                    RouteService.goState('app.crm0800');
	                });
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this = this;

	            // let param = angular.copy(this.m.filter);
	            var param = { checkWarehouseId: this.m.checkWarehouseId, productActive: this.m.productActive };
	            var service = this.API.service('download', this.API.all('crm0810'));
	            service.post(param).then(function (response) {
	                // this.$log.info(response.data);
	                _this.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }, {
	        key: 'clickCancel',
	        value: function clickCancel() {
	            var that = this;
	            swal({
	                title: "Bạn có muốn hủy đợt kiểm hàng?",
	                text: " sau khi hủy sẽ không thể phục hồi.",
	                type: "input",
	                showCancelButton: true,
	                closeOnConfirm: true,
	                inputPlaceholder: "Lý do"
	            }, function (inputValue) {
	                if (inputValue === false) return false;
	                if (inputValue === "") {
	                    swal.showInputError("You need to write something!");
	                    return false;
	                }

	                var param = {
	                    check_warehouse_id: that.m.checkWarehouseId,
	                    notes: inputValue
	                };

	                var service = that.API.service('cancel', that.API.all('crm0810'));
	                service.post(param).then(function (res) {
	                    if (res.data.rtnCd == true) {
	                        that.ClientService.success(res.data.msg);
	                        that.doSearch();
	                    } else {
	                        that.ClientService.error(res.data.msg);
	                    }
	                });
	            });
	        }
	    }, {
	        key: 'upload',
	        value: function upload() {
	            var self = this;
	            var service = this.API.service('upload', this.API.all('crm0810'));

	            if (self.m.isUploaded == true) {
	                swal("Đang xử lý!");
	                return;
	            }

	            self.m.isUploaded = true;
	            var param = {
	                id: this.m.form.id,
	                file: this.m.formUpload.file
	            };

	            if (param.id > 0) {
	                service.post(param).then(function (response) {
	                    if (response.data.rtnCd == true) {
	                        self.m.formUpload.file = null;
	                        self.ClientService.success('Thêm hình ảnh tin tức thành công');
	                        self.loadImageList();
	                    } else {
	                        self.ClientService.error('Không thể thêm hình ảnh');
	                    }
	                    self.m.isUploaded = false;
	                });
	            }
	        }
	    }, {
	        key: 'loadImageList',
	        value: function loadImageList() {
	            var self = this;
	            var param = {
	                id: this.m.form.id
	            };

	            if (param.id > 0) {
	                var service = this.API.service('load-images', this.API.all('crm0810'));

	                service.post(param).then(function (response) {
	                    if (response.data.rtnCd == true) {
	                        self.m.formUpload.images = response.data.list;
	                    } else {
	                        self.ClientService.error('Có lỗi khi tải hình ảnh');
	                    }
	                });
	            }
	        }
	    }]);

	    return Crm0810Controller;
	}();

	var Crm0810Component = exports.Crm0810Component = {
	    templateUrl: '/views/admin.crm0810',
	    controller: Crm0810Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 177 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0800Controller = function () {
	    Crm0800Controller.$inject = ["$scope", "$state", "API", "$log", "UtilsService", "ClientService"];
	    function Crm0800Controller($scope, $state, API, $log, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm0800Controller);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.m = {
	            filter: {},
	            list: null,
	            dateOptions: {
	                // formatYear: 'yy',
	                startingDay: 1
	            },
	            datetimepicker_options: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Crm0800Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var previousSearch = sessionStorage.crm0800;

	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            this.doSearch(page);
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.search(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {

	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm0800'));
	            var param = angular.copy(this.m.filter);

	            // this.$log.info('param.delivery_start_date', param.delivery_start_date);
	            // this.$log.info('param.delivery_end_date', param.delivery_end_date);

	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;
	            sessionStorage.crm0800 = angular.toJson(param);
	            searchService.post(param).then(function (response) {
	                _this.$log.info("RESPONSE", response);
	                _this.m.list = response.plain().data.list;
	                _this.m.warehouseList = response.plain().data.warehouseList;
	            });
	        }
	    }]);

	    return Crm0800Controller;
	}();

	var Crm0800Component = exports.Crm0800Component = {
	    templateUrl: './views/admin.crm0800',
	    controller: Crm0800Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 178 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0331Controller = function () {
	    Crm0331Controller.$inject = ["$scope", "$state", "$stateParams", "$compile", "$log", "AclService", "API", "UtilsService", "RouteService", "ClientService"];
	    function Crm0331Controller($scope, $state, $stateParams, $compile, $log, AclService, API, UtilsService, RouteService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm0331Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.RouteService = RouteService;
	        this.ClientService = ClientService;
	        this.formSubmitted = false;

	        this.m = {
	            form: {
	                storeWorkingId: null,
	                storeId: null,
	                file: null,
	                pathFile: null
	            }
	        };
	        this.m.form.storeWorkingId = $stateParams.store_working_id;
	        this.m.form.storeId = $stateParams.store_id;
	        $log.info('storeWorkingId:', this.m.form.storeWorkingId);
	        $log.info('storeId:', this.m.form.storeId);

	        if (this.m.form.storeId == null || this.m.form.storeId <= 0) {
	            this.ClientService.warning("Vui lòng chọn cửa hàng");
	            RouteService.goState("app.crm0300");
	            return;
	        }
	        this.loadInitData();
	    }

	    _createClass(Crm0331Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var self = this;
	            var fileControl = angular.element("#file");
	            fileControl.on('change', function () {
	                var filesSelected = fileControl[0].files;
	                if (filesSelected.length > 0) {
	                    var fileToLoad = filesSelected[0];
	                    var fileReader = new FileReader();
	                    fileReader.onload = function (fileLoadedEvent) {
	                        var srcData = fileLoadedEvent.target.result; // <--- data: base64
	                        self.$log.info('srcData', srcData);
	                        self.$scope.$apply(function () {
	                            self.m.form.file = srcData;
	                            self.$log.info('self.m.form.file', self.m.form.file);
	                        });
	                    };
	                    fileReader.readAsDataURL(fileToLoad);
	                }
	            });
	        }
	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var $log = this.$log;
	            var b = this;
	            if (!(this.m.form.storeWorkingId == null || this.m.form.storeWorkingId <= 0)) {
	                var service = b.API.service('load', b.API.all('crm0331'));
	                var param = { storeWorkingId: b.m.form.storeWorkingId, storeId: b.m.form.storeId };

	                service.post(param).then(function (response) {
	                    if (response.data.storeWorking && response.data.storeWorking.length > 0) {
	                        b.m.form.storeName = response.data.storeWorking[0].store;
	                        b.m.form.listSalesman = response.data.storeWorking[0].salesman;
	                        b.m.form.notes = response.data.storeWorking[0].notes;
	                    }

	                    if (response.data.image && response.data.image.length > 0) b.m.form.pathFile = response.data.image[0].img_path;
	                });
	            } else {
	                var _service = b.API.service('init', b.API.all('crm0331'));
	                var _param = { storeId: b.m.form.storeId };
	                _service.post(_param).then(function (response) {
	                    b.m.form.storeName = response.data.item.name;
	                    b.m.form.listSalesman = response.data.listSalesman;
	                });
	            }
	        }
	    }, {
	        key: 'save',
	        value: function save(isValid) {
	            var $log = this.$log;
	            var RouteService = this.RouteService;
	            var ClientService = this.ClientService;
	            var m = this.m;
	            var param = angular.copy(this.m.form);
	            // var file = document.querySelector('#files > input[type="file"]').files[0];
	            $log.info('param', param);
	            if (isValid) {
	                $log.info('save');
	                var crm0310Service = this.API.service('save', this.API.all('crm0331'));
	                crm0310Service.post(param).then(function (response) {
	                    if (m.form.storeWorkingId != null) {
	                        ClientService.success('Cập nhật thông tin theo dõi cửa hàng thành công');
	                    } else {
	                        ClientService.success('Thêm mới thông tin theo dõi cửa hàng thành công');
	                    }
	                    RouteService.goState('app.crm0330');
	                });
	            } else {
	                this.formSubmitted = true;
	            }
	        }
	    }]);

	    return Crm0331Controller;
	}();

	var Crm0331Component = exports.Crm0331Component = {
	    //templateUrl: './views/app/components/crm0331/crm0331.component.html',
	    templateUrl: '/views/admin.crm0331',
	    controller: Crm0331Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 179 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0220Controller = function () {
	    Crm0220Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService", "ClientService"];
	    function Crm0220Controller($scope, $state, $compile, $log, AclService, API, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm0220Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.can = AclService.can;
	        this.ClientService = ClientService;

	        this.m = {
	            init: {},
	            filter: {
	                search_type: '1',
	                month: moment(new Date().toISOString())
	            },
	            data: {},
	            search_type: "1",
	            datetimepicker_options: {
	                viewMode: 'months',
	                format: 'YYYY-MM'
	                // viewDate: 'YYYY-MM'
	            }
	        };
	    }

	    _createClass(Crm0220Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.doSearch(1);
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                search_type: "1",
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var thisClass = this;
	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm0220'));
	            var param = angular.copy(this.m.filter);

	            if (param.month != null && param.month != "") {
	                param.month = param.month.format('YYYY-MM');
	            }

	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;
	            this.$log.info('param', param);
	            searchService.post(param).then(function (response) {
	                thisClass.$log.info('response', response);
	                thisClass.m.data = response.plain().data.data;
	                thisClass.m.search_type = param.search_type;
	                thisClass.$log.info('this.m.data', thisClass.m.data);
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this = this;

	            var param = angular.copy(this.m.filter);
	            if (param.month != null && param.month != "") {
	                param.month = param.month.format('YYYY-MM');
	            }
	            var service = this.API.service('download', this.API.all('crm0220'));
	            service.post(param).then(function (response) {
	                _this.$log.info(response.data);
	                _this.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Crm0220Controller;
	}();

	var Crm0220Component = exports.Crm0220Component = {
	    //templateUrl: './views/app/components/crm0220/crm0220.component.html',
	    templateUrl: '/views/admin.crm0220',
	    controller: Crm0220Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 180 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0320Controller = function () {
	    Crm0320Controller.$inject = ["$scope", "$state", "$compile", "$log", "AclService", "API", "UtilsService"];
	    function Crm0320Controller($scope, $state, $compile, $log, AclService, API, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm0320Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;

	        this.m = {
	            init: {},
	            filter: {
	                month: moment()
	            },
	            data: {},
	            datetimepicker_options: {
	                viewMode: 'months',
	                format: 'YYYY-MM'
	            }
	        };
	    }

	    _createClass(Crm0320Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            // this.doSearch(1);
	            this.init();
	        }
	    }, {
	        key: 'init',
	        value: function init() {
	            var _this = this;

	            // Get list product 
	            var searchService = this.API.service('init', this.API.all('crm0320'));

	            searchService.post({}).then(function (response) {
	                _this.m.init = response.plain().data;
	                _this.search();
	            });
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            this.$log.info("this.m.filter", angular.copy(this.m.filter));
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.$log.info("orderOption", angular.copy(orderOption));
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var thisClass = this;
	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm0320'));
	            var param = angular.copy(this.m.filter);

	            if (param.month != null && param.month != "") {
	                param.month = param.month.format('YYYY-MM');
	            }

	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;
	            this.$log.info('param', param);
	            searchService.post(param).then(function (response) {
	                thisClass.$log.info('response', response);
	                thisClass.m.data = response.plain().data;
	                thisClass.$log.info('this.m.data', thisClass.m.data);
	            });
	        }
	    }]);

	    return Crm0320Controller;
	}();

	var Crm0320Component = exports.Crm0320Component = {
	    //templateUrl: './views/app/components/crm0320/crm0320.component.html',
	    templateUrl: '/views/admin.crm0320',
	    controller: Crm0320Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 181 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1100Controller = function () {
	    Crm1100Controller.$inject = ["$scope", "$state", "API", "$log", "UtilsService", "ClientService"];
	    function Crm1100Controller($scope, $state, API, $log, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm1100Controller);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.m = {
	            filter: {},
	            list: null,
	            dateOptions: {
	                // formatYear: 'yy',
	                startingDay: 1
	            }
	        };

	        this.search();
	        //
	    }

	    _createClass(Crm1100Controller, [{
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.search(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {

	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	            this.m.filter.delivery_vendor_name = null;
	            this.m.filter.delivery_vendor_phone = null;
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            var $log = this.$log;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm1100'));
	            var param = angular.copy(this.m.filter);
	            param.down = 0;
	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;

	            searchService.post(param).then(function (response) {
	                _this.$log.info(response);
	                _this.m.list = response.plain().data;
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this2 = this;

	            var param = angular.copy(this.m.filter);
	            var service = this.API.service('download', this.API.all('crm1100'));
	            param.down = 1;
	            service.post(param).then(function (response) {
	                _this2.$log.info(response.data);
	                _this2.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Crm1100Controller;
	}();

	var Crm1100Component = exports.Crm1100Component = {
	    templateUrl: './views/admin.crm1100',
	    controller: Crm1100Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 182 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1010Controller = function () {
	    Crm1010Controller.$inject = ["$scope", "$state", "API", "$log", "$stateParams", "RouteService", "ClientService"];
	    function Crm1010Controller($scope, $state, API, $log, $stateParams, RouteService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm1010Controller);

	        this.$state = $state;
	        this.formSubmitted = false;
	        this.API = API;
	        this.alerts = [];
	        this.$log = $log;
	        this.RouteService = RouteService;
	        this.ClientService = ClientService;

	        this.m = {
	            filter: {},
	            init: {}
	        };

	        this.m.delivery_id = $stateParams.delivery_id;
	        this.loadInitData();
	    }

	    _createClass(Crm1010Controller, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var _this = this;

	            this.m.filter.notes = null;
	            this.m.filter.delivery_date = new Date();

	            var initService = this.API.service('load-init', this.API.all('crm1010'));
	            var param = angular.copy(this.m.filter);

	            if (this.m.delivery_id == null) {
	                param.delivery_id = null;
	            } else {
	                param.delivery_id = this.m.delivery_id;
	            }

	            initService.post(param).then(function (response) {
	                _this.$log.info(response);
	                _this.m.init = response.plain().data;
	                if (_this.m.delivery_id != null) {
	                    _this.$log.info('edit', _this.m.init.infordelivery[0]);
	                    _this.m.filter.delivery_date = new Date(_this.m.init.infordelivery[0].delivery_date);
	                    _this.m.filter.price = parseInt(_this.m.init.infordelivery[0].price);
	                    _this.m.filter.delivery_vendor_id = _this.m.init.infordelivery[0].delivery_vendor_id;
	                    _this.m.filter.notes = _this.m.init.infordelivery[0].notes;
	                }
	            });
	        }
	    }, {
	        key: 'save',
	        value: function save() {

	            var $log = this.$log;
	            $log.info('aihihihihi', this.m.filter);
	            var alerts = this.alerts;
	            var RouteService = this.RouteService;
	            var ClientService = this.ClientService;
	            var saveService = this.API.service('save', this.API.all('crm1010'));
	            var param = angular.copy(this.m.filter);
	            if (this.m.delivery_id == null) {
	                param.delivery_id = null;
	            } else {
	                param.delivery_id = this.m.delivery_id;
	            }
	            saveService.post(param).then(function (response) {

	                if (param.delivery_id == null) {
	                    ClientService.success('Thêm mới chi phí thành công');
	                    RouteService.goState('app.crm0400');
	                } else {
	                    ClientService.success('Cập nhật  chi phí thành công');
	                    RouteService.goState('app.crm1000');
	                }
	            });
	        }
	    }, {
	        key: 'validation',
	        value: function validation() {}
	    }]);

	    return Crm1010Controller;
	}();

	var Crm1010Component = exports.Crm1010Component = {
	    templateUrl: './views/admin.crm1010',
	    controller: Crm1010Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 183 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Rpt0200Controller = function () {
	    Rpt0200Controller.$inject = ["$scope", "$state", "$compile", "API", "$log", "AclService", "UtilsService", "$stateParams"];
	    function Rpt0200Controller($scope, $state, $compile, API, $log, AclService, UtilsService, $stateParams) {
	        'ngInject';

	        _classCallCheck(this, Rpt0200Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.can = AclService.can;

	        this.m = {
	            init: {},
	            filter: {},
	            data: []
	        };
	    }

	    _createClass(Rpt0200Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.loadInitData();
	        }
	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var thisClass = this;
	            var service = this.API.service('init', this.API.all('rpt0200'));
	            var param = {};
	            service.post(param).then(function (response) {
	                thisClass.$log.info('response', response);
	                thisClass.setInitData(response.data);
	            }, function (response) {});
	        }
	    }, {
	        key: 'setInitData',
	        value: function setInitData(data) {
	            this.m.init = data;
	            if (this.m.init.listYear != null && this.m.init.listYear.length > 0) {
	                this.m.filter.year = this.m.init.listYear[0].year;
	            } else {
	                this.m.filter.year = new Date().getFullYear();
	            }
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            var thisClass = this;
	            var service = this.API.service('search', this.API.all('rpt0200'));
	            var param = angular.copy(this.m.filter);
	            thisClass.$log.info('filter', param);
	            service.post(param).then(function (response) {
	                thisClass.$log.info('response', response);
	                thisClass.m.data = thisClass.convertData(response.data);
	                thisClass.m.dataSum = thisClass.getDataSum(thisClass.m.data);
	            });
	        }
	    }, {
	        key: 'convertData',
	        value: function convertData(data) {
	            var self = this;

	            var result = [];
	            var space = self.getYearObj('');
	            angular.forEach(data.listSpecialOrder, function (item) {
	                var monthKey = 't' + item.month;
	                space[monthKey] = ' ';
	            });

	            var sumSpecial = self.getYearObj('DH (mẫu, BH)');
	            angular.forEach(data.listSpecialOrder, function (item) {
	                var monthKey = 't' + item.month;
	                sumSpecial[monthKey] = parseInt(sumSpecial[monthKey]) + parseInt(item.total);
	            });
	            result.push(sumSpecial);

	            var sumItem1 = self.getYearObj('DH (Trước CK)');
	            var sumItem2 = self.getYearObj('DH (Sau CK)');
	            angular.forEach(data.listOrder, function (item) {
	                var monthKey = 't' + item.month;
	                sumItem1[monthKey] = parseInt(sumItem1[monthKey]) + parseInt(item.total);
	                sumItem2[monthKey] = parseInt(sumItem2[monthKey]) + parseInt(item.total_with_discount);
	            });
	            var sumCancle = self.getYearObj('DH (hủy)');
	            angular.forEach(data.listCancleOrder, function (item) {
	                var monthKey = 't' + item.month;
	                sumCancle[monthKey] = parseInt(sumCancle[monthKey]) + parseInt(item.total);
	            });
	            var sumCancleRemain = self.getYearObj('DH (hủy còn lại)');
	            angular.forEach(data.listCancleRemainOrder, function (item) {
	                var monthKey = 't' + item.month;
	                sumCancleRemain[monthKey] = parseInt(sumCancleRemain[monthKey]) + parseInt(item.total);
	            });

	            result.push(sumItem1);
	            result.push(sumItem2);
	            result.push(sumCancle);
	            result.push(sumCancleRemain);
	            result.push(space);

	            var sumSpecial2 = self.getYearObj('GH (mẫu, BH)');
	            angular.forEach(data.listSpecialDelivery, function (item) {
	                var monthKey = 't' + item.month;
	                sumSpecial2[monthKey] = parseInt(sumSpecial2[monthKey]) + parseInt(item.total);
	            });
	            result.push(sumSpecial2);

	            var sumItem3 = self.getYearObj('GH (Trước CK)');
	            var sumItem4 = self.getYearObj('GH (Sau CK)');
	            angular.forEach(data.listDelivery, function (item) {
	                var monthKey = 't' + item.month;
	                sumItem3[monthKey] = parseInt(sumItem3[monthKey]) + parseInt(item.total);
	                sumItem4[monthKey] = parseInt(sumItem4[monthKey]) + parseInt(item.total_with_discount);
	            });
	            var sumCancleDelivery = self.getYearObj('GH (Hủy)');
	            angular.forEach(data.listCancleDelivery, function (item) {
	                var monthKey = 't' + item.month;
	                sumCancleDelivery[monthKey] = parseInt(sumCancleDelivery[monthKey]) + parseInt(item.total);
	            });

	            result.push(sumItem3);
	            result.push(sumItem4);
	            result.push(sumCancleDelivery);
	            //result.push(space);
	            // for payment
	            var sumItem5 = self.getYearObj('Thanh toán');
	            angular.forEach(data.listPayment, function (item) {
	                var monthKey = 't' + item.month;
	                sumItem5[monthKey] = parseInt(sumItem5[monthKey]) + parseInt(item.total);
	            });
	            result.push(sumItem5);

	            // Import
	            var sumItem6 = self.getYearObj('Giá vốn');
	            angular.forEach(data.listImport, function (item) {
	                var monthKey = 't' + item.month;
	                sumItem6[monthKey] = parseInt(sumItem6[monthKey]) + parseInt(item.total);
	            });
	            result.push(sumItem6);

	            // Transit
	            var sumItem7 = self.getYearObj('Phí giao hàng');
	            angular.forEach(data.listCostTransit, function (item) {
	                var monthKey = 't' + item.month;
	                sumItem7[monthKey] = parseInt(sumItem7[monthKey]) + parseInt(item.total);
	            });
	            result.push(sumItem7);

	            // cost
	            var sumItem8 = self.getYearObj('Chi phí');
	            angular.forEach(data.listCost, function (item) {
	                var monthKey = 't' + item.month;
	                sumItem8[monthKey] = parseInt(sumItem8[monthKey]) + parseInt(item.total);
	            });
	            result.push(sumItem8);

	            //profit
	            var sumItem9 = self.getYearObj('Profit');
	            for (var i = 0; i < 12; i++) {
	                var monthKey = 't' + (i + 1);
	                sumItem9[monthKey] = parseInt(sumItem4[monthKey]) - parseInt(sumItem6[monthKey]) - parseInt(sumItem8[monthKey]);
	            }
	            result.push(sumItem9);
	            // self.$log.info('purc', data.listPurchasing);
	            // Số cont 
	            var sumItem10 = self.getYearObj('Số cont nhập');
	            angular.forEach(data.listPurchasing, function (item) {
	                var monthKey = 't' + item.month;
	                sumItem10[monthKey] = parseInt(sumItem10[monthKey]) + parseInt(item.count) * 1000;
	            });
	            result.push(sumItem10);

	            // Amount 
	            var sumItem11 = self.getYearObj('Doanh số nhập');
	            angular.forEach(data.listPurchasing, function (item) {
	                var monthKey = 't' + item.month;
	                sumItem11[monthKey] = parseInt(sumItem11[monthKey]) + parseInt(item.total) * 1000;
	            });
	            result.push(sumItem11);

	            return result;
	        }
	    }, {
	        key: 'getYearObj',
	        value: function getYearObj(title) {
	            return {
	                name: title,
	                t1: 0,
	                t2: 0,
	                t3: 0,
	                t4: 0,
	                t5: 0,
	                t6: 0,
	                t7: 0,
	                t8: 0,
	                t9: 0,
	                t10: 0,
	                t11: 0,
	                t12: 0
	            };
	        }
	    }, {
	        key: 'getDataSum',
	        value: function getDataSum(data) {
	            var self = this;
	            var result = [];

	            angular.forEach(data, function (list) {
	                var newList = angular.copy(list);
	                result.push(newList);

	                self.$log.info(newList);
	                var sum = 0;
	                for (var i = 1; i <= 12; i++) {
	                    var monthKey = 't' + i;
	                    newList[monthKey] = sum + parseInt(newList[monthKey]);
	                    sum = newList[monthKey];
	                }
	            });

	            return result;
	        }
	    }]);

	    return Rpt0200Controller;
	}();

	var Rpt0200Component = exports.Rpt0200Component = {
	    // templateUrl: './views/app/components/rpt0200/rpt0200.component.html',
	    templateUrl: '/views/admin.rpt0200',
	    controller: Rpt0200Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 184 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Rpt0100Controller = function () {
	    Rpt0100Controller.$inject = ["$scope", "$state", "$compile", "API", "$log", "AclService", "UtilsService", "$stateParams"];
	    function Rpt0100Controller($scope, $state, $compile, API, $log, AclService, UtilsService, $stateParams) {
	        'ngInject';

	        _classCallCheck(this, Rpt0100Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.can = AclService.can;

	        this.m = {
	            init: {},
	            filter: {},
	            data: []
	        };
	    }

	    _createClass(Rpt0100Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.loadInitData();
	        }
	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var self = this;
	            var service = this.API.service('init', this.API.all('rpt0100'));
	            var param = {};
	            service.post(param).then(function (response) {
	                self.setInitData(response.data);
	            });
	        }
	    }, {
	        key: 'setInitData',
	        value: function setInitData(data) {
	            this.m.init = data;
	            if (this.m.init.listYear != null && this.m.init.listYear.length > 0) {
	                this.m.filter.year = this.m.init.listYear[0].year;
	            } else {
	                this.m.filter.year = new Date().getFullYear();
	            }
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            var self = this;
	            var service = this.API.service('search', this.API.all('rpt0100'));
	            var param = angular.copy(this.m.filter);

	            service.post(param).then(function (response) {
	                self.m.data = self.convertData(response.data);
	            });
	        }
	    }, {
	        key: 'convertData',
	        value: function convertData(data) {
	            var self = this;
	            var result = [];
	            result = self.prepareDataForOrder(data);
	            result = self.prepareDataForDelivery(data, result);
	            result = self.prepareDataForPayment(data, result);
	            return result;
	        }
	    }, {
	        key: 'prepareDataForPayment',
	        value: function prepareDataForPayment(data, result) {

	            var sumItem = {
	                salesman_id: 0,
	                name: 'Tổng Cộng G',

	                t1_5: 0,
	                t2_5: 0,
	                t3_5: 0,
	                t4_5: 0,
	                t5_5: 0,
	                t6_5: 0,
	                t7_5: 0,
	                t8_5: 0,
	                t9_5: 0,
	                t10_5: 0,
	                t11_5: 0,
	                t12_5: 0

	            };

	            angular.forEach(data.listDelivery, function (item) {
	                var curItem = null;

	                for (var i = 0; i < result.length; i++) {
	                    if (result[i].salesman_id == item.salesman_id) {
	                        curItem = result[i];
	                        break;
	                    }
	                }

	                if (curItem == null) {
	                    curItem = {
	                        salesman_id: item.salesman_id,
	                        name: item.name,

	                        t1_5: 0,
	                        t2_5: 0,
	                        t3_5: 0,
	                        t4_5: 0,
	                        t5_5: 0,
	                        t6_5: 0,
	                        t7_5: 0,
	                        t8_5: 0,
	                        t9_5: 0,
	                        t10_5: 0,
	                        t11_5: 0,
	                        t12_5: 0
	                    };
	                    result.push(curItem);
	                }

	                var monthKey = 't' + item.month + "_5";
	                curItem[monthKey] = item.total;
	                sumItem[monthKey] = parseInt(sumItem[monthKey]) + parseInt(item.total);
	            });
	            result.push(sumItem);
	            return result;
	        }
	    }, {
	        key: 'prepareDataForDelivery',
	        value: function prepareDataForDelivery(data, result) {

	            var sumItem = {
	                salesman_id: 0,
	                name: 'Tổng Cộng G',
	                t1_3: 0,
	                t2_3: 0,
	                t3_3: 0,
	                t4_3: 0,
	                t5_3: 0,
	                t6_3: 0,
	                t7_3: 0,
	                t8_3: 0,
	                t9_3: 0,
	                t10_3: 0,
	                t11_3: 0,
	                t12_3: 0,
	                t1_4: 0,
	                t2_4: 0,
	                t3_4: 0,
	                t4_4: 0,
	                t5_4: 0,
	                t6_4: 0,
	                t7_4: 0,
	                t8_4: 0,
	                t9_4: 0,
	                t10_4: 0,
	                t11_4: 0,
	                t12_4: 0
	            };

	            angular.forEach(data.listDelivery, function (item) {
	                var curItem = null;

	                for (var i = 0; i < result.length; i++) {
	                    if (result[i].salesman_id == item.salesman_id) {
	                        curItem = result[i];
	                        break;
	                    }
	                }

	                if (curItem == null) {
	                    curItem = {
	                        salesman_id: item.salesman_id,
	                        name: item.name,
	                        t1_3: 0,
	                        t2_3: 0,
	                        t3_3: 0,
	                        t4_3: 0,
	                        t5_3: 0,
	                        t6_3: 0,
	                        t7_3: 0,
	                        t8_3: 0,
	                        t9_3: 0,
	                        t10_3: 0,
	                        t11_3: 0,
	                        t12_3: 0,
	                        t1_4: 0,
	                        t2_4: 0,
	                        t3_4: 0,
	                        t4_4: 0,
	                        t5_4: 0,
	                        t6_4: 0,
	                        t7_4: 0,
	                        t8_4: 0,
	                        t9_4: 0,
	                        t10_4: 0,
	                        t11_4: 0,
	                        t12_4: 0
	                    };
	                    result.push(curItem);
	                }

	                var monthKey = 't' + item.month + "_3";
	                curItem[monthKey] = item.total;
	                sumItem[monthKey] = parseInt(sumItem[monthKey]) + parseInt(item.total);

	                monthKey = 't' + item.month + "_4";
	                curItem[monthKey] = item.total_with_discount;
	                sumItem[monthKey] = parseInt(sumItem[monthKey]) + parseInt(item.total_with_discount);
	            });
	            result.push(sumItem);
	            return result;
	        }
	    }, {
	        key: 'prepareDataForOrder',
	        value: function prepareDataForOrder(data) {
	            var result = [];
	            var sumItem = {
	                salesman_id: 0,
	                name: 'Tổng Cộng D',
	                t1: 0,
	                t2: 0,
	                t3: 0,
	                t4: 0,
	                t5: 0,
	                t6: 0,
	                t7: 0,
	                t8: 0,
	                t9: 0,
	                t10: 0,
	                t11: 0,
	                t12: 0,
	                t1_2: 0,
	                t2_2: 0,
	                t3_2: 0,
	                t4_2: 0,
	                t5_2: 0,
	                t6_2: 0,
	                t7_2: 0,
	                t8_2: 0,
	                t9_2: 0,
	                t10_2: 0,
	                t11_2: 0,
	                t12_2: 0
	            };

	            angular.forEach(data.listOrder, function (item) {
	                var curItem = null;

	                for (var i = 0; i < result.length; i++) {
	                    if (result[i].salesman_id == item.salesman_id) {
	                        curItem = result[i];
	                        break;
	                    }
	                }

	                if (curItem == null) {
	                    curItem = {
	                        salesman_id: item.salesman_id,
	                        name: item.name,
	                        t1: 0,
	                        t2: 0,
	                        t3: 0,
	                        t4: 0,
	                        t5: 0,
	                        t6: 0,
	                        t7: 0,
	                        t8: 0,
	                        t9: 0,
	                        t10: 0,
	                        t11: 0,
	                        t12: 0,
	                        t1_2: 0,
	                        t2_2: 0,
	                        t3_2: 0,
	                        t4_2: 0,
	                        t5_2: 0,
	                        t6_2: 0,
	                        t7_2: 0,
	                        t8_2: 0,
	                        t9_2: 0,
	                        t10_2: 0,
	                        t11_2: 0,
	                        t12_2: 0
	                    };
	                    result.push(curItem);
	                }

	                var monthKey = 't' + item.month;
	                curItem[monthKey] = item.total;
	                sumItem[monthKey] = parseInt(sumItem[monthKey]) + parseInt(item.total);

	                monthKey = 't' + item.month + "_2";
	                curItem[monthKey] = item.total_with_discount;
	                sumItem[monthKey] = parseInt(sumItem[monthKey]) + parseInt(item.total_with_discount);
	            });
	            result.push(sumItem);
	            return result;
	        }
	    }]);

	    return Rpt0100Controller;
	}();

	var Rpt0100Component = exports.Rpt0100Component = {
	    // templateUrl: './views/app/components/rpt0100/rpt0100.component.html',
	    templateUrl: '/views/admin.rpt0100',
	    controller: Rpt0100Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Crm0700Component = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _crm = __webpack_require__(186);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0700Controller = function () {
	    Crm0700Controller.$inject = ["$scope", "$state", "API", "$log", "UtilsService", "ClientService", "DialogService"];
	    function Crm0700Controller($scope, $state, API, $log, UtilsService, ClientService, DialogService) {
	        'ngInject';

	        _classCallCheck(this, Crm0700Controller);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.DialogService = DialogService;
	        this.m = {
	            activeFlag: 1,

	            list: null,
	            dateOptions: {
	                // formatYear: 'yy',
	                startingDay: 1
	            },
	            datetimepicker_options: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            },
	            1: {
	                filter: {},
	                data: {}
	            },
	            2: {
	                filter: {},
	                data: {}
	            }
	        };
	    }

	    _createClass(Crm0700Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.init();
	        }
	    }, {
	        key: 'init',
	        value: function init() {
	            var previousSearch = sessionStorage.crm0700;
	            this.loadInit();
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;
	            var index = previousSearch.index;
	            this.m.activeFlag = index;

	            delete previousSearch['page'];
	            delete previousSearch['index'];
	            this.m[index].filter = angular.copy(previousSearch);
	            this.doSearch(index, page);
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var service = this.API.service('load-promotion', this.API.all('crm0700'));
	            service.post().then(function (response) {
	                var salesmanList = response.data.salesmanList;
	                if (salesmanList != null) {
	                    _this.m.listSalesman = salesmanList;
	                }
	            });
	        }
	    }, {
	        key: 'search',
	        value: function search() {

	            this.doSearch(1, 1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter(index) {
	            if (index < 1 || index > 2) {
	                return;
	            }
	            this.m[index].filter = {
	                // orderBy: this.m.filter.orderBy,
	                // orderDirection: this.m.filter.orderDirection
	            };
	            this.doSearch(index, 1);
	        }
	    }, {
	        key: 'chooseTab',
	        value: function chooseTab(index) {
	            if (index < 1 || index > 3) {
	                return;
	            }
	            this.m.activeFlag = index;
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(index, page) {
	            var _this2 = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm0700'));
	            var param = angular.copy(this.m[index].filter);
	            param.down = 0;
	            param.page = page;
	            param.index = index;
	            sessionStorage.crm0700 = angular.toJson(param);

	            searchService.post(param).then(function (response) {

	                _this2.m[index].data = response.plain().data.data;
	                _this2.$log.info(_this2.m);
	                // this.m.data = response.plain().data;
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this3 = this;

	            var param = angular.copy(this.m[1].filter);
	            var service = this.API.service('download', this.API.all('crm0700'));
	            param.down = 1;
	            service.post(param).then(function (response) {
	                _this3.$log.info(response.data);
	                _this3.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }, {
	        key: 'notifyZalo',
	        value: function notifyZalo(item) {
	            var self = this;
	            // this.m.canEdit = false;
	            // this.$log.info('check print packing');
	            swal({
	                title: "Bạn có muốn thông báo thanh toán tới khách hàng qua ZALO?",
	                text: "Sau khi bấm tài khoản zalo của khách hàng sẽ nhận được thông báo",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var param = {
	                    payment_id: item.payment_id,
	                    item: item
	                };

	                var service = self.API.service('notify-zalo', self.API.all('crm0700'));
	                service.post(param).then(function (res) {

	                    self.ClientService.warning(res.data.errorMsg);
	                    self.init();
	                });
	            });
	        }
	    }, {
	        key: 'update_accountant',
	        value: function update_accountant(store_id, store_name) {
	            var modalOption = void 0;
	            var DialogClose = void 0;
	            var that = this;

	            var param = {
	                store_id: store_id,
	                store_name: store_name
	                // API: that.API
	            };
	            // that.$log.info('sale user', param);
	            modalOption = {
	                size: 'dialog-768',
	                controller: _crm.Crm0700DialogController,
	                resolve: {
	                    param: param
	                }
	            };
	            DialogClose = this.DialogService.open('crm0700_dialog', modalOption);
	            DialogClose.result.then(function (data) {
	                that.doSearch(1, 1);
	            });
	        }
	    }]);

	    return Crm0700Controller;
	}();

	var Crm0700Component = exports.Crm0700Component = {
	    // templateUrl: './views/app/components/crm0700/crm0700.component.html',
	    templateUrl: '/views/admin.crm0700',
	    controller: Crm0700Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 186 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0700DialogController = exports.Crm0700DialogController = function () {
	    Crm0700DialogController.$inject = ["$scope", "$uibModalInstance", "DialogService", "$log", "$filter", "API", "param"];
	    function Crm0700DialogController($scope, $uibModalInstance, DialogService, $log, $filter, API, param) {
	        'ngInject';

	        _classCallCheck(this, Crm0700DialogController);

	        this.$scope = $scope;
	        this.$log = $log;
	        this.DialogService = DialogService;
	        this.$uibModalInstance = $uibModalInstance;
	        this.API = API;
	        //his.$log.info('dialog param', param);
	        this.m = {
	            store_id: param.store_id,
	            store_name: param.store_name
	            // this.API = param.API;
	        };this.$log.info('check dialog: ', this.m);
	    }

	    _createClass(Crm0700DialogController, [{
	        key: 'update',
	        value: function update() {
	            var _this = this;

	            var searchService = this.API.service('update-accountant', this.API.all('crm0700'));
	            var param = angular.copy(this.m);

	            searchService.post(param).then(function (response) {
	                _this.DialogService.close();
	            });
	        }
	    }, {
	        key: 'cancel',
	        value: function cancel() {
	            this.DialogService.close();
	        }
	    }]);

	    return Crm0700DialogController;
	}();

/***/ }),
/* 187 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0710Controller = function () {
	    Crm0710Controller.$inject = ["$scope", "$state", "API", "$log", "UtilsService", "ClientService", "$stateParams", "RouteService"];
	    function Crm0710Controller($scope, $state, API, $log, UtilsService, ClientService, $stateParams, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Crm0710Controller);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.RouteService = RouteService;
	        this.m = {
	            filter: {},
	            list: null,
	            init: {},
	            dateOptions: {
	                // formatYear: 'yy',
	                startingDay: 1
	            }
	        };

	        this.m.store_id = $stateParams.store_id;
	        this.m.cpayment_id = $stateParams.cpayment_id;

	        // if (this.m.store_id == null || this.m.store_id <= 0) {
	        //     this.ClientService.warning("Vui lòng chọn cửa hàng");
	        //     RouteService.goState("app.crm0300");
	        //     return;
	        // }
	        // if (this.m.payment_id == null) {
	        //     this.m.filter.payment_date = new Date();
	        //     this.m.filter.bank_account_id = null;
	        //     this.m.filter.notes = null;
	        //     this.m.filter.salesman_id = 0;
	        //     this.m.filter.store_id = null;
	        // }

	        // this.m.filter.payment_date = new Date();
	        // this.loadInitData();

	        // if (this.m.payment_id == null) {
	        //     this.m.filter.payment_date = new Date();
	        //     this.m.filter.bank_account_id = null;
	        //     this.m.filter.notes = null;
	        //     this.m.filter.salesman_id = 0;
	        //     this.m.filter.store_id = null;
	        // }

	        // this.m.filter.payment_date = new Date();
	        // this.loadInitData();
	    }

	    _createClass(Crm0710Controller, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, $scope.m.filter.orderBy, $scope.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.doSearch(1);
	        }
	    }, {
	        key: 'save',
	        value: function save() {

	            var $log = this.$log;
	            //$log.info('aihihihihi', this.m.filter);
	            var alerts = this.alerts;
	            var RouteService = this.RouteService;
	            var ClientService = this.ClientService;
	            var saveService = this.API.service('save', this.API.all('crm0710'));
	            var param = angular.copy(this.m.filter);

	            if (this.m.payment_id == null) {
	                param.payment_id = null;
	            } else {
	                param.payment_id = this.m.payment_id;
	            }

	            // check loi
	            if (param.payment_type <= 3 && param.payment_money < 0) {
	                swal({
	                    title: "Lỗi nhập liệu?",
	                    text: "Số tiền phải lớn hơn 0",
	                    type: "warning",
	                    showCancelButton: false,
	                    // confirmButtonColor: '#DD6B55', 
	                    confirmButtonText: 'Đồng ý',
	                    closeOnConfirm: true,
	                    showLoaderOnConfirm: true,
	                    html: false
	                }, function () {});
	                return false;
	            } else if (param.payment_type == 4 && param.payment_money > 0) {
	                swal({
	                    title: "Lỗi nhập liệu?",
	                    text: "Số tiền phải nhỏ hơn 0",
	                    type: "warning",
	                    showCancelButton: false,
	                    // confirmButtonColor: '#DD6B55', 
	                    confirmButtonText: 'Đồng ý',
	                    closeOnConfirm: true,
	                    showLoaderOnConfirm: true,
	                    html: false
	                }, function () {});
	                return false;
	            }

	            saveService.post(param).then(function (response) {
	                if (param.payment_id == null) {
	                    ClientService.success('Thêm mới chi phí thành công');
	                } else {
	                    ClientService.success('Cập nhật  chi phí thành công');
	                }

	                RouteService.goState('app.crm0700');
	            });
	        }
	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {
	            var _this = this;

	            var $log = this.$log;
	            var param = {
	                store_id: this.m.store_id,
	                cpayment_id: this.m.cpayment_id
	            };

	            var initService = this.API.service('load-init', this.API.all('crm0210'));
	            initService.post(param).then(function (response) {
	                _this.m.init = response.data; //initiate list of bank account
	                _this.m.payment = response.data.payment;
	                // this.m.store = response.data.store;
	                _this.m.store.store_id = _this.m.init.store[0].store_id;
	            });
	        }
	    }]);

	    return Crm0710Controller;
	}();

	var Crm0710Component = exports.Crm0710Component = {
	    // templateUrl: './views/app/components/crm0700/crm0700.component.html',
	    templateUrl: '/views/admin.crm0710',
	    controller: Crm0710Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 188 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	// import { StoreDialogController } from '../../../dialogs/store_dialog/store_dialog.dialog'

	var Crm0900Controller = function () {
	    Crm0900Controller.$inject = ["$scope", "$state", "API", "$log", "UtilsService", "ClientService", "DialogService", "$uibModal"];
	    function Crm0900Controller($scope, $state, API, $log, UtilsService, ClientService, DialogService, $uibModal) {
	        'ngInject';

	        _classCallCheck(this, Crm0900Controller);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.DialogService = DialogService;
	        this.$uibModal = $uibModal;
	        this.m = {
	            filter: {},
	            list: null,
	            dateOptions: {
	                // formatYear: 'yy',
	                startingDay: 1
	            }
	        };

	        this.search();
	    }

	    _createClass(Crm0900Controller, [{
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);

	            this.$log.debug('start search ');
	            // this.DialogService.fromTemplate('store_dialog');

	            // let modalOption = {
	            //     controller: StoreDialogController
	            // };
	            // this.DialogService.open('store_dialog', modalOption);

	            // var modalInstance = this.$uibModal.open({
	            //     animation: true,
	            //     templateUrl: '/views/admin.dialogs.store_dialog',
	            //     controller: this.modalcontroller,
	            //     controllerAs: 'mvm',
	            //     size: 300,
	            //     // resolve: {
	            //     //     items: () => {
	            //     //         return items
	            //     //     }
	            //     // }
	            // })
	        }
	    }, {
	        key: 'modalcontroller',
	        value: ["$scope", "$uibModalInstance", function modalcontroller($scope, $uibModalInstance) {
	            'ngInject';

	            // this.items = items

	            // $scope.selected = {
	            //     item: items[0]
	            // }

	            this.m = {
	                msg: 'this is my model  2'
	            };

	            this.ok = function () {
	                // $uibModalInstance.close($scope.selected.item)
	            };

	            this.cancel = function () {
	                $uibModalInstance.dismiss('cancel');
	            };
	        }]
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm0900'));
	            var param = angular.copy(this.m.filter);

	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;

	            searchService.post(param).then(function (response) {
	                _this.$log.info(response);

	                var list = response.plain().data;

	                angular.forEach(list, function (item) {
	                    item.result = parseInt(item.in_num) - parseInt(item.out_num) + parseInt(item.in_num_edit) - parseInt(item.out_num_edit);
	                });

	                _this.m.list = list;
	            });
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Crm0900Controller;
	}();

	var Crm0900Component = exports.Crm0900Component = {
	    // templateUrl: './views/app/components/crm0900/crm0900.component.html',
	    templateUrl: '/views/admin.crm0900',
	    controller: Crm0900Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 189 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm1000Controller = function () {
	    Crm1000Controller.$inject = ["$scope", "$state", "API", "$log", "UtilsService", "ClientService"];
	    function Crm1000Controller($scope, $state, API, $log, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm1000Controller);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.m = {
	            filter: {},
	            list: null,
	            dateOptions: {
	                // formatYear: 'yy',
	                startingDay: 1
	            }
	        };

	        this.search();
	        //
	    }

	    _createClass(Crm1000Controller, [{
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.search(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {

	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	            this.m.filter.delivery_start_date = null;
	            this.m.filter.delivery_end_date = null;
	            this.m.filter.delivery_vendor_name = null;
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            var $log = this.$log;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm1000'));
	            var param = angular.copy(this.m.filter);

	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;
	            param.down = 0;
	            searchService.post(param).then(function (response) {
	                _this.$log.info(response);
	                _this.m.list = response.plain().data;
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this2 = this;

	            var param = angular.copy(this.m.filter);
	            var service = this.API.service('download', this.API.all('crm1000'));
	            param.down = 1;
	            service.post(param).then(function (response) {
	                _this2.$log.info(response.data);
	                _this2.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Crm1000Controller;
	}();

	var Crm1000Component = exports.Crm1000Component = {
	    templateUrl: './views/admin.crm1000',
	    controller: Crm1000Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 190 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0110Controller = function () {
	    Crm0110Controller.$inject = ["$scope", "$state", "$compile", "API", "$log", "AclService", "UtilsService", "$stateParams", "ClientService", "RouteService"];
	    function Crm0110Controller($scope, $state, $compile, API, $log, AclService, UtilsService, $stateParams, ClientService, RouteService) {
	        'ngInject';

	        _classCallCheck(this, Crm0110Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.can = AclService.can;
	        this.ClientService = ClientService;
	        this.RouteService = RouteService;

	        this.m = {
	            form: {},
	            init: {}
	        };

	        if ($stateParams.product_id > 0) {
	            this.m.form.product_id = $stateParams.product_id;
	        } else {
	            this.m.form.product_id = 0;
	        }
	    }

	    _createClass(Crm0110Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            var self = this;
	            var fileControl = angular.element("#file");
	            fileControl.on('change', function () {
	                var filesSelected = fileControl[0].files;
	                if (filesSelected.length > 0) {
	                    var fileToLoad = filesSelected[0];
	                    var fileReader = new FileReader();
	                    fileReader.onload = function (fileLoadedEvent) {
	                        var srcData = fileLoadedEvent.target.result; // <--- data: base64 
	                        self.$scope.$apply(function () {
	                            self.m.form.file = srcData;
	                            self.$log.info('self.m.form.file', self.m.form.file);
	                        });
	                    };
	                    fileReader.readAsDataURL(fileToLoad);
	                }
	            });

	            this.loadInitData();
	        }
	    }, {
	        key: 'loadInitData',
	        value: function loadInitData() {

	            var thisClass = this;
	            if (this.m.form.product_id > 0) {
	                var service = this.API.service('load', this.API.all('crm0110'));
	                var param = { product_id: this.m.form.product_id };
	                service.post(param).then(function (response) {
	                    thisClass.$log.info('response', response);
	                    thisClass.setInitValue(response.data.init);
	                    thisClass.m.form = response.data.product;
	                }, function (response) {
	                    //ClientService.error('Đã có lỗi xãy ra');
	                    // let alert = { type: 'error', 'title': 'Error!', msg: response.data.message }
	                    // RouteService.goState('app.supplierlist', { alerts: alert })
	                });
	            } else {
	                var _service = this.API.service('init', this.API.all('crm0110'));
	                var _param = {};
	                _service.post(_param).then(function (response) {
	                    thisClass.$log.info('response', response);
	                    thisClass.setInitValue(response.data.init);
	                }, function (response) {
	                    //ClientService.error('Đã có lỗi xãy ra');
	                    // let alert = { type: 'error', 'title': 'Error!', msg: response.data.message }
	                    // RouteService.goState('app.supplierlist', { alerts: alert })
	                });
	            }
	        }
	    }, {
	        key: 'setInitValue',
	        value: function setInitValue(initObj) {
	            this.m.init = initObj;
	            this.m.init.listWarranty = [0, 1, 2, 3, 4, 5, 6];
	            if (angular.isUndefined(this.m.form.warranty_year) || this.m.form.warranty_year == null) {
	                this.m.form.warranty_year = 1;
	            }

	            var sYear = new Date().getFullYear() + "";
	            this.m.form.thisYear = sYear.substr(sYear.length - 1);

	            if (this.m.init.listSupplier != null && this.m.init.listSupplier.length > 0) {
	                this.m.form.supplier_id = this.m.init.listSupplier[0].supplier_id;

	                angular.forEach(this.m.init.listSupplier, function (item) {
	                    item.display = "(" + item.supplier_code + ") " + item.name;
	                });
	            }

	            if (this.m.init.listCat1 != null && this.m.init.listCat1.length > 0) {
	                // this.m.form.product_cat1_id = this.m.init.listProductCat1[0].product_cat1_id;

	                angular.forEach(this.m.init.listCat1, function (item) {
	                    item.display = item.name;
	                });
	            }

	            if (this.m.init.listCat2 != null && this.m.init.listCat2.length > 0) {
	                // this.m.form.product_cat2_id = this.m.init.listProductCat2[0].product_cat2_id;

	                angular.forEach(this.m.init.listCat2, function (item) {
	                    item.display = item.name;
	                });
	            }
	        }
	    }, {
	        key: 'save',
	        value: function save(isValid) {
	            var _this = this;

	            this.$log.info(isValid);
	            this.$log.info("this.form", this.m.form);
	            if (!isValid) {
	                return;
	            }
	            this.m.errors = null;

	            var thisClass = this;
	            var action = 'create';
	            if (this.m.form.product_id > 0) {
	                action = 'update';
	            }

	            var service = this.API.service(action, this.API.all('crm0110'));

	            var param = angular.copy(this.m.form);

	            service.post(param).then(function (response) {
	                thisClass.$log.info('ok response', response.plain().data);
	                _this.m.data = response.plain().data;
	                var result = response.plain().data;
	                if (result.rtnCd) {
	                    thisClass.ClientService.success(result.msg);
	                    thisClass.RouteService.goState('app.crm0100');
	                }
	            }, function (response) {
	                thisClass.$log.info('ng response', response);
	                _this.m.errors = response.data.errors;
	            });
	        }
	    }]);

	    return Crm0110Controller;
	}();

	var Crm0110Component = exports.Crm0110Component = {
	    // templateUrl: './views/app/components/crm0110/crm0110.component.html',
	    templateUrl: '/views/admin.crm0110',
	    controller: Crm0110Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Crm0100Component = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _crm0100_setup_price = __webpack_require__(192);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0100Controller = function () {
	    Crm0100Controller.$inject = ["$scope", "$state", "$compile", "API", "$log", "AclService", "UtilsService", "DialogService", "ClientService"];
	    function Crm0100Controller($scope, $state, $compile, API, $log, AclService, UtilsService, DialogService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm0100Controller);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.can = AclService.can;
	        this.DialogService = DialogService;
	        this.ClientService = ClientService;

	        this.m = {
	            filter: {},
	            list: null
	        };
	    }

	    _createClass(Crm0100Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.m.filter.orderBy = 'updated_at';
	            this.m.filter.orderDirection = 'desc';
	            this.init();
	        }
	    }, {
	        key: 'init',
	        value: function init() {
	            var previousSearch = sessionStorage.crm0100;
	            this.loadInit();
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);
	            this.doSearch(page);
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var that = this;
	            var service = this.API.service('load-init', this.API.all('crm0100'));
	            service.post().then(function (response) {
	                that.m.init = response.data;
	            });
	        }
	    }, {
	        key: 'search',
	        value: function search() {

	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.search(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm0100'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;

	            sessionStorage.crm0100 = angular.toJson(param);

	            searchService.post(param).then(function (response) {
	                _this.m.data = response.plain().data.data;
	            });
	        }
	    }, {
	        key: 'clickSetupPrice',
	        value: function clickSetupPrice(item) {
	            var thisClass = this;

	            var modalOption = {
	                controller: _crm0100_setup_price.Crm0100SetupPriceController,
	                resolve: {
	                    params: function params() {
	                        var result = {
	                            "product": item
	                        };
	                        return result;
	                    }
	                }
	            };

	            var modalInstance = this.DialogService.open('crm0100_setup_price', modalOption);
	            modalInstance.result.then(function (params) {
	                // Refresh list after update
	                thisClass.search();
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this2 = this;

	            var service = this.API.service('download', this.API.all('crm0100'));

	            service.post().then(function (response) {
	                //this.$log.info(response.data);
	                _this2.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }, {
	        key: 'priority',
	        value: function priority() {
	            var service = this.API.service('priority', this.API.all('crm0100'));

	            service.post().then(function (response) {});
	        }
	    }]);

	    return Crm0100Controller;
	}();

	var Crm0100Component = exports.Crm0100Component = {
	    // templateUrl: './views/app/components/crm0100/crm0100.component.html',
	    templateUrl: '/views/admin.crm0100',
	    controller: Crm0100Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 192 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0100SetupPriceController = exports.Crm0100SetupPriceController = function () {
	    Crm0100SetupPriceController.$inject = ["$scope", "$log", "API", "AclService", "DialogService", "UtilsService", "ClientService", "params"];
	    function Crm0100SetupPriceController($scope, $log, API, AclService, DialogService, UtilsService, ClientService, params) {
	        'ngInject';

	        _classCallCheck(this, Crm0100SetupPriceController);

	        this.$scope = $scope;
	        this.$log = $log;
	        this.API = API;
	        this.can = AclService.can;
	        this.DialogService = DialogService;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;

	        this.m = {
	            product: params.product,
	            form: {
	                import_price: parseFloat(params.product.purchase_price),
	                selling_price: parseInt(params.product.selling_price)

	            },
	            errors: null
	        };
	    }

	    _createClass(Crm0100SetupPriceController, [{
	        key: 'save',
	        value: function save() {
	            var _this = this;

	            // Clear error
	            this.m.errors = null;

	            var thisClass = this;
	            var service = this.API.service('update-price', this.API.all('crm0100'));
	            var param = angular.copy(this.m.form);
	            param.product_id = this.m.product.product_id;

	            service.post(param).then(function (response) {
	                thisClass.$log.info(response.plain().data);
	                _this.m.data = response.plain().data;
	                var result = response.plain().data;
	                if (result.rtnCd) {
	                    thisClass.ClientService.success(result.msg);
	                    thisClass.DialogService.close(_this.params);
	                }
	            }, function (response) {
	                thisClass.$log.info('ng response', response);
	                _this.m.errors = response.data.errors;
	            });
	        }
	    }, {
	        key: 'cancel',
	        value: function cancel() {
	            this.DialogService.cancel();
	        }
	    }]);

	    return Crm0100SetupPriceController;
	}();

/***/ }),
/* 193 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0210Controller = function () {
	    Hrm0210Controller.$inject = ["$scope", "$state", "API", "$log", "UtilsService", "ClientService", "$stateParams", "RouteService", "$timeout"];
	    function Hrm0210Controller($scope, $state, API, $log, UtilsService, ClientService, $stateParams, RouteService, $timeout) {
	        'ngInject';

	        _classCallCheck(this, Hrm0210Controller);

	        this.$scope = this.$scope;
	        this.$state = $state;
	        this.API = API;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.RouteService = RouteService;
	        this.$timeout = $timeout;

	        this.started = false;

	        this.m = {
	            //time: 5 * 60 * 60
	            time: 60
	        };
	        this.m.id = $stateParams.id;

	        if (this.m.id == null || this.m.id <= 0) {
	            // this.ClientService.warning("Vui lòng chọn cửa hàng");
	            this.RouteService.goState("app.hrm0200");
	        }

	        // this.showClock();
	        this.load();
	    }

	    _createClass(Hrm0210Controller, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }, {
	        key: '$onDetroy',
	        value: function $onDetroy() {}
	    }, {
	        key: 'start',
	        value: function start() {
	            var _this = this;

	            // this.started = true;
	            // let that = this;
	            // this.timer = this.$timeout(function(){
	            //     that.tick();
	            // }, 1000);
	            var searchService = this.API.service('start', this.API.all('hrm0210'));
	            var param = {
	                id: this.m.id
	            };

	            searchService.post(param).then(function (response) {
	                if (response.data.rtnCd == -1) {
	                    _this.ClientService.error("Không thể làm bài");
	                    // this.RouteService.goState("app.hrm0200");
	                } else {
	                    _this.started = true;
	                    var that = _this;
	                    _this.timer = _this.$timeout(function () {
	                        that.tick();
	                    }, 1000);
	                }
	            });
	        }
	    }, {
	        key: 'tick',
	        value: function tick() {
	            this.m.time = this.m.time - 1;
	            this.showClock();
	        }
	    }, {
	        key: 'showClock',
	        value: function showClock() {
	            if (this.m.time >= 0) {
	                // this.m.time = this.m.time - 1;

	                var hour = Math.floor(this.m.time / 3600);
	                var min = Math.floor((this.m.time - hour * 3600) / 60);
	                var sec = this.m.time - hour * 60 * 60 - min * 60;

	                var clockString = "";
	                if (hour < 10) {
	                    clockString += "0" + hour;
	                } else {
	                    clockString += hour + "";
	                }
	                clockString = clockString + ":";
	                if (min < 10) {
	                    clockString += "0" + min;
	                } else {
	                    clockString += min + "";
	                }
	                clockString = clockString + ":";
	                if (sec < 10) {
	                    clockString += "0" + sec;
	                } else {
	                    clockString += sec + "";
	                }
	                this.m.clockString = clockString;

	                var that = this;
	                this.timer = this.$timeout(function () {
	                    that.tick();
	                }, 1000);
	            } else {
	                this.finish();
	            }
	        }
	    }, {
	        key: 'clearTimer',
	        value: function clearTimer() {
	            if (this.timer != null) {
	                this.$timeout.cancel(this.timer);
	                this.timer = null;
	            }
	        }
	    }, {
	        key: 'finish',
	        value: function finish() {
	            this.clearTimer();
	            this.upload();
	        }
	    }, {
	        key: 'load',
	        value: function load() {
	            var _this2 = this;

	            var searchService = this.API.service('load', this.API.all('hrm0210'));
	            var param = {
	                id: this.m.id
	            };

	            searchService.post(param).then(function (response) {
	                _this2.$log.debug('response', response);
	                if (response.data.rtnCd == -1) {
	                    _this2.ClientService.warning("Không tìm thấy bài kiểm tra");
	                    _this2.RouteService.goState("app.hrm0200");
	                }

	                _this2.m.min = response.data.time;
	                _this2.m.time = response.data.time * 60;
	                _this2.m.data = response.data;
	            });
	        }
	    }, {
	        key: 'upload',
	        value: function upload() {
	            var _this3 = this;

	            this.$log.debug('upload here');

	            var searchService = this.API.service('save', this.API.all('hrm0210'));
	            var param = angular.copy(this.m.data);
	            param.id = this.m.id;

	            searchService.post(param).then(function (response) {
	                // this.$log.info(response);
	                // var data = response.plain().data;
	                // var list = data.data;
	                // angular.forEach(list, function(value){
	                //     list.check = false;
	                // });
	                // // this.m.list = list;
	                // this.m.data = data;
	                // swal("Thành công!", "Bài kiểm tra của bạn đã được gửi!", "success")
	                var that = _this3;
	                if (response.data.rtnCd == -1) {
	                    swal({
	                        title: "Thất bại",
	                        text: "Bạn chưa hoàn thành bài kiểm tra",
	                        type: "error",
	                        timer: 3000,
	                        showConfirmButton: true
	                    }, function () {});
	                } else {
	                    swal({
	                        title: "Thành công!",
	                        text: "Bạn đã hoàn thành bài kiểm tra",
	                        timer: 3000,
	                        showConfirmButton: true
	                    }, function () {
	                        that.RouteService.goState("app.hrm0200");
	                    });
	                }
	            });
	        }
	    }]);

	    return Hrm0210Controller;
	}();

	var Hrm0210Component = exports.Hrm0210Component = {
	    // templateUrl: './views/app/components/hrm0210/hrm0210.component.html',
	    templateUrl: '/views/admin.hrm0210',
	    controller: Hrm0210Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 194 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0200Controller = function () {
	    Hrm0200Controller.$inject = ["$scope", "$state", "API", "$log", "UtilsService", "ClientService"];
	    function Hrm0200Controller($scope, $state, API, $log, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0200Controller);

	        this.$scope = this.$scope;
	        this.$state = $state;
	        this.API = API;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;

	        this.m = {
	            filter: {},
	            list: null,
	            dateOptions: {
	                // formatYear: 'yy',
	                startingDay: 1
	            }
	        };

	        this.search();
	    }

	    _createClass(Hrm0200Controller, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, $scope.m.filter.orderBy, $scope.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            var $log = this.$log;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('hrm0200'));
	            var param = angular.copy(this.m.filter);

	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;

	            searchService.post(param).then(function (response) {
	                _this.$log.info(response);
	                var data = response.plain().data;
	                var list = data.data;

	                // angular.forEach(list, function(value){
	                //     list.check = false;
	                // });
	                // this.m.list = list;
	                _this.m.data = data;
	            });
	        }
	    }]);

	    return Hrm0200Controller;
	}();

	var Hrm0200Component = exports.Hrm0200Component = {
	    //templateUrl: './views/app/components/hrm0200/hrm0200.component.html',
	    templateUrl: '/views/admin.hrm0200',
	    controller: Hrm0200Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 195 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0120Controller = function () {
	    Hrm0120Controller.$inject = ["$scope", "$state", "API", "$log", "UtilsService", "ClientService"];
	    function Hrm0120Controller($scope, $state, API, $log, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Hrm0120Controller);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.m = {
	            filter: {},
	            list: null,
	            dateOptions: {
	                // formatYear: 'yy',
	                startingDay: 1
	            }
	            // this.search();
	        };this.init();
	    }

	    _createClass(Hrm0120Controller, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }, {
	        key: 'init',
	        value: function init() {
	            var _this = this;

	            var $log = this.$log;
	            var searchService = this.API.service('init', this.API.all('hrm0120'));

	            searchService.post({}).then(function (response) {
	                _this.m.init = response.plain().data;
	                $log.info('this.m.init: ', _this.m.init);
	                _this.search();
	            });
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, $scope.m.filter.orderBy, $scope.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.doSearch(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this2 = this;

	            var $log = this.$log;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('hrm0120'));
	            var param = angular.copy(this.m.filter);

	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;

	            searchService.post(param).then(function (response) {
	                _this2.$log.info(response);
	                var data = response.plain().data;
	                var list = data.data;
	                angular.forEach(list, function (value) {
	                    list.check = false;
	                });
	                // this.m.list = list;
	                _this2.m.data = data;
	            });
	        }
	    }, {
	        key: 'accept',
	        value: function accept(item) {
	            var that = this;
	            this.$log.debug(item);
	            swal({
	                title: "Bạn có muốn chấp nhận đơn xin này?",
	                text: "",
	                type: "input",
	                showCancelButton: true,
	                closeOnConfirm: true,
	                inputPlaceholder: "Lý do"
	            }, function (inputValue) {
	                if (inputValue === false) return false;
	                if (inputValue === "") {
	                    swal.showInputError("You need to write something!");
	                    return false;
	                }

	                var param = {
	                    id: item.id,
	                    notes: inputValue
	                };

	                var service = that.API.service('accept', that.API.all('hrm0120'));
	                service.post(param).then(function (res) {
	                    if (res.data.rtnCd == 0) {
	                        that.ClientService.success(res.data.msg);
	                        that.search();
	                    } else {
	                        that.ClientService.error(res.data.msg);
	                    }
	                });
	            });
	        }
	    }, {
	        key: 'deny',
	        value: function deny(item) {
	            var that = this;
	            this.$log.debug(item);
	            swal({
	                title: "Bạn có muốn từ chối đơn xin này?",
	                text: "",
	                type: "input",
	                showCancelButton: true,
	                closeOnConfirm: true,
	                inputPlaceholder: "Lý do",
	                confirmButtonColor: "#DD6B55"
	            }, function (inputValue) {
	                if (inputValue === false) return false;
	                if (inputValue === "") {
	                    swal.showInputError("You need to write something!");
	                    return false;
	                }

	                var param = {
	                    id: item.id,
	                    notes: inputValue
	                };

	                var service = that.API.service('deny', that.API.all('hrm0120'));
	                service.post(param).then(function (res) {
	                    if (res.data.rtnCd == 0) {
	                        that.ClientService.success(res.data.msg);
	                        that.search();
	                    } else {
	                        that.ClientService.error(res.data.msg);
	                    }
	                });
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this3 = this;

	            var param = angular.copy(this.m.filter);

	            var service = this.API.service('download', this.API.all('hrm0120'));
	            service.post(param).then(function (response) {
	                _this3.$log.info(response.data);
	                _this3.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Hrm0120Controller;
	}();

	var Hrm0120Component = exports.Hrm0120Component = {
	    //templateUrl: './views/app/components/hrm0120/hrm0120.component.html',
	    templateUrl: '/views/admin.hrm0120',
	    controller: Hrm0120Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 196 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0100Controller = function () {
	    Hrm0100Controller.$inject = ["$scope", "$state", "API", "$log", "UtilsService", "ClientService", "$timeout", "uiCalendarConfig", "$compile"];
	    function Hrm0100Controller($scope, $state, API, $log, UtilsService, ClientService, $timeout, uiCalendarConfig, $compile) {
	        'ngInject';

	        _classCallCheck(this, Hrm0100Controller);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$timeout = $timeout;
	        this.uiCalendarConfig = uiCalendarConfig;
	        this.$compile = $compile;
	        this.$scope = this.$scope;

	        var that = this;
	        this.uiConfig = {
	            calendar: {
	                // height: 450,
	                // editable: true,
	                header: {
	                    left: 'title',
	                    center: '',
	                    right: 'today prev,next'
	                },
	                // eventClick: $scope.alertOnEventClick,
	                // eventDrop: $scope.alertOnDrop,
	                // eventResize: $scope.alertOnResize,
	                eventRender: function eventRender(event, element, view) {
	                    // element.attr({ 'uib-tooltip': event.title, 'uib-tooltip-append-to-body': true }); 
	                    element.attr({ 'title': event.title });
	                    // that.$compile(element)(that.$scope);
	                },
	                // viewRender: that.viewRender
	                viewRender: function viewRender(view, element) {
	                    that.$log.debug("View Changed: ", view.visStart, view.visEnd, view.start, view.end);
	                    that.viewRender(view, element);
	                }
	            }
	        };

	        this.events = [];

	        this.eventSource = {
	            // url: "http://www.google.com/calendar/feeds/usa__en%40holiday.calendar.google.com/public/basic",
	            // className: 'gcal-event',           // an option!
	            // currentTimezone: 'America/Chicago' // an option!
	        };

	        this.eventSources = [this.events];
	    }

	    _createClass(Hrm0100Controller, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }, {
	        key: 'viewRender',
	        value: function viewRender(view, element) {
	            var startDate = view.start.format('YYYY-MM-DD');
	            var endDate = view.end.format('YYYY-MM-DD');

	            this.search(startDate, endDate);
	        }
	    }, {
	        key: 'search',
	        value: function search(startDate, endDate) {
	            var _this = this;

	            var service = this.API.service('search', this.API.all('hrm0100'));
	            var param = {
	                'startDate': startDate,
	                'endDate': endDate
	            };

	            this.errors = null;
	            service.post(param).then(function (response) {
	                console.log('response.data :', response);

	                _this.listAbsent = response.data.listAbsent;
	                _this.listHoliday = response.data.listHoliday;
	                _this.createCalendarData(_this.listAbsent);
	                _this.createCalendarHolidayData(_this.listHoliday);
	            }, function (response) {
	                _this.$log.debug('response', response);
	                if (response.status == 422) {
	                    _this.errors = response.data.errors;
	                }
	            });
	        }
	    }, {
	        key: 'createCalendarData',
	        value: function createCalendarData(list) {
	            console.log('createCalendarData', list);
	            // Clear event
	            this.events.length = 0;
	            for (var i = 0; i < list.length; i++) {
	                var temp = list[i];
	                var title = "";
	                var backgroundColor = "";
	                var date = new Date(temp.absent_date);
	                var startDate = new Date(temp.absent_date);
	                var endDate = new Date(temp.absent_date);

	                if (temp.absent_type == 1) {
	                    title = "Nghỉ buổi sáng";
	                    backgroundColor = "#872D62";
	                    startDate.setHours(8);
	                    endDate.setHours(12);
	                } else if (temp.absent_type == 2) {
	                    title = "Nghỉ buổi chiều";
	                    backgroundColor = "#AA6B39";
	                    startDate.setHours(13);
	                    endDate.setHours(17);
	                } else if (temp.absent_type == 3) {
	                    title = "Nghỉ cả ngày";
	                    backgroundColor = "#328A2E";
	                    startDate.setHours(8);
	                    endDate.setHours(17);
	                }

	                title = temp.user_name + ": " + title + ' - ' + temp.reason;

	                var item = {
	                    'title': title,
	                    'start': startDate,
	                    'end': endDate,
	                    'backgroundColor': backgroundColor,
	                    'allDay': false,
	                    'stick': true
	                };

	                this.events.push(item);
	            }
	            this.$log.debug(this.events);
	        }
	    }, {
	        key: 'createCalendarHolidayData',
	        value: function createCalendarHolidayData(list) {
	            this.$log.debug('list', list);
	            // Clear event
	            // this.events.length = 0;
	            for (var i = 0; i < list.length; i++) {
	                var temp = list[i];
	                var title = "";
	                var backgroundColor = "";
	                var date = new Date(temp.holiday_date);
	                var startDate = new Date(temp.holiday_date);
	                var endDate = new Date(temp.holiday_date);

	                // if( temp.amount < 1 ) {
	                //     title = "Nghỉ buổi sáng";
	                //     backgroundColor = "#872D62";
	                //     startDate.setHours(8);
	                //     endDate.setHours(12);
	                // } else if( temp.absent_type == 2 ) {
	                //     title = "Nghỉ buổi chiều";
	                //     backgroundColor = "#AA6B39";
	                //     startDate.setHours(13);
	                //     endDate.setHours(17);
	                // } else if( temp.absent_type == 3 ) {
	                //     title = "Nghỉ cả ngày";
	                //     backgroundColor = "#328A2E";
	                //     startDate.setHours(8);
	                //     endDate.setHours(17);
	                // } 

	                title = temp.reason;
	                backgroundColor = "#cc2d2d";

	                var item = {
	                    'title': title,
	                    'start': startDate,
	                    'end': endDate,
	                    'backgroundColor': backgroundColor,
	                    'allDay': true
	                    // 'stick': true
	                };

	                this.events.push(item);
	            }
	            this.$log.debug(this.events);
	        }
	    }]);

	    return Hrm0100Controller;
	}();

	var Hrm0100Component = exports.Hrm0100Component = {
	    // templateUrl: './views/app/components/hrm0100/hrm0100.component.html',
	    templateUrl: '/views/admin.hrm0100',
	    controller: Hrm0100Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 197 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hrm0110Controller = function () {
	    Hrm0110Controller.$inject = ["$scope", "$state", "API", "$log", "UtilsService", "ClientService", "$timeout", "uiCalendarConfig"];
	    function Hrm0110Controller($scope, $state, API, $log, UtilsService, ClientService, $timeout, uiCalendarConfig) {
	        'ngInject';

	        _classCallCheck(this, Hrm0110Controller);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$timeout = $timeout;
	        this.uiCalendarConfig = uiCalendarConfig;

	        this.m = {
	            init: {},
	            form: {
	                dayOffType: '1',
	                leave_type: "1"
	            },
	            datetimepicker_options: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	                // viewDate: 'YYYY-MM'
	            }
	        };

	        this.uiConfig = {
	            calendar: {
	                // height: 450,
	                // editable: true,
	                header: {
	                    left: 'title',
	                    center: '',
	                    right: 'today prev,next'
	                    // eventClick: $scope.alertOnEventClick,
	                    // eventDrop: $scope.alertOnDrop,
	                    // eventResize: $scope.alertOnResize,
	                    // eventRender: $scope.eventRender
	                } }
	        };

	        this.events = [];

	        this.eventSource = {
	            // url: "http://www.google.com/calendar/feeds/usa__en%40holiday.calendar.google.com/public/basic",
	            // className: 'gcal-event',           // an option!
	            // currentTimezone: 'America/Chicago' // an option!
	        };

	        this.eventSources = [this.events];

	        this.activeTab = 1;
	        this.list = [];
	    }

	    _createClass(Hrm0110Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.loadInit();
	            this.loadList();
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            this.API.service('init', this.API.all('hrm0110')).post({}).then(function (response) {
	                console.log('init', response.data);
	                _this.m.init = response.data;
	            });
	        }
	    }, {
	        key: 'validate',
	        value: function validate(param) {
	            if (param.leave_type == 1) {
	                if (!(param.leave_allocation_id > 0)) {
	                    this.errors = {
	                        "leave_allocation_id": ["Vui lòng chọn Ngày phép"]
	                    };
	                    console.log("errors", this.errors);
	                    return false;
	                }
	            }
	            return true;
	        }
	    }, {
	        key: 'save',
	        value: function save() {
	            var _this2 = this;

	            var service = this.API.service('save', this.API.all('hrm0110'));
	            var param = angular.copy(this.m.form);

	            if (param.dayOffDate != null && param.dayOffDate != "") {
	                param.dayOffDate = param.dayOffDate.format('YYYY-MM-DD');
	            }

	            if (this.validate(param) == false) {
	                return false;
	            }

	            this.errors = null;
	            service.post(param).then(function (response) {
	                var returnData = response.data;
	                console.log('returnData', returnData);
	                if (returnData.rtnCd == 0) {
	                    _this2.clear();
	                    _this2.loadList();
	                    _this2.ClientService.success("Đăng ký thành công");
	                } else {
	                    _this2.ClientService.error(returnData.msg);
	                }
	            }, function (response) {
	                _this2.$log.debug('response', response);
	                if (response.status == 422) {
	                    _this2.errors = response.data.errors;
	                }
	            });
	        }
	    }, {
	        key: 'clear',
	        value: function clear() {
	            this.m.form = {
	                dayOffType: '1'
	            };
	        }
	    }, {
	        key: 'openTab',
	        value: function openTab(tabIndex) {
	            this.activeTab = tabIndex;
	        }
	    }, {
	        key: 'loadList',
	        value: function loadList() {
	            var _this3 = this;

	            var service = this.API.service('list', this.API.all('hrm0110'));
	            var param = {};

	            this.errors = null;
	            service.post(param).then(function (response) {
	                _this3.list = response.data;
	                _this3.createCalendarData(_this3.list);
	            }, function (response) {
	                _this3.$log.debug('response', response);
	                if (response.status == 422) {
	                    _this3.errors = response.data.errors;
	                }
	            });
	        }
	    }, {
	        key: 'createCalendarData',
	        value: function createCalendarData(list) {
	            // Clear event
	            this.events.length = 0;
	            for (var i = 0; i < list.length; i++) {
	                var temp = list[i];
	                var title = "";
	                var backgroundColor = "";
	                // var date = new Date(temp.absent_date);
	                var startDate = new Date(temp.absent_date);
	                var endDate = new Date(temp.absent_date);

	                if (temp.absent_type == 1) {
	                    title = "Nghỉ buổi sáng";
	                    backgroundColor = "#872D62";
	                    startDate.setHours(8);
	                    endDate.setHours(12);
	                } else if (temp.absent_type == 2) {
	                    title = "Nghỉ buổi chiều";
	                    backgroundColor = "#AA6B39";
	                    startDate.setHours(13);
	                    endDate.setHours(17);
	                } else if (temp.absent_type == 3) {
	                    title = "Nghỉ cả ngày";
	                    backgroundColor = "#328A2E";
	                    startDate.setHours(8);
	                    endDate.setHours(17);
	                }

	                title = title + ' - ' + temp.reason;

	                var item = {
	                    'title': title,
	                    'start': startDate,
	                    'end': endDate,
	                    'backgroundColor': backgroundColor,
	                    'allDay': false,
	                    'stick': true
	                };

	                this.events.push(item);
	            }
	            this.$log.debug(this.events);
	        }

	        // renderCalendar() {
	        //    this.$timeout(function(){
	        //         angular.element('#calendar').fullCalendar('render');
	        //         angular.element('#calendar').fullCalendar('rerenderEvents');
	        //     }, 0);
	        // }

	    }]);

	    return Hrm0110Controller;
	}();

	var Hrm0110Component = exports.Hrm0110Component = {
	    //templateUrl: './views/app/components/hrm0110/hrm0110.component.html',
	    templateUrl: '/views/admin.hrm0110',
	    controller: Hrm0110Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 198 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0410Controller = function () {
	    Crm0410Controller.$inject = ["$scope", "$state", "API", "$log", "$stateParams", "RouteService", "ClientService", "$window", "AclService"];
	    function Crm0410Controller($scope, $state, API, $log, $stateParams, RouteService, ClientService, $window, AclService) {
	        'ngInject';

	        _classCallCheck(this, Crm0410Controller);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.ClientService = ClientService;
	        this.$scope = $scope;
	        this.RouteService = RouteService;
	        this.$window = $window;
	        this.can = AclService.can;

	        this.m = {
	            order: {
	                // discount_1: 0, 
	                // discount_2: 0,
	                // notes: 0,
	                // store_id: 0,
	                // store_order_id:0,
	                // version_no: 0
	            },
	            orderDetail: [],
	            form: {
	                publishDate: moment(),
	                file: null
	            },
	            formUpload: {
	                file: null,
	                images: []
	            }
	        };

	        this.m.isUploaded = false;

	        this.m.store_order_id = $stateParams.store_order_id;
	        this.m.store_delivery_id = $stateParams.store_delivery_id;
	        this.m.form.id = this.m.store_delivery_id;
	        if ((this.m.store_order_id == null || this.m.store_order_id <= 0) && (this.m.store_delivery_id == null || this.m.store_delivery_id <= 0)) {
	            this.ClientService.warning("Vui lòng chọn phiếu xuất");
	            this.RouteService.goState("app.crm0400");
	            return;
	        }
	    }

	    _createClass(Crm0410Controller, [{
	        key: "$onInit",
	        value: function $onInit() {
	            this._setupFileUpload("fileUpload", this.m.formUpload);
	            this.loadInitData();
	            this.loadImageList();
	        }
	    }, {
	        key: "_setupFileUpload",
	        value: function _setupFileUpload(fileControlId, formModel) {
	            var self = this;
	            var fileControl = angular.element("#" + fileControlId);
	            fileControl.on('change', function () {
	                var filesSelected = fileControl[0].files;
	                if (filesSelected.length > 0) {
	                    var fileToLoad = filesSelected[0];
	                    var fileReader = new FileReader();

	                    fileReader.onload = function (fileLoadedEvent) {
	                        var srcData = fileLoadedEvent.target.result; // <--- data: base64 
	                        self.$scope.$apply(function () {
	                            formModel.file = srcData;
	                        });
	                    };
	                    fileReader.readAsDataURL(fileToLoad);
	                }
	            });
	        }
	    }, {
	        key: "loadInitData",
	        value: function loadInitData() {
	            var _this = this;

	            // let $log = this.$log;

	            var param = {
	                store_order_id: this.m.store_order_id,
	                store_delivery_id: this.m.store_delivery_id
	            };

	            var service = this.API.service('load-init', this.API.all('crm0410'));
	            service.post(param).then(function (response) {
	                if (response.data.store != null) {
	                    _this.m.store = response.data.store;
	                }

	                //this.$log.info('store', this.m.store);

	                if (response.data.order != null) {
	                    response.data.order.discount_1 = parseInt(response.data.order.discount_1);
	                    response.data.order.discount_2 = parseInt(response.data.order.discount_2);
	                    response.data.order.total = parseInt(response.data.order.total);
	                    _this.m.order = response.data.order;
	                }
	                _this.m.warehouseList = response.data.warehouseList;

	                _this.m.delivery = response.data.delivery;
	                _this.m.orderDetail = response.data.orderDetail;
	                _this.m.requestList = response.data.requestList;
	                _this.m.statusList = response.data.statusList;
	                _this.m.shippingList = response.data.shippingList;
	                _this.m.signList = response.data.signList;
	                _this.m.storeSignList = response.data.storeSignList;

	                _this.calcOrderTotal();

	                _this.m.canEdit = true;
	                if (_this.m.order != null) {
	                    if (_this.m.order.delivery_sts == '5') {
	                        _this.m.canEdit = false;
	                    }
	                }
	                _this.$log.info('check init', _this.m);
	            });
	        }
	    }, {
	        key: "calcOrderTotal",
	        value: function calcOrderTotal() {
	            if (this.m.order == null) return;
	            var total = 0;
	            var volume = 0;
	            var carton = 0;
	            angular.forEach(this.m.orderDetail, function (value) {
	                total += parseFloat(value.unit_price) * parseFloat(value.amountExport);
	                volume += parseFloat(value.volume) * parseFloat(value.amountExport) / parseFloat(value.standard_packing);
	                carton += parseFloat(value.amountExport) / parseFloat(value.standard_packing);
	            });
	            this.m.order.total = total;
	            this.m.order.volume = volume;
	            this.m.order.carton = carton;
	        }
	    }, {
	        key: "checkValidWarehouse",
	        value: function checkValidWarehouse() {
	            var oke = true;
	            var msg = "";
	            if (this.m.order.warehouse_id == null || this.m.order.warehouse_id == "") {
	                msg = "Vui lòng chọn kho để nhập.";
	                oke = false;
	            }

	            if (!oke) {
	                this.ClientService.error(msg);
	            }
	            return oke;
	        }
	    }, {
	        key: "clickSave",
	        value: function clickSave(print, type) {
	            var self = this;
	            if (!this.checkValidWarehouse()) {
	                return;
	            }
	            if (isNaN(self.m.order.volume)) {
	                self.ClientService.error('Vui lòng cập nhật thể tích cho sản phẩm');
	                return;
	            }
	            swal({
	                title: "Bạn có muốn lưu",
	                text: "Vui lòng kiểm tra kĩ thông tin kho được xuất.",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                self.save(print, type);
	            });
	        }
	    }, {
	        key: "save",
	        value: function save(print, type) {
	            var self = this;
	            var orderDetail = [];
	            var ok = true;
	            self.m.canEdit = false;
	            if (type == 1) {
	                angular.forEach(self.m.orderDetail, function (value) {
	                    /*if (value.amountExport > value.amount || value.amount < 0) {
	                        self.ClientService.error('Vui lòng nhập lại số lượng xuất');
	                        ok = false;
	                        return;
	                    }*/
	                    orderDetail.push({
	                        product_id: value.product_id,
	                        amount: value.amountExport
	                    });
	                });
	            } else if (type == 2) {
	                angular.forEach(self.m.orderDetail, function (value) {
	                    if (value.amountConfirm > value.amountExport || value.amountConfirm < 0) {
	                        self.ClientService.error('Vui lòng nhập lại số lượng xác nhận');
	                        ok = false;
	                        return;
	                    }
	                    orderDetail.push({
	                        product_id: value.product_id,
	                        amount: value.amountConfirm
	                    });
	                });
	            }
	            if (!ok) {
	                return;
	            }

	            // self.$log.info('check ok', ok);
	            var store_order_id = null;
	            var store_delivery_id = null;
	            if (self.m.store_order_id > 0) {
	                store_order_id = self.m.store_order_id;
	            } else if (self.m.order != null && self.m.order.store_order_id > 0) {
	                store_order_id = self.m.order.store_order_id;
	            }

	            if (self.m.store_delivery_id > 0) {
	                store_delivery_id = self.m.store_delivery_id;
	            } else if (self.m.order != null && self.m.order.store_delivery_id > 0) {
	                store_delivery_id = self.m.order.store_delivery_id;
	            }

	            var param = {
	                mode: 'SAVE',
	                store_id: self.m.store_id,
	                order: {
	                    store_order_id: store_order_id,
	                    store_delivery_id: store_delivery_id,
	                    store_id: self.m.order.store_id,
	                    warehouse_id: self.m.order.warehouse_id,
	                    discount_1: self.m.order.discount_1,
	                    discount_2: self.m.order.discount_2,
	                    volume: self.m.order.volume,
	                    carton: self.m.order.carton,
	                    notes: self.m.order.notes,
	                    version_no: self.m.order.version_no
	                },
	                orderDetail: orderDetail
	            };

	            var service = self.API.service('save', self.API.all('crm0410'));
	            service.post(param).then(function (response) {
	                // this.$log.info('response.data', response.data);
	                self.m.canEdit = true;
	                if (response.data.rtnCd == true) {
	                    self.ClientService.success("Lưu thành công");
	                    self.m.store_delivery_id = response.data.storeDeliveryId;
	                    self.loadInitData();

	                    if (print) {
	                        var param = {
	                            store_delivery_ids: [self.m.store_delivery_id]
	                        };

	                        // this.$log.debug('download');
	                        // this.ClientService.downloadFile('api/crm0210/print-check', param);
	                        var _service = self.API.service('print', self.API.all('crm0410'));
	                        _service.post(param).then(function (res) {
	                            if (res.data.rtnCd == true) {
	                                angular.forEach(res.data.urls, function (item) {
	                                    self.$window.open(item);
	                                });
	                            } else {
	                                self.ClientService.error('Không tải được tập tin.');
	                            }
	                        });
	                    }
	                } else {
	                    self.ClientService.error(response.data.rtnMsg);
	                }
	            });
	        }
	    }, {
	        key: "clickPrintPacking",
	        value: function clickPrintPacking() {
	            // this.clickSave(true);
	            var self = this;
	            this.m.canEdit = false;
	            this.$log.info('check print packing');
	            swal({
	                title: "Bạn có muốn in phiếu soạn hàng này?",
	                text: "Vui lòng kiểm tra kĩ thông tin kho được xuất và số lượng sản phẩm xuất. Sau khi in sẽ không thể chỉnh sửa được nữa",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var param = {
	                    store_delivery_id: self.m.store_delivery_id,
	                    store_order_id: self.m.store_order_id
	                };

	                // this.$log.debug('download');
	                // this.ClientService.downloadFile('api/crm0210/print-check', param);
	                var service = self.API.service('print-packing', self.API.all('crm0410'));
	                service.post(param).then(function (res) {
	                    if (res.data.rtnCd == true) {
	                        angular.forEach(res.data.url, function (item) {
	                            self.$window.open(item);
	                        });
	                        self.loadInitData();
	                    } else {
	                        self.ClientService.error('Không tải được tập tin.');
	                    }
	                });
	            });
	        }
	    }, {
	        key: "clickPrintDelivery",
	        value: function clickPrintDelivery() {
	            // this.clickSave(true);
	            var self = this;
	            this.m.canEdit = false;
	            swal({
	                title: "Bạn có muốn in phiếu xuất này?",
	                text: "Sau khi in sẽ chuyển sang trạng thái giao hàng",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var param = {
	                    store_delivery_id: self.m.store_delivery_id
	                };

	                // this.$log.debug('download');
	                // this.ClientService.downloadFile('api/crm0210/print-check', param);
	                var service = self.API.service('print', self.API.all('crm0410'));
	                service.post(param).then(function (res) {
	                    if (res.data.rtnCd == true) {
	                        angular.forEach(res.data.url, function (item) {
	                            self.$window.open(item);
	                            self.loadInitData();
	                        });
	                    } else {
	                        self.ClientService.error('Không tải được tập tin.');
	                    }
	                });
	            });
	        }
	    }, {
	        key: "clickConfirm",
	        value: function clickConfirm() {
	            // this.clickSave(true);
	            var self = this;
	            this.m.canEdit = false;
	            swal({
	                title: "Bạn có muốn xác nhận số lượng soạn hàng này",
	                text: "Sau khi xác nhận sẽ không thể chỉnh sửa được nữa",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                self.save(false, 2);
	            });
	        }
	    }, {
	        key: "clickShipping",
	        value: function clickShipping() {
	            // this.clickSave(true);
	            var self = this;
	            this.m.canEdit = false;
	            swal({
	                title: "Bạn có muốn xác nhận vận chuyển?",
	                text: "Sau khi bấm nút sẽ chuyển sang trạng thái vận chuyển",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var param = {
	                    store_delivery_id: self.m.store_delivery_id,
	                    shipping_id: self.m.filter.shipping_id
	                };

	                var service = self.API.service('shipping', self.API.all('crm0410'));
	                service.post(param).then(function (res) {
	                    if (res.data.rtnCd == true) {
	                        self.loadInitData();
	                    } else {
	                        self.ClientService.error('Không xác nhận trạng thái vận chuyển được');
	                    }
	                });
	            });
	        }
	    }, {
	        key: "clickReceive",
	        value: function clickReceive() {
	            // this.clickSave(true);
	            var self = this;
	            this.m.canEdit = false;
	            swal({
	                title: "Bạn có muốn xác nhận khách nhận?",
	                text: "Sau khi bấm nút sẽ chuyển sang trạng thái khách nhận",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                self.m.delivery.contact_mobile1 = self.m.store.contact_mobile1;
	                var param = {
	                    store_delivery_id: self.m.store_delivery_id,
	                    item: self.m.delivery
	                };

	                var service = self.API.service('receive', self.API.all('crm0410'));
	                service.post(param).then(function (res) {
	                    if (res.data.rtnCd == true) {
	                        self.loadInitData();
	                    } else {
	                        self.ClientService.error('Không xác nhận trạng thái khách nhận được');
	                    }
	                });
	            });
	        }
	    }, {
	        key: "clickCancel",
	        value: function clickCancel() {
	            var that = this;
	            swal({
	                title: "Bạn có muốn hủy phiếu xuất?",
	                text: "Phiếu xuất sau khi hủy sẽ không thể phục hồi.",
	                type: "input",
	                showCancelButton: true,
	                closeOnConfirm: true,
	                inputPlaceholder: "Lý do"
	            }, function (inputValue) {
	                if (inputValue === false) return false;
	                if (inputValue === "") {
	                    swal.showInputError("You need to write something!");
	                    return false;
	                }

	                var param = {
	                    store_delivery_id: that.m.store_delivery_id,
	                    notes: inputValue
	                };

	                var service = that.API.service('cancel', that.API.all('crm0410'));
	                service.post(param).then(function (res) {
	                    if (res.data.rtnCd == true) {
	                        that.ClientService.success(res.data.msg);
	                    } else {
	                        that.ClientService.error(res.data.msg);
	                    }
	                });
	            });
	        }
	    }, {
	        key: "clickRequestCancel",
	        value: function clickRequestCancel() {
	            var that = this;
	            swal({
	                title: "Bạn có muốn hủy phiếu xuất?",
	                text: "Phiếu xuất sau khi hủy sẽ không thể phục hồi.",
	                type: "input",
	                showCancelButton: true,
	                closeOnConfirm: true,
	                inputPlaceholder: "Lý do"
	            }, function (inputValue) {
	                if (inputValue === false) return false;
	                if (inputValue === "") {
	                    swal.showInputError("You need to write something!");
	                    return false;
	                }

	                var param = {
	                    store_delivery_id: that.m.store_delivery_id,
	                    notes: inputValue
	                };

	                var service = that.API.service('request-cancel', that.API.all('crm0410'));
	                service.post(param).then(function (res) {
	                    if (res.data.rtnCd == true) {
	                        that.ClientService.success(res.data.msg);
	                    } else {
	                        that.ClientService.error(res.data.msg);
	                    }
	                });
	            });
	        }
	    }, {
	        key: "clickFinish",
	        value: function clickFinish() {
	            var that = this;
	            swal({
	                title: "Bạn có muốn hoàn tất phiếu xuất này?",
	                text: "Hoàn tất khi đã hoàn thành thanh toán. Phiếu xuất sau hoàn tất sẽ không thể sửa và in được nữa.",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {

	                var param = {
	                    store_delivery_id: that.m.store_delivery_id
	                };

	                var service = that.API.service('finish', that.API.all('crm0410'));
	                service.post(param).then(function (res) {
	                    if (res.data.rtnCd == true) {
	                        that.ClientService.success(res.data.msg);
	                        that.loadInitData();
	                    } else {
	                        that.ClientService.error(res.data.msg);
	                    }
	                });
	            });
	        }
	    }, {
	        key: "getSumMoneyDiscount",
	        value: function getSumMoneyDiscount() {
	            var result = this.m.order.total * (this.m.order.discount_1 + this.m.order.discount_2) / 100;
	            result = Math.floor(result / 1000) * 1000;
	            return result;
	        }
	    }, {
	        key: "accept",
	        value: function accept(item) {
	            var that = this;
	            this.$log.debug(item);
	            swal({
	                title: "Bạn có muốn chấp nhận yêu cầu này?",
	                text: "",
	                type: "input",
	                showCancelButton: true,
	                closeOnConfirm: true,
	                inputPlaceholder: "Lý do"
	            }, function (inputValue) {
	                if (inputValue === false) return false;
	                if (inputValue === "") {
	                    swal.showInputError("You need to write something!");
	                    return false;
	                }

	                var param = {
	                    request_id: item.request_id,
	                    notes: inputValue
	                };

	                var service = that.API.service('accept', that.API.all('crm0410'));
	                service.post(param).then(function (res) {
	                    if (res.data.rtnCd == true) {
	                        that.ClientService.success(res.data.msg);
	                        that.loadInitData();
	                        // that.search();
	                    } else {
	                        that.ClientService.error(res.data.msg);
	                    }
	                });
	            });
	        }
	    }, {
	        key: "deny",
	        value: function deny(item) {
	            var that = this;
	            this.$log.debug(item);
	            swal({
	                title: "Bạn có muốn từ chối yêu cầu này?",
	                text: "",
	                type: "input",
	                showCancelButton: true,
	                closeOnConfirm: true,
	                inputPlaceholder: "Lý do",
	                confirmButtonColor: "#DD6B55"
	            }, function (inputValue) {
	                if (inputValue === false) return false;
	                if (inputValue === "") {
	                    swal.showInputError("You need to write something!");
	                    return false;
	                }

	                var param = {
	                    request_id: item.request_id,
	                    notes: inputValue
	                };

	                var service = that.API.service('deny', that.API.all('crm0410'));
	                service.post(param).then(function (res) {
	                    if (res.data.rtnCd == true) {
	                        that.ClientService.success(res.data.msg);
	                        that.loadInitData();
	                        // that.search();
	                    } else {
	                        that.ClientService.error(res.data.msg);
	                    }
	                });
	            });
	        }
	    }, {
	        key: "clickCreateExport",
	        value: function clickCreateExport() {
	            var that = this;
	            swal({
	                title: "Bạn có muốn hỗ trợ xuất đơn hàng này?",

	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var param = {
	                    store_order_id: that.m.store_order_id,
	                    store_delivery_id: that.m.store_delivery_id
	                };

	                that.RouteService.goState("app.crm0740", param);
	            });
	        }
	    }, {
	        key: "upload",
	        value: function upload() {
	            var self = this;
	            var service = this.API.service('upload', this.API.all('crm0410'));

	            if (self.m.isUploaded == true) {
	                swal("Đang xử lý!");
	                return;
	            }

	            self.m.isUploaded = true;
	            var param = {
	                id: this.m.form.id,
	                file: this.m.formUpload.file
	            };

	            if (param.id > 0) {
	                service.post(param).then(function (response) {
	                    if (response.data.rtnCd == true) {
	                        self.m.formUpload.file = null;
	                        self.ClientService.success('Thêm hình ảnh  thành công');
	                        self.loadImageList();
	                    } else {
	                        self.ClientService.error('Không thể thêm hình ảnh');
	                    }
	                    self.m.isUploaded = false;
	                });
	            }
	        }
	    }, {
	        key: "loadImageList",
	        value: function loadImageList() {
	            var self = this;
	            var param = {
	                id: this.m.form.id
	            };

	            if (param.id > 0) {
	                var service = this.API.service('load-images', this.API.all('crm0410'));

	                service.post(param).then(function (response) {
	                    if (response.data.rtnCd == true) {
	                        self.m.formUpload.images = response.data.list;
	                    } else {
	                        self.ClientService.error('Có lỗi khi tải hình ảnh');
	                    }
	                });
	            }
	        }
	    }]);

	    return Crm0410Controller;
	}();

	var Crm0410Component = exports.Crm0410Component = {
	    // templateUrl: './views/app/components/crm0410/crm0410.component.html',
	    templateUrl: '/views/admin.crm0410',
	    controller: Crm0410Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Crm0400Component = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Crm0400_shipping = __webpack_require__(200);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0400Controller = function () {
	    Crm0400Controller.$inject = ["$scope", "$state", "API", "$log", "UtilsService", "ClientService", "DialogService", "$stateParams", "NgMap", "AclService"];
	    function Crm0400Controller($scope, $state, API, $log, UtilsService, ClientService, DialogService, $stateParams, NgMap, AclService) {
	        'ngInject';

	        _classCallCheck(this, Crm0400Controller);

	        this.$scope = $scope;
	        this.API = API;
	        this.AclService = AclService;
	        this.can = AclService.can;

	        this.$state = $state;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.DialogService = DialogService;
	        this.ClientService = ClientService;
	        this.$stateParams = $stateParams;
	        this.NgMap = NgMap;
	        this.map = null;

	        this.m = {
	            activeFlag: 2,
	            filter: {},
	            list: null,
	            is_store: true,
	            is_chanh: false,
	            dateOptions: {
	                // formatYear: 'yy',
	                startingDay: 1
	            },
	            datetimepicker_options: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            },
	            mapOption: {},
	            optionsFrom: {
	                format: 'YYYY-MM-DD HH:mm'
	            },
	            optionsTo: {
	                format: 'YYYY-MM-DD HH:mm'
	            }

	        };
	        this.init();
	    }

	    _createClass(Crm0400Controller, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }, {
	        key: 'init',
	        value: function init() {

	            // this.$log.info('is map',self.map);

	            this.title = ["Mới", "Đóng gói", "Xác nhận", "Xuất kho", "Vận chuyển", "Khách nhận", "Hoàn tất", "Huỷ"];
	            this.code = { 0: 2,
	                6: 3,
	                7: 4,
	                1: 5,
	                8: 6,
	                9: 7,
	                4: 8,
	                5: 9 };
	            for (var i = 2; i < 12; i++) {
	                this.m[i] = {
	                    filter: {
	                        orderBy: 'updated_at',
	                        orderDirection: 'desc'
	                    },
	                    data: {
	                        total: 0
	                    },
	                    title: this.title[i - 2]
	                };
	            }

	            this.loadInit();
	            this.$log.info('is map', this.m);
	            if (this.$stateParams.store_id != null) {
	                for (var i = 2; i < 12; i++) {
	                    this.m[i].filter.store_id = this.$stateParams.store_id;
	                }
	                this.doSearch(2, 1);
	            } else {
	                var previousSearch = sessionStorage.crm0400;
	                if (angular.isUndefined(previousSearch)) {
	                    this.doSearch(2, 1);
	                    return;
	                }

	                previousSearch = angular.fromJson(previousSearch);
	                var page = previousSearch.page;
	                var index = previousSearch.index;

	                this.m.activeFlag = index;
	                delete previousSearch['page'];
	                delete previousSearch['index'];
	                this.m[index].filter = angular.copy(previousSearch);
	                if (index < 11) {
	                    this.doSearch(index, page);
	                } else {
	                    this.doMap();
	                }
	            }
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var that = this;
	            var service = this.API.service('load-promotion', this.API.all('crm0400'));
	            service.post().then(function (response) {
	                var promotionList = response.data.promotionList;
	                var salesmanList = response.data.salesmanList;
	                var statusList = response.data.statusList;
	                var branchList = response.data.branchList;
	                var reportStatus = response.data.reportStatus;
	                var warehouseList = response.data.warehouseList;

	                if (promotionList != null) {
	                    _this.m.listPromotion = promotionList;
	                }
	                if (salesmanList != null) {
	                    _this.m.listSalesman = salesmanList;
	                }
	                if (statusList != null) {
	                    _this.m.statusList = statusList;
	                }
	                if (branchList != null) {
	                    _this.m.branchList = branchList;
	                }

	                if (warehouseList != null) {
	                    _this.m.warehouseList = warehouseList;
	                }
	                _this.m.supplierList = response.data.supplierList;
	                if (reportStatus != null) {
	                    _this.m.reportStatus = reportStatus;
	                    angular.forEach(_this.m.reportStatus, function (value) {
	                        // total += parseFloat(value.unit_price) * parseFloat(value.amountExport);
	                        var num = parseInt(value["delivery_sts"], 10);
	                        var count = value["count"];
	                        var id = that.code[num];
	                        that.m[id].data.total = count;
	                    });
	                }
	            });
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.doSearch(2, 1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter(index) {
	            if (index < 1 || index > 12) {
	                return;
	            }
	            this.m[index].filter = {
	                orderBy: 'updated_at',
	                orderDirection: 'desc'
	            };
	            this.doSearch(index, 1);
	        }
	    }, {
	        key: 'chooseTab',
	        value: function chooseTab(index) {
	            if (index < 1 || index > 12) {
	                return;
	            }
	            this.m.activeFlag = index;
	            if (index < 11) {
	                this.doSearch(index, 1);
	            } else {
	                this.doMap();
	            }
	        }
	    }, {
	        key: 'sort',
	        value: function sort(index, orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m[index].filter.orderBy, this.m[index].filter.orderDirection);
	            this.m[index].filter.orderBy = orderOption.orderBy;
	            this.m[index].filter.orderDirection = orderOption.orderDirection;

	            this.doSearch(index, 1);
	        }
	    }, {
	        key: 'toogleList',
	        value: function toogleList() {
	            this.m.showList = !this.m.showList;
	        }
	    }, {
	        key: 'showInfo',
	        value: function showInfo(evt, item, self) {
	            self.$log.info('showInfo', evt, item);
	            self.m.selected = item;
	            self.map.showInfoWindow('myInfoWindow', this);
	        }
	    }, {
	        key: 'loadMap',
	        value: function loadMap() {
	            var _this2 = this;

	            var self = this;
	            var iconBase = 'http://maps.google.com/mapfiles/kml/';

	            var icons = {
	                host: {
	                    icon: iconBase + 'shapes/ranger_station.png'
	                },
	                store: {
	                    icon: iconBase + 'paddle/red-square.png'
	                },
	                chanh: {
	                    icon: iconBase + 'paddle/blu-blank.png'
	                }
	            };

	            var listMarker = [];
	            // this.$log.info('is store',this.m.is_store);
	            // this.$log.info('self.map',self.map);

	            if (this.m.markerClusterer) {
	                this.m.markerClusterer.clearMarkers();
	            }
	            var marker = new google.maps.Marker({
	                position: new google.maps.LatLng(10.737462, 106.711953),
	                title: "PKH",
	                icon: icons["host"].icon
	            });
	            listMarker.push(marker);

	            this.m[11].data1.forEach(function (element) {
	                if (_this2.m.is_store) {
	                    if (element.gps_lat != null & element.gps_long != null) {
	                        var marker = new google.maps.Marker({
	                            position: new google.maps.LatLng(element.gps_lat, element.gps_long),
	                            title: element.name,
	                            icon: icons["store"].icon
	                        });

	                        listMarker.push(marker);

	                        google.maps.event.addListener(marker, 'click', function () {

	                            self.m.selected = element;
	                            self.map.showInfoWindow('myInfoWindow', this);
	                        });
	                    }
	                } else if (_this2.m.is_chanh) {
	                    var gps_lat = element.gps_lat_c;
	                    var gps_long = element.gps_long_c;
	                    var icon = icons["chanh"].icon;
	                    var title = "chành " + element.name;

	                    if (gps_lat == null | gps_long == null | gps_lat == 0 & gps_long == 0) {
	                        gps_lat = element.gps_lat;
	                        gps_long = element.gps_long;
	                        title = element.name;
	                        icon = icons["store"].icon;
	                    }
	                    if (gps_lat != null & gps_long != null) {
	                        var marker = new google.maps.Marker({
	                            position: new google.maps.LatLng(gps_lat, gps_long),
	                            title: title,
	                            icon: icon
	                        });
	                        // this.$log.info('titel',title );

	                        listMarker.push(marker);

	                        google.maps.event.addListener(marker, 'click', function () {

	                            self.m.selected = element;
	                            self.map.showInfoWindow('myInfoWindow', this);
	                        });
	                    }
	                }
	            });
	            this.$log.info('markers', listMarker);
	            var mcOptions = { imagePath: 'https://cdn.rawgit.com/googlemaps/js-marker-clusterer/gh-pages/images/m' };

	            this.m.markerClusterer = new MarkerClusterer(self.map, listMarker, mcOptions);
	            //   this.m.markerClusterer.setMap(null);
	        }
	    }, {
	        key: 'doMap',
	        value: function doMap() {
	            var self = this;
	            this.$log.info('doMap');

	            this.NgMap.getMap().then(function (map) {
	                self.map = map;
	                self.$log.info('is map inside');
	                self.mapOption = {
	                    icons: [{
	                        icon: { path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW },
	                        offset: '100%'
	                    }],
	                    markerOption: {
	                        icon: {
	                            path: google.maps.SymbolPath.BACKWARD_CLOSED_ARROW,
	                            scale: 10
	                        }
	                    }
	                };
	                self.doSearchMap();
	            });
	        }
	    }, {
	        key: 'doSearchMap',
	        value: function doSearchMap() {
	            var _this3 = this;

	            this.$log.info('doSearchMap');
	            var searchService = this.API.service('map', this.API.all('crm0400'));
	            var param = angular.copy(this.m[11].filter);

	            param.index = 11;
	            sessionStorage.crm0400 = angular.toJson(param);
	            searchService.post(param).then(function (response) {
	                // this.$log.info("RESPONSE", response.plain().data.data_1.data);
	                _this3.m[11].data1 = response.plain().data.data_1.data;
	                _this3.m[11].data2 = response.plain().data.data_2.data;
	                _this3.m[11].data3 = response.plain().data.data_3.data;

	                _this3.loadMap();
	            });
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(index, page) {
	            var _this4 = this;

	            var $log = this.$log;
	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm0400'));
	            var param = angular.copy(this.m[index].filter);
	            if (param.from_date) {
	                param.from_date = moment(param.from_date).format('YYYY-MM-DD');
	            }
	            if (param.to_date) {
	                param.to_date = moment(param.to_date).format('YYYY-MM-DD');
	            }
	            param.index = index;
	            param.page = page;
	            sessionStorage.crm0400 = angular.toJson(param);
	            //param.pageSize = $scope.m.paginationInfo.pageSize;

	            searchService.post(param).then(function (response) {
	                var data = response.plain().data;
	                var list = data.list;
	                angular.forEach(list, function (value) {
	                    list.check = false;
	                });
	                _this4.m[index].data = data;
	            });
	        }
	    }, {
	        key: 'clickPrintCheck',
	        value: function clickPrintCheck() {
	            var _this5 = this;

	            var selectedIds = [];
	            angular.forEach(this.m.list, function (value) {
	                if (value.check === true) {
	                    selectedIds.push(value.store_delivery_id);
	                }
	            });

	            if (selectedIds.length == 0) {
	                this.ClientService.warning("Vui lòng chọn phiếu xuất.");
	                return;
	            }

	            var param = {
	                ids: selectedIds
	            };

	            // this.$log.debug('download');
	            // this.ClientService.downloadFile('api/crm0210/print-check', param);
	            var service = this.API.service('print-check', this.API.all('crm0210'));
	            service.post(param).then(function (res) {
	                if (res.data.rtnCd == true) {
	                    _this5.ClientService.success(res.data.url);
	                    window.open(res.data.url);
	                } else {
	                    _this5.ClientService.error('Không tải được tập tin.');
	                }
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this6 = this;

	            var param = angular.copy(this.m.filter);
	            var service = this.API.service('download', this.API.all('crm0400'));
	            param.down = 1;
	            service.post(param).then(function (response) {
	                _this6.$log.info(response.data);
	                _this6.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }, {
	        key: 'Shipping',
	        value: function Shipping(item) {

	            var modalOption = void 0;
	            var DialogClose = void 0;
	            var that = this;

	            var param = {
	                delivery: item
	            };
	            // that.$log.info('sale user', param);
	            modalOption = {
	                size: 'dialog-768',
	                controller: _Crm0400_shipping.Crm0400ShippingDialogController,
	                resolve: {
	                    param: param
	                }
	            };
	            DialogClose = this.DialogService.open('crm0400_shipping', modalOption);
	            DialogClose.result.then(function (data) {
	                that.init();
	            });
	        }
	    }, {
	        key: 'Receive',
	        value: function Receive(item) {
	            var self = this;
	            swal({
	                title: "Bạn có chắc chắn khách đã nhận hàng",
	                text: "Sau khi xác nhận sẽ không thể thay đổi",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Yes',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                self.confirmReceive(item);
	            });
	        }
	    }, {
	        key: 'confirmReceive',
	        value: function confirmReceive(item) {
	            var _this7 = this;

	            var ClientService = this.ClientService;

	            var searchService = this.API.service('receive', this.API.all('crm0400'));

	            var param = angular.copy(item);
	            // this.$log.info('we can send it: ', this.m);
	            searchService.post(param).then(function (response) {
	                if (response.data.oke) {
	                    ClientService.success('Update successfully');
	                } else {
	                    ClientService.error(response.data.message);
	                }
	                _this7.init();
	            });
	        }
	    }, {
	        key: 'downloadList',
	        value: function downloadList(index) {
	            var _this8 = this;

	            var param = angular.copy(this.m[index].filter);
	            if (param.from_date) {
	                param.from_date = moment(param.from_date).format('YYYY-MM-DD');
	            }
	            if (param.to_date) {
	                param.to_date = moment(param.to_date).format('YYYY-MM-DD');
	            }
	            param.index = index;
	            param.down = 1;

	            var service = this.API.service('download-list', this.API.all('crm0400'));
	            service.post(param).then(function (response) {
	                _this8.$log.info(response.data);
	                _this8.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Crm0400Controller;
	}();

	var Crm0400Component = exports.Crm0400Component = {
	    // templateUrl: './views/app/components/crm0400/crm0400.component.html',
	    templateUrl: '/views/admin.crm0400.crm0400',
	    controller: Crm0400Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 200 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0400ShippingDialogController = exports.Crm0400ShippingDialogController = function () {
	    Crm0400ShippingDialogController.$inject = ["$scope", "ClientService", "$uibModalInstance", "DialogService", "$log", "$filter", "API", "param"];
	    function Crm0400ShippingDialogController($scope, ClientService, $uibModalInstance, DialogService, $log, $filter, API, param) {
	        'ngInject';

	        _classCallCheck(this, Crm0400ShippingDialogController);

	        this.$scope = $scope;
	        this.$log = $log;
	        this.DialogService = DialogService;
	        this.$uibModalInstance = $uibModalInstance;
	        this.API = API;
	        this.ClientService = ClientService;

	        //his.$log.info('dialog param', param);
	        this.m = {
	            delivery: param.delivery,
	            form: {
	                item: param.delivery
	            }
	        };
	        this.m.isSubmit == false;
	        // this.API = param.API;
	        this.$log.info('check dialog submit: ', this.m);
	        this.loadInit();
	    }

	    _createClass(Crm0400ShippingDialogController, [{
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var param = {
	                delivery_start_date: this.m.delivery.delivery_time,
	                delivery_end_date: moment(new Date()).format('YYYY-MM-DD')
	            };
	            var service = this.API.service('load-init-shipping', this.API.all('crm0400'));
	            service.post(param).then(function (response) {
	                // this.$log.info('info', response);
	                _this.m.shippingList = response.data.shippingList;
	            });
	        }
	    }, {
	        key: 'finish',
	        value: function finish() {
	            if (this.m.isSubmit == true) {
	                swal("Processing!");
	                return;
	            }

	            var self = this;
	            swal({
	                title: "Bạn có chắc chắn sự vận chuyển này",
	                text: "Sau khi xác nhận sẽ không thể thay đổi",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Yes',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                self.confirmFinish();
	            });
	        }
	    }, {
	        key: 'confirmFinish',
	        value: function confirmFinish() {
	            var _this2 = this;

	            this.m.isSubmit = true;
	            var ClientService = this.ClientService;

	            var searchService = this.API.service('shipping', this.API.all('crm0400'));
	            this.m.form.store_delivery_id = this.m.delivery.store_delivery_id;

	            var param = angular.copy(this.m.form);
	            // this.$log.info('we can send it: ', this.m);
	            searchService.post(param).then(function (response) {
	                if (response.data.oke) {
	                    ClientService.success('Update task successfully');
	                } else {
	                    ClientService.error('permission deny');
	                }
	                _this2.m.isSubmit = false;
	                _this2.DialogService.close();
	            });
	        }
	    }, {
	        key: 'cancel',
	        value: function cancel() {
	            this.DialogService.close();
	        }
	    }]);

	    return Crm0400ShippingDialogController;
	}();

/***/ }),
/* 201 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Cms0100Controller = function () {
	    Cms0100Controller.$inject = ["$scope", "$state", "$log", "$filter", "$translate", "API", "UtilsService", "ClientService"];
	    function Cms0100Controller($scope, $state, $log, $filter, $translate, API, UtilsService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Cms0100Controller);

	        this.$state = $state;
	        this.$log = $log;
	        this.$filter = $filter;
	        this.$translate = $translate;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.m = {
	            init: {},
	            form: {},
	            activeFlag: 1
	        };
	    }

	    _createClass(Cms0100Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.load();
	            this.loadListTopProduct();
	            this.loadListNewProduct();
	        }
	    }, {
	        key: 'load',
	        value: function load() {
	            var _this = this;

	            var service = this.API.service('init-data', this.API.all('cms0100'));
	            service.post().then(function (response) {
	                // this.m.form = response.plain().data;
	                var data = response.plain().data;
	                data.listProduct.forEach(function (element) {
	                    element.displayName = element.product_code + " - " + element.name;
	                });
	                _this.m.init.listProduct = data.listProduct;
	                delete data.listProduct;
	                _this.m.form = data;
	                _this.m.form.cms_zalo_notify = '{"MessageBuilder" : "list" \
	                ,"test_id" : "" \
	                , "actions" : [ \
	                { \
	                "type" : "buildActionOpenURL" \
	                 ,"header" : "DÒNG SẢN PHẨM CAO CẤP ROMA CÓ MẶT TẠI VIỆT NAM"  \
	                , "body" : "Thiết kế kiểu dáng sang trọng, mới lạ, độc đáo, tiện lợi với thân vòi vuông một góc 90°; tay vặn xoay 360°, 5 cánh không bị trơn tuột khi sử dụng và dễ dàng lắp đặt, tháo gỡ" \
	                , "link" : "https://www.phankhangco.com/tin-tuc/dong-san-pham-cao-cap-roma-sap-co-mat-tai-viet-nam_1" \
	                , "image" : "https://www.phankhangco.com/images/92/92_20200827114352_11.jpeg" \
	                } ,\
	                { \
	                "type" : "buildActionQueryShow" \
	                 ,"header" : "DÒNG CAO CẤP ROMA TIẾP TỤC CÓ MẶT TRÊN TẠP CHÍ NỘI THẤT"  \
	                , "body" : "" \
	                , "link" : "https://www.phankhangco.com/tin-tuc/dong-cao-cap-roma-tiep-tuc-co-mat-tren-tap-chi-noi-that" \
	                , "image" : "https://www.phankhangco.com/images/87/87_20200803134013_53.jpeg"  \
	                } , \
	                 { \
	                "type" :"buildActionOpenPhone" \
	                 ,"header" : "Liên hệ"  \
	                , "body" :"" \
	                , "link" : "0915846849" \
	                , "image" : "https://www.phankhangco.com/frontend/theme2/images/slider/slide3.jpg"  \
	                } \
	                ]}';
	            });
	        }
	    }, {
	        key: 'save',
	        value: function save() {
	            var _this2 = this;

	            var service = this.API.service('save', this.API.all('cms0100'));
	            var param = {
	                'cms_home_marquee': this.m.form.cms_home_marquee,
	                'cms_home_marquee_2': this.m.form.cms_home_marquee_2
	            };
	            service.post(param).then(function (response) {
	                // this.m.form = response.plain().data;
	                _this2.ClientService.success(_this2.$translate.instant('MSG_I000003'));
	            });
	        }
	    }, {
	        key: 'broadcast',
	        value: function broadcast() {
	            var self = this;

	            if (self.m.isSaved == true) {
	                swal("Đang xử lý!");
	                return;
	            }

	            // this.$log.info('check print packing');
	            swal({
	                title: "Bạn có muốn thông báo tới tất cả followers qua ZALO?",
	                text: "Sau khi bấm tài khoản zalo của khách hàng sẽ nhận được thông báo",
	                type: "warning",
	                showCancelButton: true,
	                // confirmButtonColor: '#DD6B55', 
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var param = {
	                    message: self.m.form.cms_zalo_notify
	                };
	                self.m.isSaved = true;
	                var service = self.API.service('notify-all-zalo', self.API.all('cms0100'));
	                service.post(param).then(function (res) {
	                    // self.ClientService.warning(res.data.errorMsg);
	                    // self.init();
	                    self.m.isSaved = false;
	                });
	            });
	        }
	    }, {
	        key: 'addProduct',
	        value: function addProduct() {
	            var _this3 = this;

	            if (angular.isUndefined(this.m.form.listProduct)) {
	                this.m.form.listProduct = [];
	            }
	            if (angular.isUndefined(this.m.form.listIds)) {
	                this.m.form.listIds = [];
	            }
	            // let listId = this.m.form.listProduct.map((product) => product.product_id);
	            var listId = this.m.form.listIds;
	            listId.push(this.m.form.selectProduct.product_id);
	            var set = new Set(listId);
	            listId = Array.from(set);

	            var topProduct = listId.join(',');
	            var param = {
	                'cms_home_top_product': topProduct
	            };
	            this.API.service('save-products', this.API.all('cms0100')).post(param).then(function (response) {
	                _this3.ClientService.success(response.data.msg);
	                _this3.m.form.selectProduct = null;
	                _this3.loadListTopProduct();
	            });
	        }
	    }, {
	        key: 'addProductNew',
	        value: function addProductNew() {
	            var _this4 = this;

	            if (angular.isUndefined(this.m.form.listProductNew)) {
	                this.m.form.listProductNew = [];
	            }
	            if (angular.isUndefined(this.m.form.listIdsNew)) {
	                this.m.form.listIdsNew = [];
	            }
	            // let listId = this.m.form.listProduct.map((product) => product.product_id);
	            var listId = this.m.form.listIdsNew;
	            listId.push(this.m.form.selectProductNew.product_id);
	            var set = new Set(listId);
	            listId = Array.from(set);

	            var topProduct = listId.join(',');
	            var param = {
	                'cms_home_new_product': topProduct
	            };
	            this.API.service('save-products', this.API.all('cms0100')).post(param).then(function (response) {
	                _this4.ClientService.success(response.data.msg);
	                _this4.m.form.selectProductNew = null;
	                _this4.loadListNewProduct();
	            });
	        }
	    }, {
	        key: 'removeProduct',
	        value: function removeProduct(product) {
	            var _this5 = this;

	            swal({
	                title: 'Are you sure?',
	                text: 'Do you want to remote this product (' + product.product_code + ')',
	                type: 'warning',
	                showCancelButton: true,
	                confirmButtonColor: '#DD6B55',
	                confirmButtonText: 'Yes, remove it!',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var listId = _this5.m.form.listProduct.map(function (product) {
	                    return product.product_id;
	                }).filter(function (x) {
	                    return x != product.product_id;
	                });
	                var topProduct = listId.join(',');

	                var param = {
	                    'cms_home_top_product': topProduct
	                };
	                _this5.API.service('save-products', _this5.API.all('cms0100')).post(param).then(function (response) {
	                    // this.ClientService.success('Đã thêm sản phẩm thành công');
	                    _this5.ClientService.success('Đã cập nhật thành công');
	                    _this5.loadListTopProduct();
	                });
	            });
	        }
	    }, {
	        key: 'removeProductNew',
	        value: function removeProductNew(product) {
	            var _this6 = this;

	            swal({
	                title: 'Are you sure?',
	                text: 'Do you want to remote this product (' + product.product_code + ')',
	                type: 'warning',
	                showCancelButton: true,
	                confirmButtonColor: '#DD6B55',
	                confirmButtonText: 'Yes, remove it!',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var listId = _this6.m.form.listProductNew.map(function (product) {
	                    return product.product_id;
	                }).filter(function (x) {
	                    return x != product.product_id;
	                });
	                var topProduct = listId.join(',');

	                var param = {
	                    'cms_home_new_product': topProduct
	                };
	                _this6.API.service('save-products', _this6.API.all('cms0100')).post(param).then(function (response) {
	                    // this.ClientService.success('Đã thêm sản phẩm thành công');
	                    _this6.ClientService.success('Đã cập nhật thành công');
	                    _this6.loadListTopProduct();
	                });
	            });
	        }
	    }, {
	        key: 'loadListTopProduct',
	        value: function loadListTopProduct() {
	            var _this7 = this;

	            this.API.service('load-products', this.API.all('cms0100')).post({ type: "BEST_SALE" }).then(function (response) {
	                var data = response.data;
	                _this7.m.form.listProduct = data.listProduct;
	                _this7.m.form.listIds = data.listProduct.map(function (x) {
	                    return x.product_id;
	                });
	                _this7.m.init.listProductFilter = _this7.reduceListAllProduct(_this7.m.form.listIds);
	            });
	        }
	    }, {
	        key: 'loadListNewProduct',
	        value: function loadListNewProduct() {
	            var _this8 = this;

	            this.API.service('load-products', this.API.all('cms0100')).post({ type: "NEW" }).then(function (response) {
	                var data = response.data;
	                _this8.m.form.listProductNew = data.listProduct;
	                _this8.m.form.listIdsNew = data.listProduct.map(function (x) {
	                    return x.product_id;
	                });
	                _this8.m.init.listProductFilterNew = _this8.reduceListAllProduct(_this8.m.form.listIdsNew);
	            });
	        }
	    }, {
	        key: 'reduceListAllProduct',
	        value: function reduceListAllProduct(listIds) {
	            var products = [];
	            if (angular.isUndefined(listIds)) {
	                listIds = [];
	            }
	            this.m.init.listProduct.forEach(function (product) {
	                if (listIds.indexOf(product.product_id) < 0) {
	                    products.push(product);
	                }
	            });

	            return products;
	        }
	    }, {
	        key: 'chooseTab',
	        value: function chooseTab(tab) {
	            this.m.activeFlag = tab;
	        }
	    }]);

	    return Cms0100Controller;
	}();

	var Cms0100Component = exports.Cms0100Component = {
	    // templateUrl: './views/app/components/cms0100/cms0100.component.html',
	    templateUrl: '/views/admin.cms0100',
	    controller: Cms0100Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Crm0300Component = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _crm = __webpack_require__(203);

	var _crm0300_menu = __webpack_require__(204);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0300Controller = function () {
	    Crm0300Controller.$inject = ["$scope", "$state", "$compile", "DTOptionsBuilder", "DTColumnBuilder", "API", "$log", "UtilsService", "AclService", "DialogService", "ClientService"];
	    function Crm0300Controller($scope, $state, $compile, DTOptionsBuilder, DTColumnBuilder, API, $log, UtilsService, AclService, DialogService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, Crm0300Controller);

	        this.API = API;
	        this.$scope = $scope;
	        this.$state = $state;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.DialogService = DialogService;
	        this.ClientService = ClientService;
	        this.can = AclService.can;
	        this.m = {
	            init: {},
	            filter: {
	                salesman: -1,
	                inner_type: null
	            },
	            list: null,
	            datetimepicker_options: {
	                viewMode: 'months',
	                format: 'YYYY-MM'
	            }
	        };
	    }

	    _createClass(Crm0300Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.init();
	        }
	    }, {
	        key: 'init',
	        value: function init() {
	            var _this = this;

	            var previousSearch = sessionStorage.crm0300;
	            var searchService = this.API.service('init', this.API.all('crm0300'));

	            searchService.post({}).then(function (response) {
	                _this.m.init = response.plain().data;
	                //this.$log.info('check crm0300 init ', this.m.init);
	                _this.doSearch(page);
	            });
	            if (angular.isUndefined(previousSearch)) {
	                this.search();
	                return;
	            }

	            previousSearch = angular.fromJson(previousSearch);
	            var page = previousSearch.page;

	            delete previousSearch['page'];
	            this.m.filter = angular.copy(previousSearch);

	            // Get list product 
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            this.m.filter = {
	                salesman: -1,
	                inner_type: null,
	                orderBy: this.m.filter.orderBy,
	                orderDirection: this.m.filter.orderDirection
	            };
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.search(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this2 = this;

	            var $log = this.$log;

	            var searchService = this.API.service('search', this.API.all('crm0300'));
	            var param = angular.copy(this.m.filter);

	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;

	            if (angular.isUndefined(param.month) || param.month == null || param.month == '') {
	                param.month = null;
	            } else {
	                param.month = param.month.format('YYYY-MM');
	            }

	            sessionStorage.crm0300 = angular.toJson(param);

	            searchService.post(param).then(function (response) {
	                var data = response.plain().data;
	                _this2.$log.info("check data search:", data);
	                var now = moment(new Date());
	                data.data.forEach(function (item) {
	                    if (item.review_expired_date && now.isAfter(item.review_expired_date)) {
	                        item.is_review_valid = false;
	                    } else {
	                        item.is_review_valid = true;
	                    }
	                });
	                _this2.m.data = data;
	            });
	        }
	    }, {
	        key: 'openAssignForSales',
	        value: function openAssignForSales(item) {
	            var modalOption = void 0;
	            var that = this;
	            var param = {
	                item: item,
	                salesman: this.m.init.salesman
	            };
	            //$log.info('sale user', param);    
	            modalOption = {
	                size: 'dialog-768',
	                controller: _crm.Crm0300DialogController,
	                resolve: {
	                    param: param
	                }
	            };
	            var DialogClose = this.DialogService.open('crm0300_dialog', modalOption);
	            DialogClose.result.then(function (data) {
	                var paramUpdate = {
	                    salesman_id: data.params.chosenSale,
	                    store_id: item.store_id
	                };
	                // Get list product 
	                var updateService = that.API.service('update-sale', that.API.all('crm0300'));
	                updateService.post(paramUpdate).then(function (response) {
	                    that.init();
	                });
	            });
	        }
	    }, {
	        key: 'openMenu',
	        value: function openMenu(item) {
	            var modalOption = void 0;
	            var crm0710 = this.can('screen.crm0710');
	            var crm1630 = this.can('screen.crm1630');
	            var crm1210 = this.can('screen.crm1210');
	            var crm3010 = this.can("screen.crm3010");
	            var param = {
	                item: item,
	                crm0710: crm0710,
	                crm1630: crm1630,
	                crm1210: crm1210,
	                crm3010: crm3010
	            };
	            modalOption = {
	                size: 'dialog-768',
	                controller: _crm0300_menu.Crm0300MenuDialogController,
	                resolve: {
	                    param: param
	                }
	            };
	            this.$log.info("check data search: ", param.item);
	            this.DialogService.open('crm0300_menu', modalOption);
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this3 = this;

	            var param = angular.copy(this.m.filter);
	            var service = this.API.service('download', this.API.all('crm0300'));
	            param.down = 1;
	            service.post(param).then(function (response) {
	                _this3.$log.info(response.data);
	                _this3.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }, {
	        key: 'updateZalo',
	        value: function updateZalo() {
	            var _this4 = this;

	            console.log('updateZalo :>> ');
	            var param = {};
	            var service = this.API.service('update-zalo', this.API.all('crm0300'));
	            service.post(param).then(function (response) {
	                // this.$log.info(response.data);
	                // this.ClientService.downloadFileOneTime(response.data.file);
	                _this4.ClientService.success("Cập nhật thành công");
	            });
	        }
	    }]);

	    return Crm0300Controller;
	}();

	var Crm0300Component = exports.Crm0300Component = {
	    // templateUrl: './views/app/components/crm0300/crm0300.component.html',
	    templateUrl: '/views/admin.crm0300',
	    controller: Crm0300Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 203 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0300DialogController = exports.Crm0300DialogController = function () {
	    Crm0300DialogController.$inject = ["$scope", "$uibModalInstance", "DialogService", "$log", "$filter", "param"];
	    function Crm0300DialogController($scope, $uibModalInstance, DialogService, $log, $filter, param) {
	        'ngInject';

	        _classCallCheck(this, Crm0300DialogController);

	        this.$scope = $scope;
	        this.$log = $log;
	        this.DialogService = DialogService;
	        this.$uibModalInstance = $uibModalInstance;
	        this.$log.info('dialog param', param);
	        this.m = {
	            item: param.item,
	            salesman: param.salesman,
	            chosenSale: -1
	        };
	        this.m.chosenSale = this.m.item.salesman_id;
	    }

	    _createClass(Crm0300DialogController, [{
	        key: 'cancel',
	        value: function cancel() {
	            var obj = {
	                chosenSale: this.m.chosenSale
	            };
	            this.DialogService.close(obj);
	        }
	    }]);

	    return Crm0300DialogController;
	}();

/***/ }),
/* 204 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0300MenuDialogController = exports.Crm0300MenuDialogController = function () {
	    Crm0300MenuDialogController.$inject = ["$scope", "$uibModalInstance", "DialogService", "$log", "$filter", "param"];
	    function Crm0300MenuDialogController($scope, $uibModalInstance, DialogService, $log, $filter, param) {
	        'ngInject';

	        _classCallCheck(this, Crm0300MenuDialogController);

	        this.$scope = $scope;
	        this.$log = $log;
	        this.DialogService = DialogService;
	        this.$uibModalInstance = $uibModalInstance;

	        this.m = {
	            item: param.item,
	            crm0710: param.crm0710,
	            crm1630: param.crm1630,
	            crm1210: param.crm1210,
	            crm3010: param.crm3010
	        };
	    }

	    _createClass(Crm0300MenuDialogController, [{
	        key: 'cancel',
	        value: function cancel() {
	            this.DialogService.close();
	            //this.$log.info("store_id", this.m.item);
	        }
	    }]);

	    return Crm0300MenuDialogController;
	}();

/***/ }),
/* 205 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0210Controller = function () {
	    Crm0210Controller.$inject = ["$scope", "$state", "$compile", "$log", "ClientService", "AclService", "API", "UtilsService", "RouteService", "$stateParams"];
	    function Crm0210Controller($scope, $state, $compile, $log, ClientService, AclService, API, UtilsService, RouteService, $stateParams) {
	        'ngInject';

	        _classCallCheck(this, Crm0210Controller);

	        this.$scope = $scope;
	        this.$state = $state;
	        this.$compile = $compile;
	        this.$log = $log;
	        this.AclService = AclService;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.RouteService = RouteService;
	        this.m = {
	            order: {},
	            init: {},
	            orderDetail: [],
	            form: {}
	        };
	        this.m.canEdit = true;
	        this.m.test = [0, 0]; //test form of supplier and rate
	        this.m.store_order_id = $stateParams.store_order_id;
	        this.m.store_id = $stateParams.store_id;
	        this.loadInitData();
	    }

	    _createClass(Crm0210Controller, [{
	        key: "loadInitData",
	        value: function loadInitData() {
	            var _this = this;

	            this.m.order.notes = null;
	            var $log = this.$log;
	            var param = {
	                store_order_id: this.m.store_order_id,
	                store_id: this.m.store_id
	                //$log.info('supplier_id', this.m.supplier_order_id);
	            };this.m.store_id = param.store_id;
	            //param.supplier_order_id = this.m.supplier_order_id;
	            var initService = this.API.service("search-product", this.API.all("crm0210"));
	            initService.post(param).then(function (response) {
	                _this.m.init = response.data;
	                //$log.info('ahihi', this.m.init.order);
	                if (response.data.store != null) {
	                    _this.m.store = response.data.store;
	                }
	                if (_this.m.store_order_id != null) {
	                    _this.m.orderDetail = _this.m.init.orderDetail;
	                    _this.m.order = _this.m.init.order;
	                    _this.m.order.total = _this.m.init.order[0].total;
	                    _this.m.order.discount = _this.m.init.order[0].discount;
	                    _this.m.order.total_with_discount = _this.m.init.order[0].total_with_discount;
	                }
	                _this.$log.info("check data search: ", _this.m);
	            });
	        }
	    }, {
	        key: "searchProduct",
	        value: function searchProduct() {
	            var _this2 = this;

	            var $log = this.$log;

	            //this.$log.info(this.m);

	            // Get list product 
	            var searchService = this.API.service('search-product', this.API.all('crm0210'));
	            var param = angular.copy(this.m.filter);

	            var thisClass = this;
	            searchService.post(param).then(function (response) {
	                var list = response.plain().data.list;
	                if (thisClass.m.orderDetail != null && thisClass.m.orderDetail.length > 0) {
	                    angular.forEach(list, function (value, key) {
	                        var hide = false;
	                        for (var i = 0; i < thisClass.m.orderDetail.length; i++) {
	                            if (thisClass.m.orderDetail[i].product_id == value.product_id) {
	                                hide = true;
	                                break;
	                            }
	                        }
	                        value.hide = hide;
	                    });
	                }
	                _this2.m.productList = list;
	                // $log.debug('this.m.list', this.m.productList);
	            });
	        }
	    }, {
	        key: "addProduct",
	        value: function addProduct(product) {
	            if (this.m.orderDetail == null) {
	                this.m.orderDetail = [];
	            }

	            var newProduct = {
	                product_id: product.product_id,
	                product_code: product.product_code,
	                product_name: product.product_name,
	                pakaging: product.pakaging,
	                unit_price: product.selling_price,
	                pakaging_type: product.pakagingType,
	                describes: product.describes,
	                amount: 0,
	                store_order_id: 0,
	                version_no: 0
	                //cần thêm giá vốn
	                // cần thêm thể tích thùng

	            };

	            this.m.orderDetail.push(newProduct);
	            product.hide = true;
	            this.calcOrderTotal();
	        }
	    }, {
	        key: "calcOrderTotal",
	        value: function calcOrderTotal() {
	            if (this.m.order == null) return;
	            var total = 0;
	            var discount = this.m.order.discount;
	            var total_with_discount = 0;
	            angular.forEach(this.m.orderDetail, function (value) {
	                total += parseFloat(value.unit_price) * parseFloat(value.amount);
	            });
	            total_with_discount = total - total * (discount / 100);

	            this.m.discount = discount;
	            this.m.order.total = total;
	            this.m.order.total_with_discount = total_with_discount;

	            //show tổng thể tích và tiền vốn
	        }
	    }, {
	        key: "roundUp",
	        value: function roundUp(number) {
	            return Math.ceil(number);
	        }
	    }, {
	        key: "checkValidForm",
	        value: function checkValidForm() {

	            var oke = true;
	            if (this.m.form.supplier_id == null) {
	                this.m.test[0] = 1;
	                oke = false;
	            } else {
	                this.m.test[0] = 0;
	            }
	            if (this.m.form.rate == null || this.m.form.rate == "") {
	                this.m.test[1] = 1;
	                oke = false;
	            } else {
	                this.m.test[1] = 0;
	            }
	            return oke;
	        }
	    }, {
	        key: "clickSave",
	        value: function clickSave() {
	            var _this3 = this;

	            var orderDetail = [];

	            angular.forEach(this.m.orderDetail, function (value, key) {
	                orderDetail.push({
	                    product_id: value.product_id,
	                    amount: value.amount,
	                    unit_price: value.unit_price,
	                    pakaging: value.pakaging,
	                    describes: value.describes,
	                    pakaging_type: value.pakaging_type,
	                    product_name: value.product_name

	                });
	            });

	            //this.$log.info('order', this.m.order);
	            var param = {
	                mode: 'SAVE',
	                store_id: this.m.store_id,
	                notes: this.m.order.notes,
	                carton: this.m.order.carton,
	                orderDetail: orderDetail,
	                supplier_order_id: this.m.supplier_order_id,
	                store_order_id: this.m.store_order_id,
	                total: this.m.order.total,
	                total_with_discount: this.m.order.total_with_discount,
	                discount: this.m.order.discount,
	                payment_money: this.m.cpayment_money

	            };
	            //this.$log.info('param', param);
	            var service = this.API.service('save', this.API.all('crm0210'));
	            service.post(param).then(function (response) {
	                //this.$log.info('response.data', response.data);
	                _this3.ClientService.success("Lưu thành công");
	                _this3.m.supplier_order_id = response.data.supplierOrderId;
	                _this3.RouteService.goState("app.crm1920");
	            });
	        }
	    }, {
	        key: "removeProduct",
	        value: function removeProduct(product) {
	            var index = this.m.orderDetail.indexOf(product);
	            if (index >= 0) {
	                this.m.orderDetail.splice(index, 1);
	                this.calcOrderTotal();

	                for (var i = 0; i < this.m.productList.length; i++) {
	                    if (this.m.productList[i].product_id == product.product_id) {
	                        this.m.productList[i].hide = false;
	                    }
	                }
	            }
	            this.calcOrderTotal();
	        }
	    }, {
	        key: "clickPrintCheck",
	        value: function clickPrintCheck() {
	            var _this4 = this;

	            var param = {
	                supplier_order_id: this.m.supplier_order_id
	            };

	            // this.$log.debug('download');
	            // this.ClientService.downloadFile('api/crm0210/print-check', param);
	            var service = this.API.service('print-check', this.API.all('crm0210'));
	            service.post(param).then(function (res) {
	                if (res.data.rtnCd == true) {
	                    _this4.m.form.send_po_date = res.data.send_po_date;
	                    window.open(res.data.url);
	                    _this4.loadInitData();
	                } else {
	                    _this4.ClientService.error('Không tải được tập tin.');
	                }
	            });
	        }
	    }, {
	        key: "clickCreateExport",
	        value: function clickCreateExport() {
	            var that = this;
	            swal({
	                title: "Bạn có muốn xuất đơn hàng này?",
	                text: "Đơn hàng sau khi xuất sẽ không thể sửa đổi.",
	                type: "warning",
	                showCancelButton: true,
	                confirmButtonColor: '#DD6B55',
	                confirmButtonText: 'Đồng ý',
	                closeOnConfirm: true,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var param = {
	                    supplier_order_id: that.m.supplier_order_id
	                };

	                that.RouteService.goState("app.crm1610", param);
	            });
	        }
	    }, {
	        key: "$onInit",
	        value: function $onInit() {}
	    }]);

	    return Crm0210Controller;
	}();

	var Crm0210Component = exports.Crm0210Component = {
	    //templateUrl: './views/app/components/crm0210/crm0210.component.html',
	    templateUrl: '/views/admin.crm0210',
	    controller: Crm0210Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 206 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0200Controller = function () {
	    Crm0200Controller.$inject = ["$scope", "$state", "API", "$log", "AclService", "UtilsService", "ClientService", "$window", "$stateParams"];
	    function Crm0200Controller($scope, $state, API, $log, AclService, UtilsService, ClientService, $window, $stateParams) {
	        'ngInject';

	        _classCallCheck(this, Crm0200Controller);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.can = AclService.can;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.$window = $window;
	        this.$stateParams = $stateParams;

	        this.m = {
	            activeFlag: 2,
	            list: null,
	            dateOptions: {
	                // formatYear: 'yy',
	                startingDay: 1
	            },
	            datetimepicker_options: {
	                viewMode: 'days',
	                format: 'YYYY-MM-DD'
	            }
	        };
	    }

	    _createClass(Crm0200Controller, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.title = ["Mới", "Đang xử lý", "Hoàn tất", "Huỷ", "Huỷ còn lại", "", "", "Xác nhận"];
	            this.code = { 0: 2,
	                2: 3,
	                4: 4,
	                5: 5,
	                6: 6,
	                8: 8
	            };
	            for (var i = 2; i < 9; i++) {
	                this.m[i] = {
	                    filter: {
	                        orderBy: 'updated_at',
	                        orderDirection: 'desc'
	                    },
	                    data: {
	                        total: 0
	                    },
	                    title: this.title[i - 2]
	                };
	            }

	            this.loadInit();

	            if (this.$stateParams.store_id != null) {
	                for (var i = 2; i < 7; i++) {
	                    this.m[i].filter.store_id = this.$stateParams.store_id;
	                }
	                this.m[8].filter.store_id = this.$stateParams.store_id;
	                this.doSearch(2, 1);
	            } else {
	                var previousSearch = sessionStorage.crm0200;

	                if (angular.isUndefined(previousSearch)) {
	                    this.doSearch(2, 1);
	                    return;
	                }

	                previousSearch = angular.fromJson(previousSearch);
	                var page = previousSearch.page;
	                var index = previousSearch.index;

	                this.m.activeFlag = index;
	                delete previousSearch['page'];
	                delete previousSearch['index'];
	                this.m[index].filter = angular.copy(previousSearch);
	                this.doSearch(index, page);
	            }
	        }
	    }, {
	        key: 'loadInit',
	        value: function loadInit() {
	            var _this = this;

	            var that = this;
	            var service = this.API.service('load-promotion', this.API.all('crm0200'));
	            service.post().then(function (response) {
	                var promotionList = response.data.promotionList;
	                var salesmanList = response.data.salesmanList;
	                var statusList = response.data.statusList;
	                var branchList = response.data.branchList;
	                var reportStatus = response.data.reportStatus;
	                _this.m.supplierList = response.data.supplierList;

	                if (promotionList != null) {
	                    _this.m.listPromotion = promotionList;
	                }
	                if (salesmanList != null) {
	                    _this.m.listSalesman = salesmanList;
	                }
	                if (statusList != null) {
	                    _this.m.statusList = statusList;
	                }
	                if (branchList != null) {
	                    _this.m.branchList = branchList;
	                }
	                if (reportStatus != null) {
	                    _this.m.reportStatus = reportStatus;

	                    angular.forEach(_this.m.reportStatus, function (value) {
	                        // total += parseFloat(value.unit_price) * parseFloat(value.amountExport);
	                        var num = parseInt(value["order_sts"], 10);
	                        if (num != 7 && num != 1) {
	                            var count = value["count"];
	                            var id = that.code[num];
	                            that.m[id].data.total = count;
	                        }
	                    });
	                }
	                // this.$log.info("check status: ", this.m);
	            });
	        }
	    }, {
	        key: 'search',
	        value: function search() {
	            this.doSearch(2, 1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter(index) {
	            if (index < 1 || index > 9) {
	                return;
	            }
	            this.m[index].filter = {
	                orderBy: 'updated_at',
	                orderDirection: 'desc'
	            };
	            this.doSearch(index, 1);
	        }
	    }, {
	        key: 'chooseTab',
	        value: function chooseTab(index) {
	            if (index < 1 || index > 9) {
	                return;
	            }
	            // this.$log.info('check : ',this.m);
	            this.m.activeFlag = index;
	            this.doSearch(index, 1);
	        }
	    }, {
	        key: 'sort',
	        value: function sort(index, orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m[index].filter.orderBy, this.m[index].filter.orderDirection);
	            this.m[index].filter.orderBy = orderOption.orderBy;
	            this.m[index].filter.orderDirection = orderOption.orderDirection;

	            this.doSearch(index, 1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(index, page) {
	            var _this2 = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm0200'));
	            var param = angular.copy(this.m[index].filter);
	            if (param.from_date) {
	                param.from_date = moment(param.from_date).format('YYYY-MM-DD');
	            }
	            if (param.to_date) {
	                param.to_date = moment(param.to_date).format('YYYY-MM-DD');
	            }

	            param.index = index;
	            param.page = page;
	            sessionStorage.crm0200 = angular.toJson(param);
	            //param.pageSize = $scope.m.paginationInfo.pageSize;
	            searchService.post(param).then(function (response) {
	                _this2.$log.info(_this2.m);
	                var data = response.plain().data;
	                var list = data.data;
	                angular.forEach(list, function (value) {
	                    value.check = false;
	                });
	                // this.m.list = list;
	                _this2.m[index].data = data;
	            });
	        }
	    }, {
	        key: 'clickPrintCheck',
	        value: function clickPrintCheck(index) {
	            var _this3 = this;

	            var thisClass = this;
	            var selectedIds = [];
	            angular.forEach(this.m[index].data.data, function (value) {
	                if (value.check === true) {
	                    selectedIds.push(value.store_order_id);
	                }
	            });

	            if (selectedIds.length == 0) {
	                this.ClientService.warning("Vui lòng chọn đơn hàng.");
	                return;
	            }

	            var param = {
	                store_order_ids: selectedIds
	            };

	            var service = this.API.service('print-check', this.API.all('crm0210'));
	            service.post(param).then(function (res) {
	                if (res.data.rtnCd == true) {
	                    _this3.ClientService.success(res.data.url);
	                    thisClass.$window.open(res.data.url);
	                } else {
	                    _this3.ClientService.error('Không tải được tập tin.');
	                }
	            });
	        }
	    }, {
	        key: 'download',
	        value: function download(index) {
	            var _this4 = this;

	            var param = angular.copy(this.m[index].filter);
	            if (param.from_date) {
	                param.from_date = moment(param.from_date).format('YYYY-MM-DD');
	            }
	            if (param.to_date) {
	                param.to_date = moment(param.to_date).format('YYYY-MM-DD');
	            }
	            param.index = index;
	            param.down = 1;

	            var service = this.API.service('download', this.API.all('crm0200'));
	            service.post(param).then(function (response) {
	                _this4.$log.info(response.data);
	                _this4.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return Crm0200Controller;
	}();

	var Crm0200Component = exports.Crm0200Component = {
	    // templateUrl: './views/app/components/crm0200/crm0200.component.html',
	    templateUrl: '/views/admin.crm0200.crm0200',
	    controller: Crm0200Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 207 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm0130Controller = function () {
	    Crm0130Controller.$inject = ["$scope", "$state", "$compile", "DTOptionsBuilder", "DTColumnBuilder", "API", "$log", "UtilsService"];
	    function Crm0130Controller($scope, $state, $compile, DTOptionsBuilder, DTColumnBuilder, API, $log, UtilsService) {
	        'ngInject';

	        _classCallCheck(this, Crm0130Controller);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.UtilsService = UtilsService;
	        this.m = {
	            filter: {},
	            list: null
	        };

	        this.search();
	    }

	    _createClass(Crm0130Controller, [{
	        key: 'search',
	        value: function search() {
	            this.m.filter.orderBy = null;
	            this.m.filter.orderDirection = null;
	            this.doSearch(1);
	        }
	    }, {
	        key: 'resetFilter',
	        value: function resetFilter() {
	            /* this.m.filter = {
	                 orderBy: this.m.filter.orderBy,
	                 orderDirection: this.m.filter.orderDirection
	             };*/
	        }
	    }, {
	        key: 'sort',
	        value: function sort(orderBy) {
	            var orderOption = this.UtilsService.getOrderBy(orderBy, this.m.filter.orderBy, this.m.filter.orderDirection);
	            this.m.filter.orderBy = orderOption.orderBy;
	            this.m.filter.orderDirection = orderOption.orderDirection;

	            this.search(1);
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch(page) {
	            var _this = this;

	            // Get list product 
	            var searchService = this.API.service('search', this.API.all('crm0130'));
	            var param = angular.copy(this.m.filter);
	            param.page = page;
	            //param.pageSize = $scope.m.paginationInfo.pageSize;
	            this.$log.info('param', param);
	            searchService.post(param).then(function (response) {
	                _this.$log.info('response.plain().data.list', response.plain().data.list);
	                _this.m.list = response.plain().data.list;
	            });
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return Crm0130Controller;
	}();

	var Crm0130Component = exports.Crm0130Component = {
	    // templateUrl: './views/app/components/crm0130/crm0130.component.html',
	    templateUrl: '/views/admin.crm0130',
	    controller: Crm0130Controller,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 208 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var SupplierEditController = function () {
	    SupplierEditController.$inject = ["$stateParams", "$state", "API", "RouteService", "ClientService", "$filter", "$translate"];
	    function SupplierEditController($stateParams, $state, API, RouteService, ClientService, $filter, $translate) {
	        'ngInject';

	        var _this = this;

	        _classCallCheck(this, SupplierEditController);

	        this.$state = $state;
	        this.formSubmitted = false;
	        this.RouteService = RouteService;
	        this.ClientService = ClientService;
	        this.$translate = $translate;

	        var suppliersService = API.service('show', API.all('suppliers'));
	        var id = $stateParams.id;

	        suppliersService.one(id).get().then(function (response) {
	            _this.model = API.copy(response);
	        });
	    }

	    _createClass(SupplierEditController, [{
	        key: 'save',
	        value: function save(isValid) {
	            var _this2 = this;

	            var ClientService = this.ClientService;
	            var $translate = this.$translate;

	            this.errors = null;

	            if (isValid) {
	                var $state = this.$state;
	                var RouteService = this.RouteService;
	                this.model.put().then(function () {
	                    ClientService.success($translate.instant("MSG_I000001", { name: $translate.instant('MODEL_SUPPLIER') }));
	                    RouteService.goState($state.current);
	                }, function (response) {
	                    if (response.status === 422) {
	                        ClientService.error($translate.instant("MSG_E000001"));
	                        _this2.errors = response.data.errors;
	                    }
	                });
	            } else {
	                this.formSubmitted = true;
	            }
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return SupplierEditController;
	}();

	var SupplierEditComponent = exports.SupplierEditComponent = {
	    templateUrl: './views/app/components/supplier_edit/supplier_edit.component.html',
	    controller: SupplierEditController,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 209 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var SupplierAddController = function () {
	    SupplierAddController.$inject = ["API", "$state", "$stateParams", "$log", "RouteService", "ClientService"];
	    function SupplierAddController(API, $state, $stateParams, $log, RouteService, ClientService) {
	        'ngInject';

	        _classCallCheck(this, SupplierAddController);

	        this.$state = $state;
	        this.formSubmitted = false;
	        this.API = API;
	        this.alerts = [];
	        this.$log = $log;
	        this.RouteService = RouteService;
	        this.ClientService = ClientService;

	        if ($stateParams.alerts) {
	            this.alerts.push($stateParams.alerts);
	        }
	    }

	    _createClass(SupplierAddController, [{
	        key: 'save',
	        value: function save(isValid) {

	            var $log = this.$log;
	            var alerts = this.alerts;
	            var RouteService = this.RouteService;
	            var ClientService = this.ClientService;

	            if (isValid) {
	                var supplierService = this.API.service('suppliers');
	                var $state = this.$state;

	                supplierService.post({
	                    'name': this.name,
	                    'supplier_code': this.short_name
	                }).then(function (response) {
	                    //let alert = { type: 'success', 'title': 'Success!', msg: 'Supplier has been added.' }
	                    //RouteService.goState('app.supplierlist', { alerts: alert })
	                    ClientService.success('Supplier has been added.');
	                    RouteService.goState('app.supplierlist');
	                }, function (response) {
	                    var alert = { type: 'error', 'title': 'Error!', msg: response.data.message };
	                    RouteService.goState('app.supplierlist', { alerts: alert });
	                });
	            } else {
	                this.formSubmitted = true;
	            }
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return SupplierAddController;
	}();

	var SupplierAddComponent = exports.SupplierAddComponent = {
	    templateUrl: './views/app/components/supplier_add/supplier_add.component.html',
	    controller: SupplierAddController,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 210 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var SupplierListsController = function () {
	    SupplierListsController.$inject = ["$scope", "$state", "$stateParams", "$compile", "DTOptionsBuilder", "DTColumnBuilder", "API"];
	    function SupplierListsController($scope, $state, $stateParams, $compile, DTOptionsBuilder, DTColumnBuilder, API) {
	        'ngInject';

	        var _this = this;

	        _classCallCheck(this, SupplierListsController);

	        this.API = API;
	        this.$state = $state;
	        this.alerts = [];

	        if ($stateParams.alerts) {
	            this.alerts.push($stateParams.alerts);
	        }

	        var Suppliers = this.API.service('suppliers');

	        Suppliers.getList().then(function (response) {
	            var dataSet = response.plain();

	            _this.dtOptions = DTOptionsBuilder.newOptions().withOption('data', dataSet).withOption('createdRow', createdRow).withOption('responsive', true).withBootstrap();

	            _this.dtColumns = [DTColumnBuilder.newColumn('supplier_id').withTitle('ID'), DTColumnBuilder.newColumn('supplier_code').withTitle('Supplier Code'), DTColumnBuilder.newColumn('name').withTitle('Name'), DTColumnBuilder.newColumn(null).withTitle('Actions').notSortable().renderWith(actionsHtml)];

	            _this.displayTable = true;
	        });

	        var createdRow = function createdRow(row) {
	            $compile(angular.element(row).contents())($scope);
	        };

	        var actionsHtml = function actionsHtml(data) {
	            return '\n                <a class="btn btn-xs btn-warning" ui-sref="app.supplieredit({id: ' + data.id + '})">\n                    <i class="fa fa-edit"></i>\n                </a>\n                &nbsp\n                <button class="btn btn-xs btn-danger" ng-click="vm.delete(' + data.id + ')">\n                    <i class="fa fa-trash-o"></i>\n                </button>';
	        };
	    }

	    _createClass(SupplierListsController, [{
	        key: 'delete',
	        value: function _delete(id) {
	            var API = this.API;
	            var $state = this.$state;

	            swal({
	                title: 'Are you sure?',
	                text: 'You will not be able to recover this data!',
	                type: 'warning',
	                showCancelButton: true,
	                confirmButtonColor: '#DD6B55',
	                confirmButtonText: 'Yes, delete it!',
	                closeOnConfirm: false,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                API.one('suppliers').one('item', id).remove().then(function () {
	                    swal({
	                        title: 'Deleted!',
	                        text: 'Supplier has been deleted.',
	                        type: 'success',
	                        confirmButtonText: 'OK',
	                        closeOnConfirm: true
	                    }, function () {
	                        $state.reload();
	                    });
	                });
	            });
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return SupplierListsController;
	}();

	var SupplierListsComponent = exports.SupplierListsComponent = {
	    templateUrl: './views/app/components/supplier_lists/supplier_lists.component.html',
	    controller: SupplierListsController,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 211 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var UserProfileController = function () {
	  UserProfileController.$inject = ["$stateParams", "$state", "API"];
	  function UserProfileController($stateParams, $state, API) {
	    'ngInject';

	    var _this = this;

	    _classCallCheck(this, UserProfileController);

	    this.$state = $state;
	    this.formSubmitted = false;
	    this.alerts = [];
	    this.userRolesSelected = [];

	    if ($stateParams.alerts) {
	      this.alerts.push($stateParams.alerts);
	    }

	    var UserData = API.service('me', API.all('users'));
	    UserData.one().get().then(function (response) {
	      _this.userdata = API.copy(response);
	      _this.userdata.data.current_password = '';
	      _this.userdata.data.new_password = '';
	      _this.userdata.data.new_password_confirmation = '';
	    });
	  }

	  _createClass(UserProfileController, [{
	    key: 'save',
	    value: function save(isValid, userForm) {
	      var _this2 = this;

	      if (isValid) {
	        var $state = this.$state;

	        this.userdata.put().then(function () {
	          var alert = { type: 'success', 'title': 'Success!', msg: 'Profile has been updated.' };
	          $state.go($state.current, { alerts: alert });
	        }, function (response) {
	          var formErrors = [];

	          if (angular.isDefined(response.data.errors.message)) {
	            formErrors = response.data.errors.message[0];
	          } else {
	            formErrors = response.data.errors;
	          }

	          angular.forEach(formErrors, function (value, key) {
	            var varkey = key.replace('data.', '');
	            userForm[varkey].$invalid = true;
	            userForm[varkey].customError = value[0];
	          });

	          _this2.formSubmitted = true;
	        });
	      } else {
	        this.formSubmitted = true;
	      }
	    }
	  }, {
	    key: '$onInit',
	    value: function $onInit() {}
	  }]);

	  return UserProfileController;
	}();

	var UserProfileComponent = exports.UserProfileComponent = {
	  templateUrl: './views/app/components/user-profile/user-profile.component.html',
	  controller: UserProfileController,
	  controllerAs: 'vm',
	  bindings: {}
	};

/***/ }),
/* 212 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var UserVerificationController = function () {
	  UserVerificationController.$inject = ["$stateParams"];
	  function UserVerificationController($stateParams) {
	    'ngInject';

	    _classCallCheck(this, UserVerificationController);

	    this.alerts = [];

	    if ($stateParams.status === 'success') {
	      this.alerts.push({ type: 'success', 'title': 'Success!', msg: 'Email Verification Success.' });
	    } else {
	      this.alerts.push({ type: 'danger', 'title': 'Error:', msg: 'Email verification failed.' });
	    }
	  }

	  _createClass(UserVerificationController, [{
	    key: '$onInit',
	    value: function $onInit() {}
	  }]);

	  return UserVerificationController;
	}();

	var UserVerificationComponent = exports.UserVerificationComponent = {
	  templateUrl: './views/app/components/user-verification/user-verification.component.html',
	  controller: UserVerificationController,
	  controllerAs: 'vm',
	  bindings: {}
	};

/***/ }),
/* 213 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var UserEditController = function () {
	    UserEditController.$inject = ["$stateParams", "$state", "API", "$log"];
	    function UserEditController($stateParams, $state, API, $log) {
	        'ngInject';

	        var _this = this;

	        _classCallCheck(this, UserEditController);

	        this.$state = $state;
	        this.formSubmitted = false;
	        this.alerts = [];
	        this.$log = $log;
	        this.userRolesSelected = [];

	        if ($stateParams.alerts) {
	            this.alerts.push($stateParams.alerts);
	        }

	        var userId = $stateParams.userId;

	        var Roles = API.service('roles', API.all('users'));
	        Roles.getList().then(function (response) {
	            var systemRoles = [];

	            var roleResponse = response.plain();
	            _this.$log.info('check', response.plain());
	            angular.forEach(roleResponse, function (value) {
	                systemRoles.push({ id: value.id, name: value.name });
	            });

	            _this.systemRoles = systemRoles;
	        });

	        var Branches = API.service('branches', API.all('users'));
	        Branches.getList().then(function (response) {
	            var systemBranches = [];
	            var branchResponse = response.plain();
	            _this.$log.info('check', response.plain());
	            angular.forEach(branchResponse, function (value) {
	                systemBranches.push({ id: value.branch_id, name: value.branch_name });
	            });

	            _this.systemBranches = systemBranches;
	        });

	        var UserData = API.service('show', API.all('users'));
	        UserData.one(userId).get().then(function (response) {
	            var userRole = [];
	            var userResponse = response.plain();

	            angular.forEach(userResponse.data.role, function (value) {
	                userRole.push(value.id);
	            });
	            response.data.branch = userResponse.data.branch_id;
	            response.data.role = userRole;
	            response.data.email_verified = response.data.email_verified === '1' ? 1 : 0;
	            _this.usereditdata = API.copy(response);
	        });
	    }

	    _createClass(UserEditController, [{
	        key: 'save',
	        value: function save(isValid) {
	            if (isValid) {
	                var $state = this.$state;
	                this.usereditdata.put().then(function () {
	                    var alert = { type: 'success', 'title': 'Success!', msg: 'User has been updated.' };
	                    $state.go($state.current, { alerts: alert });
	                }, function (response) {
	                    var alert = { type: 'error', 'title': 'Error!', msg: response.data.message };
	                    $state.go($state.current, { alerts: alert });
	                });
	            } else {
	                this.formSubmitted = true;
	            }
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return UserEditController;
	}();

	var UserEditComponent = exports.UserEditComponent = {
	    templateUrl: './views/app/components/user-edit/user-edit.component.html',
	    controller: UserEditController,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 214 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var UserPermissionsEditController = function () {
	  UserPermissionsEditController.$inject = ["$stateParams", "$state", "API"];
	  function UserPermissionsEditController($stateParams, $state, API) {
	    'ngInject';

	    var _this = this;

	    _classCallCheck(this, UserPermissionsEditController);

	    this.$state = $state;
	    this.formSubmitted = false;
	    this.alerts = [];

	    if ($stateParams.alerts) {
	      this.alerts.push($stateParams.alerts);
	    }

	    var permissionId = $stateParams.permissionId;
	    var Permission = API.service('permissions-show', API.all('users'));
	    Permission.one(permissionId).get().then(function (response) {
	      _this.permission = API.copy(response);
	    });
	  }

	  _createClass(UserPermissionsEditController, [{
	    key: 'save',
	    value: function save(isValid) {
	      if (isValid) {
	        var $state = this.$state;
	        this.permission.put().then(function () {
	          var alert = { type: 'success', 'title': 'Success!', msg: 'Permission has been updated.' };
	          $state.go($state.current, { alerts: alert });
	        }, function (response) {
	          var alert = { type: 'error', 'title': 'Error!', msg: response.data.message };
	          $state.go($state.current, { alerts: alert });
	        });
	      } else {
	        this.formSubmitted = true;
	      }
	    }
	  }, {
	    key: '$onInit',
	    value: function $onInit() {}
	  }]);

	  return UserPermissionsEditController;
	}();

	var UserPermissionsEditComponent = exports.UserPermissionsEditComponent = {
	  templateUrl: './views/app/components/user-permissions-edit/user-permissions-edit.component.html',
	  controller: UserPermissionsEditController,
	  controllerAs: 'vm',
	  bindings: {}
	};

/***/ }),
/* 215 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var UserPermissionsAddController = function () {
	  UserPermissionsAddController.$inject = ["API", "$state", "$stateParams", "$log"];
	  function UserPermissionsAddController(API, $state, $stateParams, $log) {
	    'ngInject';

	    _classCallCheck(this, UserPermissionsAddController);

	    this.$state = $state;
	    this.formSubmitted = false;
	    this.API = API;
	    this.alerts = [];
	    this.$log = $log;

	    $log.debug('UserPermissionsAddController');
	    if ($stateParams.alerts) {
	      $log.debug('show alert');
	      this.alerts.push($stateParams.alerts);
	    }
	  }

	  _createClass(UserPermissionsAddController, [{
	    key: 'save',
	    value: function save(isValid) {
	      this.$state.go(this.$state.current, {}, { alerts: 'test' });
	      if (isValid) {
	        var Permissions = this.API.service('permissions', this.API.all('users'));
	        var $state = this.$state;
	        var $log = this.$log;

	        Permissions.post({
	          'name': this.name,
	          'slug': this.slug,
	          'description': this.description
	        }).then(function () {
	          $log.debug('OK');
	          var alert = { type: 'success', 'title': 'Success!', msg: 'Permission has been added.' };
	          $state.go($state.current, { alerts: alert });
	        }, function (response) {
	          var alert = { type: 'error', 'title': 'Error!', msg: response.data.message };
	          $state.go($state.current, { alerts: alert });
	        });
	      } else {
	        this.formSubmitted = true;
	      }
	    }
	  }, {
	    key: '$onInit',
	    value: function $onInit() {}
	  }]);

	  return UserPermissionsAddController;
	}();

	var UserPermissionsAddComponent = exports.UserPermissionsAddComponent = {
	  templateUrl: './views/app/components/user-permissions-add/user-permissions-add.component.html',
	  controller: UserPermissionsAddController,
	  controllerAs: 'vm',
	  bindings: {}
	};

/***/ }),
/* 216 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var UserPermissionsController = function () {
	    UserPermissionsController.$inject = ["$scope", "$log", "$state", "$compile", "DTOptionsBuilder", "DTColumnBuilder", "API"];
	    function UserPermissionsController($scope, $log, $state, $compile, DTOptionsBuilder, DTColumnBuilder, API) {
	        'ngInject';

	        var _this = this;

	        _classCallCheck(this, UserPermissionsController);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        var Permissions = this.API.service('permissions', this.API.all('users'));

	        Permissions.getList().then(function (response) {
	            var dataSet = response.plain();
	            _this.$log.info('check data res: ', dataSet);
	            _this.dtOptions = DTOptionsBuilder.newOptions().withOption('data', dataSet).withOption('createdRow', createdRow).withOption('responsive', true).withBootstrap();

	            _this.dtColumns = [DTColumnBuilder.newColumn('id').withTitle('ID'), DTColumnBuilder.newColumn('name').withTitle('Name'), DTColumnBuilder.newColumn('slug').withTitle('Slug'), DTColumnBuilder.newColumn('description').withTitle('description'), DTColumnBuilder.newColumn(null).withTitle('Actions').notSortable().renderWith(actionsHtml)];

	            _this.displayTable = true;
	        });

	        var createdRow = function createdRow(row) {
	            $compile(angular.element(row).contents())($scope);
	        };

	        var actionsHtml = function actionsHtml(data) {
	            return '\n                <a class="btn btn-xs btn-warning" ui-sref="app.userpermissionsedit({permissionId: ' + data.id + '})">\n                    <i class="fa fa-edit"></i>\n                </a>\n                &nbsp\n                <button class="btn btn-xs btn-danger" ng-click="vm.delete(' + data.id + ')">\n                    <i class="fa fa-trash-o"></i>\n                </button>';
	        };
	    }

	    _createClass(UserPermissionsController, [{
	        key: 'delete',
	        value: function _delete(permissionId) {
	            var API = this.API;
	            var $state = this.$state;

	            swal({
	                title: 'Are you sure?',
	                text: 'You will not be able to recover this data!',
	                type: 'warning',
	                showCancelButton: true,
	                confirmButtonColor: '#DD6B55',
	                confirmButtonText: 'Yes, delete it!',
	                closeOnConfirm: false,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                API.one('users').one('permissions', permissionId).remove().then(function () {
	                    swal({
	                        title: 'Deleted!',
	                        text: 'User Permission has been deleted.',
	                        type: 'success',
	                        confirmButtonText: 'OK',
	                        closeOnConfirm: true
	                    }, function () {
	                        $state.reload();
	                    });
	                });
	            });
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return UserPermissionsController;
	}();

	var UserPermissionsComponent = exports.UserPermissionsComponent = {
	    templateUrl: './views/app/components/user-permissions/user-permissions.component.html',
	    controller: UserPermissionsController,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 217 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var UserRolesEditController = function () {
	    UserRolesEditController.$inject = ["$stateParams", "$state", "API"];
	    function UserRolesEditController($stateParams, $state, API) {
	        'ngInject';

	        var _this = this;

	        _classCallCheck(this, UserRolesEditController);

	        this.$state = $state;
	        this.formSubmitted = false;
	        this.alerts = [];

	        if ($stateParams.alerts) {
	            this.alerts.push($stateParams.alerts);
	        }

	        var Permissions = API.service('permissions', API.all('users'));

	        Permissions.getList().then(function (response) {
	            var permissionList = [];
	            var permissionResponse = response.plain();

	            angular.forEach(permissionResponse, function (value) {
	                permissionList.push({ id: value.id, name: value.name, description: value.description });
	            });

	            _this.systemPermissions = permissionList;
	        });

	        var roleId = $stateParams.roleId;
	        var Role = API.service('roles-show', API.all('users'));
	        Role.one(roleId).get().then(function (response) {
	            var rolePermissions = [];

	            angular.forEach(response.data.permissions, function (value) {
	                rolePermissions.push(value.id);
	            });

	            response.data.permissions = rolePermissions;

	            _this.role = API.copy(response);
	        });
	    }

	    _createClass(UserRolesEditController, [{
	        key: 'save',
	        value: function save(isValid) {
	            if (isValid) {
	                var $state = this.$state;
	                this.role.put().then(function () {
	                    var alert = { type: 'success', 'title': 'Success!', msg: 'Role has been updated.' };
	                    $state.go($state.current, { alerts: alert });
	                }, function (response) {
	                    var alert = { type: 'error', 'title': 'Error!', msg: response.data.message };
	                    $state.go($state.current, { alerts: alert });
	                });
	            } else {
	                this.formSubmitted = true;
	            }
	        }
	    }, {
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return UserRolesEditController;
	}();

	var UserRolesEditComponent = exports.UserRolesEditComponent = {
	    templateUrl: './views/app/components/user-roles-edit/user-roles-edit.component.html',
	    controller: UserRolesEditController,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 218 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var UserRolesAddController = function () {
	  UserRolesAddController.$inject = ["API", "$state", "$stateParams"];
	  function UserRolesAddController(API, $state, $stateParams) {
	    'ngInject';

	    _classCallCheck(this, UserRolesAddController);

	    this.$state = $state;
	    this.formSubmitted = false;
	    this.API = API;
	    this.alerts = [];

	    if ($stateParams.alerts) {
	      this.alerts.push($stateParams.alerts);
	    }
	  }

	  _createClass(UserRolesAddController, [{
	    key: 'save',
	    value: function save(isValid) {
	      this.$state.go(this.$state.current, {}, { alerts: 'test' });
	      if (isValid) {
	        var Roles = this.API.service('roles', this.API.all('users'));
	        var $state = this.$state;

	        Roles.post({
	          'role': this.role,
	          'slug': this.slug,
	          'description': this.description
	        }).then(function () {
	          var alert = { type: 'success', 'title': 'Success!', msg: 'Role has been added.' };
	          $state.go($state.current, { alerts: alert });
	        }, function (response) {
	          var alert = { type: 'error', 'title': 'Error!', msg: response.data.message };
	          $state.go($state.current, { alerts: alert });
	        });
	      } else {
	        this.formSubmitted = true;
	      }
	    }
	  }, {
	    key: '$onInit',
	    value: function $onInit() {}
	  }]);

	  return UserRolesAddController;
	}();

	var UserRolesAddComponent = exports.UserRolesAddComponent = {
	  templateUrl: './views/app/components/user-roles-add/user-roles-add.component.html',
	  controller: UserRolesAddController,
	  controllerAs: 'vm',
	  bindings: {}
	};

/***/ }),
/* 219 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var UserRolesController = function () {
	  UserRolesController.$inject = ["$scope", "$state", "$compile", "DTOptionsBuilder", "DTColumnBuilder", "API"];
	  function UserRolesController($scope, $state, $compile, DTOptionsBuilder, DTColumnBuilder, API) {
	    'ngInject';

	    var _this = this;

	    _classCallCheck(this, UserRolesController);

	    this.API = API;
	    this.$state = $state;

	    var Roles = this.API.service('roles', this.API.all('users'));

	    Roles.getList().then(function (response) {
	      var dataSet = response.plain();

	      _this.dtOptions = DTOptionsBuilder.newOptions().withOption('data', dataSet).withOption('createdRow', createdRow).withOption('responsive', true).withBootstrap();

	      _this.dtColumns = [DTColumnBuilder.newColumn('id').withTitle('ID'), DTColumnBuilder.newColumn('name').withTitle('Name'), DTColumnBuilder.newColumn('slug').withTitle('Slug'), DTColumnBuilder.newColumn(null).withTitle('Actions').notSortable().renderWith(actionsHtml)];

	      _this.displayTable = true;
	    });

	    var createdRow = function createdRow(row) {
	      $compile(angular.element(row).contents())($scope);
	    };

	    var actionsHtml = function actionsHtml(data) {
	      return '\n                <a class="btn btn-xs btn-warning" ui-sref="app.userrolesedit({roleId: ' + data.id + '})">\n                    <i class="fa fa-edit"></i>\n                </a>\n                &nbsp\n                <button class="btn btn-xs btn-danger" ng-click="vm.delete(' + data.id + ')">\n                    <i class="fa fa-trash-o"></i>\n                </button>';
	    };
	  }

	  _createClass(UserRolesController, [{
	    key: 'delete',
	    value: function _delete(roleId) {
	      var API = this.API;
	      var $state = this.$state;

	      swal({
	        title: 'Are you sure?',
	        text: 'You will not be able to recover this data!',
	        type: 'warning',
	        showCancelButton: true,
	        confirmButtonColor: '#DD6B55',
	        confirmButtonText: 'Yes, delete it!',
	        closeOnConfirm: false,
	        showLoaderOnConfirm: true,
	        html: false
	      }, function () {
	        API.one('users').one('roles', roleId).remove().then(function () {
	          swal({
	            title: 'Deleted!',
	            text: 'User Role has been deleted.',
	            type: 'success',
	            confirmButtonText: 'OK',
	            closeOnConfirm: true
	          }, function () {
	            $state.reload();
	          });
	        });
	      });
	    }
	  }, {
	    key: '$onInit',
	    value: function $onInit() {}
	  }]);

	  return UserRolesController;
	}();

	var UserRolesComponent = exports.UserRolesComponent = {
	  templateUrl: './views/app/components/user-roles/user-roles.component.html',
	  controller: UserRolesController,
	  controllerAs: 'vm',
	  bindings: {}
	};

/***/ }),
/* 220 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var UserListsController = function () {
	    UserListsController.$inject = ["$scope", "$state", "$compile", "DTOptionsBuilder", "DTColumnBuilder", "API", "$log"];
	    function UserListsController($scope, $state, $compile, DTOptionsBuilder, DTColumnBuilder, API, $log) {
	        'ngInject';

	        _classCallCheck(this, UserListsController);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.DTOptionsBuilder = DTOptionsBuilder;
	        this.DTColumnBuilder = DTColumnBuilder;
	        this.$compile = $compile;
	        this.$scope = $scope;
	    }

	    _createClass(UserListsController, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.loadData();
	        }
	    }, {
	        key: 'loadData',
	        value: function loadData() {
	            var _this = this;

	            var Users = this.API.service('users');
	            var DTOptionsBuilder = this.DTOptionsBuilder;
	            var DTColumnBuilder = this.DTColumnBuilder;

	            Users.getList().then(function (response) {
	                var dataSet = response.plain();
	                _this.dtOptions = DTOptionsBuilder.newOptions().withOption('data', dataSet).withOption('createdRow', createdRow).withOption('responsive', true).withBootstrap();

	                _this.dtColumns = [DTColumnBuilder.newColumn('id').withTitle('ID'), DTColumnBuilder.newColumn('name').withTitle('Name'), DTColumnBuilder.newColumn('email').withTitle('Email'), DTColumnBuilder.newColumn('role_name').withTitle('Role'), DTColumnBuilder.newColumn('branch_name').withTitle('Branch'),
	                // DTColumnBuilder.newColumn('employee').withTitle('Employee'),
	                DTColumnBuilder.newColumn(null).withTitle('Employee').notSortable().renderWith(function (data) {
	                    var html = '';
	                    if (data.employee == 'TRUE') {
	                        html = '<i class="fas fa-check text-success"></i>';
	                    } else {
	                        html = '<i class="fas fa-times text-warning"></i>';
	                    }

	                    return html;
	                }), DTColumnBuilder.newColumn(null).withTitle('Actions').notSortable().renderWith(actionsHtml)];

	                _this.displayTable = true;
	            });

	            var createdRow = function createdRow(row) {
	                _this.$compile(angular.element(row).contents())(_this.$scope);
	            };

	            var actionsHtml = function actionsHtml(data) {

	                var htmlAddEmployee = "";

	                if (data.employee == 'FALSE') {
	                    htmlAddEmployee = '\n                    <button class="btn btn-xs btn-primary" ng-click="vm.addEmployee(' + data.id + ')">\n                        <i class="fa fa-plus"></i>\n                    </button>\n                ';
	                }

	                return '\n                <a class="btn btn-xs btn-warning" ui-sref="app.useredit({userId: ' + data.id + '})">\n                    <i class="fa fa-edit"></i>\n                </a>\n                &nbsp;\n                <button class="btn btn-xs btn-danger" ng-click="vm.delete(' + data.id + ')">\n                    <i class="fa fa-trash-o"></i>\n                </button>\n                &nbsp;\n                <button class="btn btn-xs btn-warning" ng-click="vm.resetPass(' + data.id + ')">\n                    <i class="fa fa-key"></i>\n                </button>\n                &nbsp;\n                ' + htmlAddEmployee + '\n            ';
	            };
	        }
	    }, {
	        key: 'delete',
	        value: function _delete(userId) {
	            var API = this.API;
	            var $state = this.$state;

	            swal({
	                title: 'Are you sure?',
	                text: 'You will not be able to recover this data!',
	                type: 'warning',
	                showCancelButton: true,
	                confirmButtonColor: '#DD6B55',
	                confirmButtonText: 'Yes, delete it!',
	                closeOnConfirm: false,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                API.one('users').one('user', userId).remove().then(function () {
	                    swal({
	                        title: 'Deleted!',
	                        text: 'User Permission has been deleted.',
	                        type: 'success',
	                        confirmButtonText: 'OK',
	                        closeOnConfirm: true
	                    }, function () {
	                        $state.reload();
	                    });
	                });
	            });
	        }
	    }, {
	        key: 'resetPass',
	        value: function resetPass(userId) {
	            var API = this.API;

	            swal({
	                title: 'Are you sure?',
	                text: 'Reset password for this user!',
	                type: 'warning',
	                showCancelButton: true,
	                confirmButtonColor: '#DD6B55',
	                confirmButtonText: 'Yes, reset it!',
	                closeOnConfirm: false,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var searchService = API.service('reset-pass', API.all('users'));
	                var param = {
	                    id: userId
	                    //param.pageSize = $scope.m.paginationInfo.pageSize;

	                };searchService.post(param).then(function (response) {
	                    swal({
	                        title: 'Reset!',
	                        text: 'User Password has been reset.',
	                        type: 'success',
	                        confirmButtonText: 'OK',
	                        closeOnConfirm: true
	                    }, function () {
	                        //$state.reload()
	                    });
	                });
	            });
	        }
	    }, {
	        key: 'addEmployee',
	        value: function addEmployee(userId) {
	            var API = this.API;
	            var self = this;

	            swal({
	                title: 'Are you sure?',
	                text: 'Create employee for this user!',
	                type: 'warning',
	                showCancelButton: true,
	                confirmButtonColor: '#204d74',
	                confirmButtonText: 'Yes, create it!',
	                closeOnConfirm: false,
	                showLoaderOnConfirm: true,
	                html: false
	            }, function () {
	                var searchService = API.service('create-employee', API.all('users'));
	                var param = {
	                    id: userId
	                    //param.pageSize = $scope.m.paginationInfo.pageSize;

	                };searchService.post(param).then(function (response) {
	                    swal({
	                        title: 'Create!',
	                        text: 'Employee has been created.',
	                        type: 'success',
	                        confirmButtonText: 'OK',
	                        closeOnConfirm: true
	                    }, function () {
	                        self.$state.reload();
	                        // this.loadData();
	                    });
	                });
	            });
	        }
	    }]);

	    return UserListsController;
	}();

	var UserListsComponent = exports.UserListsComponent = {
	    templateUrl: './views/app/components/user-lists/user-lists.component.html',
	    controller: UserListsController,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 221 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var DashboardController = function () {
	    DashboardController.$inject = ["$scope", "$state", "API", "$log", "$stateParams", "RouteService", "ClientService", "AclService", "ChartService"];
	    function DashboardController($scope, $state, API, $log, $stateParams, RouteService, ClientService, AclService, ChartService) {
	        'ngInject';

	        _classCallCheck(this, DashboardController);

	        this.API = API;
	        this.$state = $state;
	        this.$log = $log;
	        this.ClientService = ClientService;
	        this.$scope = $scope;
	        this.RouteService = RouteService;
	        this.can = AclService.can;
	        this.ChartService = ChartService;
	        this.$stateParams = $stateParams;

	        this.m = {};
	        this.m.is_carton = false;
	        this.m.activeFlag = 10;
	        // this.init();
	    }

	    _createClass(DashboardController, [{
	        key: '$onInit',
	        value: function $onInit() {
	            this.RouteService.goState('app.crm0300');
	        }

	        // init() {
	        //     let previousTab = sessionStorage.dashboard;

	        //     this.chartStatisticOrder = null;
	        //     this.chartStatisticDelivery = null;

	        //     let param = {};

	        //     let service = this.API.service('init-data', this.API.all('das0100'));
	        //     service.post(param)
	        //         .then((response) => {
	        //             this.m = response.data;
	        //             this.m.activeFlag = 10;
	        //             if (!angular.isUndefined(previousTab)) {
	        //                 previousTab = angular.fromJson(previousTab);
	        //                 this.m.activeFlag = previousTab.tab;
	        //             }

	        //             angular.forEach(this.m.needToPay, function(item) {
	        //                 item.hide = false;
	        //             });

	        //             angular.forEach(this.m.warehouse, function(item) {
	        //                 item.hide = false;
	        //             });

	        //             // this.createChartStatisticOrder(); 
	        //             this.createChartStatisticDelivery();
	        //             this.createChartStatisticSpecificSalesman();
	        //             this.createChartStatisticDeliveryQuarter();
	        //             this.calcWarehousePrice();
	        //             this.calcWarehouseVol();
	        //         });
	        // }

	    }, {
	        key: 'doSearchReport',
	        value: function doSearchReport() {
	            var _this = this;

	            var param = angular.copy(this.m.filter);

	            var service = this.API.service('search-report', this.API.all('das0100'));
	            service.post(param).then(function (response) {
	                _this.m.so1Turnover = response.data.so1Turnover;
	                _this.m.so2Turnover = response.data.so2Turnover;
	                _this.m.so3Turnover = response.data.so3Turnover;
	                _this.m.so4Turnover = response.data.so4Turnover;
	                _this.m.statisticDelivery = response.data.statisticDelivery;
	                _this.m.activeFlag = 10;

	                // this.createChartStatisticOrder(); 
	                _this.createChartStatisticDelivery();
	                _this.createChartStatisticSpecificSalesman();
	                _this.createChartStatisticDeliveryQuarter();
	            });
	        }
	    }, {
	        key: 'selectPayment',
	        value: function selectPayment() {
	            var order_type_pay = this.m.filter.order_type_pay;
	            var $log = this.$log;
	            $log.info('order_type_payr', order_type_pay);
	            angular.forEach(this.m.needToPay, function (item) {
	                item.hide = false;
	                if (order_type_pay == 1) {
	                    if (item.store_id != 2125 && item.store_id != 1946 && item.store_id != 1969) {
	                        item.hide = true;
	                    }
	                } else if (order_type_pay == 2) {
	                    if (item.store_id == 2125 || item.store_id == 1946 || item.store_id == 1969) {
	                        item.hide = true;
	                    }
	                }
	            });
	        }
	    }, {
	        key: 'recalculate',
	        value: function recalculate() {
	            var $log = this.$log;
	            var supplier = this.m.supplier_id_wh;
	            $log.info('supplier', supplier);
	            angular.forEach(this.m.warehouse, function (item) {
	                item.hide = false;
	                if (supplier != null && item.supplier_id != supplier) {
	                    item.hide = true;
	                }
	            });
	            this.calcWarehousePrice();
	            this.calcWarehouseVol();
	        }
	    }, {
	        key: 'calcWarehousePrice',
	        value: function calcWarehousePrice() {
	            var sum = 0;
	            var sum_list = {};
	            var $log = this.$log;
	            var that = this;
	            angular.forEach(that.m.warehouseList, function (item) {
	                sum_list[item.warehouse_id] = 0;
	            });
	            // let sum_1 = 0;
	            // let sum_2 = 0;
	            // let sum_3 = 0;
	            // let sum_4 = 0;
	            // let sum_5 = 0;
	            if (that.m.warehouse != null) {
	                angular.forEach(that.m.warehouse, function (item) {
	                    //this.m.count.warehouse++;
	                    if (item.hide != true) {
	                        if (item.amount > 0) {
	                            sum += parseInt(item.selling_price) * parseInt(item.amount);
	                        }
	                        angular.forEach(that.m.warehouseList, function (item_sub) {
	                            if (item[item_sub.warehouse_label] > 0) {
	                                sum_list[item_sub.warehouse_id] += parseInt(item.selling_price) * parseInt(item[item_sub.warehouse_label]);
	                            }
	                        });

	                        // if (item.amount_2 > 0) {
	                        //     sum_2 += parseInt(item.selling_price) * parseInt(item.amount_2);
	                        // }
	                        // if (item.amount_3 > 0) {
	                        //     sum_3 += parseInt(item.selling_price) * parseInt(item.amount_3);
	                        // }
	                        // if (item.amount_4 > 0) {
	                        //     sum_4 += parseInt(item.selling_price) * parseInt(item.amount_4);
	                        // }
	                        // if (item.amount_5 > 0) {
	                        //     sum_5 += parseInt(item.selling_price) * parseInt(item.amount_5);
	                        // }
	                    }
	                });
	            }
	            $log.info('sum_list', sum_list);
	            this.m.sumWarehouse = sum;
	            this.m.sumWarehouse_no = sum_list;
	            // this.m.sumWarehouse_2 = sum_2;
	            // this.m.sumWarehouse_3 = sum_3;
	            // this.m.sumWarehouse_4 = sum_4;
	            // this.m.sumWarehouse_5 = sum_5;
	        }
	    }, {
	        key: 'calcWarehouseVol',
	        value: function calcWarehouseVol() {
	            var sum = 0;
	            var sum_list_vol = {};
	            var sum_list_cart = {};
	            var $log = this.$log;
	            var that = this;
	            angular.forEach(that.m.warehouseList, function (item) {
	                sum_list_vol[item.warehouse_id] = 0;
	                sum_list_cart[item.warehouse_id] = 0;
	            });
	            // let sum_1 = 0;
	            // let sum_2 = 0;
	            // let sum_3 = 0;
	            // let sum_4 = 0;
	            // let sum_5 = 0;
	            var sum_cart = 0;
	            // let sum_cart_1 = 0;
	            // let sum_cart_2 = 0;
	            // let sum_cart_3 = 0;
	            // let sum_cart_4 = 0;
	            // let sum_cart_5 = 0;
	            //this.m.count.warehouse = 0;
	            if (that.m.warehouse != null) {
	                angular.forEach(that.m.warehouse, function (item) {
	                    //this.m.count.warehouse++;
	                    if (item.hide != true) {
	                        if (item.amount > 0) {
	                            sum += parseFloat(item.volume) * parseFloat(item.amount) / parseFloat(item.standard_packing);
	                            sum_cart += parseFloat(item.amount) / parseFloat(item.standard_packing);
	                        }

	                        angular.forEach(that.m.warehouseList, function (item_sub) {
	                            if (item[item_sub.warehouse_label] > 0) {
	                                sum_list_vol[item_sub.warehouse_id] += parseFloat(item.volume) * parseInt(item[item_sub.warehouse_label]) / parseFloat(item.standard_packing);
	                                sum_list_cart[item_sub.warehouse_id] += parseFloat(item[item_sub.warehouse_label]) / parseFloat(item.standard_packing);
	                            }
	                        });
	                        // if (item.amount_2 > 0) {
	                        //     sum_2 += parseFloat(item.volume) * parseFloat(item.amount_2)/parseFloat(item.standard_packing);
	                        //     sum_cart_2 +=  parseFloat(item.amount_2)/parseFloat(item.standard_packing);
	                        // }
	                        // if (item.amount_3 > 0) {
	                        //     sum_3 += parseFloat(item.volume) * parseFloat(item.amount_3)/parseFloat(item.standard_packing);
	                        //     sum_cart_3 +=  parseFloat(item.amount_3)/parseFloat(item.standard_packing);
	                        // }
	                        // if (item.amount_4 > 0) {
	                        //     sum_4 += parseFloat(item.volume) * parseFloat(item.amount_4)/parseFloat(item.standard_packing);
	                        //     sum_cart_4 +=  parseFloat(item.amount_4)/parseFloat(item.standard_packing);
	                        // }
	                        // if (item.amount_5 > 0) {
	                        //     sum_5 += parseFloat(item.volume) * parseFloat(item.amount_5)/parseFloat(item.standard_packing);
	                        //     sum_cart_5 +=  parseFloat(item.amount_5)/parseFloat(item.standard_packing);
	                        // }
	                    }
	                });
	            }

	            angular.forEach(that.m.warehouseList, function (item) {
	                sum_list_vol[item.warehouse_id] = parseFloat(sum_list_vol[item.warehouse_id]);
	                sum_list_cart[item.warehouse_id] = parseFloat(sum_list_cart[item.warehouse_id]);
	            });

	            that.m.sumWarehouseVol = parseFloat(sum);
	            that.m.sumWarehouseVol_no = sum_list_vol;
	            // this.m.sumWarehouseVol_2 = parseFloat(sum_2);
	            // this.m.sumWarehouseVol_3 = parseFloat(sum_3);
	            // this.m.sumWarehouseVol_4 = parseFloat(sum_4);
	            // this.m.sumWarehouseVol_5 = parseFloat(sum_5);
	            that.m.sumWarehouseCart = parseFloat(sum_cart);
	            that.m.sumWarehouseCart_no = sum_list_cart;
	            // this.m.sumWarehouseCart_2 = parseFloat(sum_cart_2);
	            // this.m.sumWarehouseCart_3 = parseFloat(sum_cart_3);
	            // this.m.sumWarehouseCart_4 = parseFloat(sum_cart_4);
	            // this.m.sumWarehouseCart_5 = parseFloat(sum_cart_5);
	        }
	    }, {
	        key: 'chooseTab',
	        value: function chooseTab(tab) {
	            this.m.activeFlag = tab;
	            var param1 = {};
	            param1.tab = tab;
	            sessionStorage.dashboard = angular.toJson(param1);
	        }
	    }, {
	        key: 'createChartStatisticSpecificSalesman',
	        value: function createChartStatisticSpecificSalesman() {
	            this.chartStatisticSO1 = this.createChartStatisticSalesman(this.m.so1Turnover, 1);
	            this.chartStatisticSO2 = this.createChartStatisticSalesman(this.m.so2Turnover, 2);
	            this.chartStatisticSO3 = this.createChartStatisticSalesman(this.m.so3Turnover, 3);
	            this.chartStatisticSO4 = this.createChartStatisticSalesman(this.m.so4Turnover, 4);
	            this.chartCompareSale = this.createChartStatisticCompareSalesman();
	        }
	    }, {
	        key: 'createChartStatisticCompareSalesman',
	        value: function createChartStatisticCompareSalesman() {
	            var series = ['SM1', 'SM2', 'SM3', 'SM4'];
	            var colors = ['#BF465C', '#46BFBD', '#4D5360'];
	            var labels = [];

	            var line1 = [];
	            var line2 = [];
	            var line3 = [];
	            var line4 = [];

	            angular.forEach(this.m.so1Turnover, function (item) {
	                line1.push(item.total);
	            });
	            line1[0] = 227205000;
	            angular.forEach(this.m.so2Turnover, function (item) {
	                line2.push(item.total);
	            });
	            line2[0] = 218082000;
	            angular.forEach(this.m.so3Turnover, function (item) {
	                line3.push(item.total);
	            });
	            line3[0] = 75253000;
	            line3[1] = line3[1] + 11857500;
	            angular.forEach(this.m.so4Turnover, function (item) {
	                line4.push(item.total);
	            });
	            line4[0] = 75253000;
	            var line1_q = [];
	            var line2_q = [];
	            var line3_q = [];
	            var line4_q = [];
	            var labels_q = ['Q1', 'Q2', 'Q3', 'Q4'];

	            var i = 0;
	            while (i < 12) {
	                line4_q.push(parseInt(line4[i]) + parseInt(line4[i + 1]) + parseInt(line4[i + 2]));
	                line2_q.push(parseInt(line2[i]) + parseInt(line2[i + 1]) + parseInt(line2[i + 2]));
	                line3_q.push(parseInt(line3[i]) + parseInt(line3[i + 1]) + parseInt(line3[i + 2]));
	                line1_q.push(parseInt(line1[i]) + parseInt(line1[i + 1]) + parseInt(line1[i + 2]));
	                i = i + 3;
	            }
	            var labels = labels_q;
	            var data = [line1_q, line2_q, line3_q, line4_q];

	            return this.ChartService.get_angular_chart(series, colors, data, labels);
	        }
	    }, {
	        key: 'createChartStatisticSalesman',
	        value: function createChartStatisticSalesman(saleData, noSale) {
	            var series = ['Target', 'Sales', '50% case'];
	            var colors = ['#BF465C', '#46BFBD', '#4D5360'];
	            var labels = [];

	            var line2 = [];
	            var line3 = [];
	            // var line1_q = [1500000000,1500000000,1500000000,1500000000];
	            // var line1_q = [1500000000,1950000000,2025000000,2025000000];
	            var line1_q = [1890000000, 1890000000, 1890000000, 1890000000];
	            var line2_q = [];
	            var line3_q = [];
	            var labels_q = ['Q1', 'Q2', 'Q3', 'Q4'];

	            angular.forEach(saleData, function (item) {
	                labels.push(item.yearmonth);
	                line2.push(item.total);
	                line3.push(item.total_special);
	            });

	            // if (noSale == 1){
	            //     line2[0] = 227205000;
	            //     line3[0] = 107156000;
	            // } else if (noSale == 2){
	            //     line2[0] = 227205000;
	            //     line3[0] = 107156000;
	            // } else if (noSale == 3){
	            //     line2[0] = 218082000;
	            //     line3[0] = 106530000;
	            // } else {
	            //     line2[0]= 75253000;
	            //     line2[1] = line2[1] + 11857500;
	            //     line3[1] = line2[1] - 11857500;
	            // }

	            var d = new Date();
	            while (line2.length < 12) {
	                line2.push(0);
	                line3.push(0);
	                labels.push(d.getFullYear() + '-' + line2.length);
	            }
	            // line2[0] = line2[0] - 294924000;
	            var i = 0;
	            while (i < 12) {
	                line2_q.push(parseInt(line2[i]) + parseInt(line2[i + 1]) + parseInt(line2[i + 2]));
	                line3_q.push(parseInt(line3[i]) + parseInt(line3[i + 1]) + parseInt(line3[i + 2]));

	                i = i + 3;
	            }
	            var labels = labels_q;
	            var data = [line1_q, line2_q, line3_q];

	            return this.ChartService.get_angular_chart(series, colors, data, labels);
	        }
	    }, {
	        key: 'createChartStatisticDelivery',
	        value: function createChartStatisticDelivery() {
	            var chart = {};

	            var series = ['Target', 'Sales'];
	            var colors = ['#BF465C', '#46BFBD'];
	            var labels = [];
	            // var line1 = [1229554000, 1044844000, 2061900000, 2706591000, 2570213000, 2434904000,2466543000, 2229717000, 3008294000, 2536895000, 2830164000, 2880382000];
	            var line1 = [1500000000, // 1
	            1800000000, // 2
	            2700000000, // 3
	            1950000000, // 4
	            2730000000, // 5
	            3120000000, // 6
	            2025000000, // 7
	            2835000000, // 8
	            3240000000, // 9
	            2025000000, // 10
	            2835000000, // 11
	            3240000000 // 12
	            ];
	            var line2 = [];

	            angular.forEach(this.m.statisticDelivery, function (item) {
	                labels.push(item.yearmonth);
	                line2.push(item.total_with_discount);
	            });

	            var d = new Date();
	            while (line2.length < 12) {
	                line2.push(0);
	                labels.push(d.getFullYear() + '-' + line2.length);
	            }
	            // line2[0] = line2[0] - 294924000;


	            var data = [line1, line2];

	            this.chartStatisticDelivery = this.ChartService.get_angular_chart(series, colors, data, labels);
	        }
	    }, {
	        key: 'createChartStatisticDeliveryQuarter',
	        value: function createChartStatisticDeliveryQuarter() {
	            var chart = {};
	            var series = ['Target', 'Sales'];
	            var colors = ['#BF465C', '#46BFBD'];
	            var labels = [];
	            // var line1 = [1229554000, 1044844000, 2061900000, 2706591000, 2570213000, 2434904000,2466543000, 2229717000, 3008294000, 2536895000, 2830164000, 2880382000];
	            var line1 = [1500000000, // 1
	            1800000000, // 2
	            2700000000, // 3
	            1950000000, // 4
	            2730000000, // 5
	            3120000000, // 6
	            2025000000, // 7
	            2835000000, // 8
	            3240000000, // 9
	            2025000000, // 10
	            2835000000, // 11
	            3240000000 // 12
	            ];
	            var line2 = [];
	            var line1_q = [];
	            var line2_q = [];
	            var labels_q = ['Q1', 'Q2', 'Q3', 'Q4'];

	            angular.forEach(this.m.statisticDelivery, function (item) {
	                labels.push(item.yearmonth);
	                line2.push(item.total_with_discount);
	            });

	            var d = new Date();
	            while (line2.length < 12) {
	                line2.push(0);
	                labels.push(d.getFullYear() + '-' + line2.length);
	            }
	            // line2[0] = line2[0] - 294924000;
	            var i = 0;
	            while (i < 12) {
	                line1_q.push(parseInt(line1[i]) + parseInt(line1[i + 1]) + parseInt(line1[i + 2]));
	                line2_q.push(parseInt(line2[i]) + parseInt(line2[i + 1]) + parseInt(line2[i + 2]));
	                i = i + 3;
	            }
	            var labels = labels_q;
	            var data = [line1_q, line2_q];

	            this.chartStatisticDeliveryQuarter = this.ChartService.get_angular_chart(series, colors, data, labels);
	        }
	    }, {
	        key: 'createChartStatisticDelivery',
	        value: function createChartStatisticDelivery() {
	            var chart = {};

	            var series = ['Target', 'Sales'];
	            var colors = ['#BF465C', '#46BFBD'];
	            var labels = [];
	            // var line1 = [1229554000, 1044844000, 2061900000, 2706591000, 2570213000, 2434904000,2466543000, 2229717000, 3008294000, 2536895000, 2830164000, 2880382000];
	            var line1 = [1500000000, // 1
	            1800000000, // 2
	            2700000000, // 3
	            1950000000, // 4
	            2730000000, // 5
	            3120000000, // 6
	            2025000000, // 7
	            2835000000, // 8
	            3240000000, // 9
	            2025000000, // 10
	            2835000000, // 11
	            3240000000 // 12
	            ];
	            var line2 = [];

	            angular.forEach(this.m.statisticDelivery, function (item) {
	                labels.push(item.yearmonth);
	                line2.push(item.total_with_discount);
	            });

	            var d = new Date();
	            while (line2.length < 12) {
	                line2.push(0);
	                labels.push(d.getFullYear() + '-' + line2.length);
	            }
	            // line2[0] = line2[0] - 294924000;


	            var data = [line1, line2];

	            this.chartStatisticDelivery = this.ChartService.get_angular_chart(series, colors, data, labels);
	        }
	    }, {
	        key: 'download',
	        value: function download() {
	            var _this2 = this;

	            var param = {};

	            var service = this.API.service('download', this.API.all('das0100'));
	            service.post(param).then(function (response) {
	                _this2.$log.info(response.data);
	                _this2.ClientService.downloadFileOneTime(response.data.file);
	            });
	        }
	    }]);

	    return DashboardController;
	}();

	var DashboardComponent = exports.DashboardComponent = {
	    //templateUrl: './views/app/components/dashboard/dashboard.component.html',
	    templateUrl: '/views/admin.dashboard.dashboard',
	    controller: DashboardController,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 222 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var NavSidebarController = function () {
	    NavSidebarController.$inject = ["AclService", "ContextService"];
	    function NavSidebarController(AclService, ContextService) {
	        'ngInject';

	        _classCallCheck(this, NavSidebarController);

	        var navSideBar = this;
	        this.can = AclService.can;

	        ContextService.me(function (data) {
	            navSideBar.userData = data;
	        });
	    }

	    _createClass(NavSidebarController, [{
	        key: '$onInit',
	        value: function $onInit() {}
	    }]);

	    return NavSidebarController;
	}();

	var NavSidebarComponent = exports.NavSidebarComponent = {
	    // templateUrl: './views/app/components/nav-sidebar/nav-sidebar.component.html',
	    templateUrl: '/views/admin.nav-sidebar',
	    controller: NavSidebarController,
	    controllerAs: 'vm',
	    bindings: {}
	};

/***/ }),
/* 223 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var NavHeaderController = function () {
	  NavHeaderController.$inject = ["$rootScope", "ContextService"];
	  function NavHeaderController($rootScope, ContextService) {
	    'ngInject';

	    _classCallCheck(this, NavHeaderController);

	    var navHeader = this;

	    ContextService.me(function (data) {
	      navHeader.userData = data;
	    });
	  }

	  _createClass(NavHeaderController, [{
	    key: '$onInit',
	    value: function $onInit() {}
	  }]);

	  return NavHeaderController;
	}();

	var NavHeaderComponent = exports.NavHeaderComponent = {
	  templateUrl: './views/app/components/nav-header/nav-header.component.html',
	  controller: NavHeaderController,
	  controllerAs: 'vm',
	  bindings: {}
	};

/***/ }),
/* 224 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var LoginLoaderController = function LoginLoaderController($state, $auth, API, AclService) {
	  'ngInject';

	  _classCallCheck(this, LoginLoaderController);

	  API.oneUrl('authenticate').one('user').get().then(function (response) {
	    if (!response.error) {
	      var data = response.data;

	      angular.forEach(data.userRole, function (value) {
	        AclService.attachRole(value);
	      });

	      AclService.setAbilities(data.abilities);
	      $auth.setToken(data.token);
	      $state.go('app.landing');
	    }
	  });
	};
	LoginLoaderController.$inject = ["$state", "$auth", "API", "AclService"];

	var LoginLoaderComponent = exports.LoginLoaderComponent = {
	  templateUrl: './views/app/components/login-loader/login-loader.component.html',
	  controller: LoginLoaderController,
	  controllerAs: 'vm',
	  bindings: {}
	};

/***/ }),
/* 225 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ResetPasswordController = function () {
	  ResetPasswordController.$inject = ["API", "$state"];
	  function ResetPasswordController(API, $state) {
	    'ngInject';

	    _classCallCheck(this, ResetPasswordController);

	    this.API = API;
	    this.$state = $state;
	    this.alerts = [];
	  }

	  _createClass(ResetPasswordController, [{
	    key: '$onInit',
	    value: function $onInit() {
	      this.password = '';
	      this.password_confirmation = '';
	      this.isValidToken = false;
	      this.formSubmitted = false;

	      this.verifyToken();
	    }
	  }, {
	    key: 'verifyToken',
	    value: function verifyToken() {
	      var _this = this;

	      var email = this.$state.params.email;
	      var token = this.$state.params.token;

	      this.API.all('auth/password').get('verify', {
	        email: email, token: token }).then(function () {
	        _this.isValidToken = true;
	      }, function () {
	        _this.$state.go('app.landing');
	      });
	    }
	  }, {
	    key: 'submit',
	    value: function submit(isValid) {
	      var _this2 = this;

	      if (isValid) {
	        this.alerts = [];
	        var data = {
	          email: this.$state.params.email,
	          token: this.$state.params.token,
	          password: this.password,
	          password_confirmation: this.password_confirmation
	        };

	        this.API.all('auth/password/reset').post(data).then(function () {
	          _this2.$state.go('login', { successMsg: 'Your password has been changed, You may now login.' });
	        }, function (res) {
	          var alrtArr = [];

	          angular.forEach(res.data.errors, function (value) {
	            alrtArr = { type: 'error', 'title': 'Error!', msg: value[0] };
	          });

	          _this2.alerts.push(alrtArr);
	        });
	      } else {
	        this.formSubmitted = true;
	      }
	    }
	  }]);

	  return ResetPasswordController;
	}();

	var ResetPasswordComponent = exports.ResetPasswordComponent = {
	  templateUrl: './views/app/components/reset-password/reset-password.component.html',
	  controller: ResetPasswordController,
	  controllerAs: 'vm',
	  bindings: {}
	};

/***/ }),
/* 226 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ForgotPasswordController = function () {
	  ForgotPasswordController.$inject = ["API", "$state"];
	  function ForgotPasswordController(API, $state) {
	    'ngInject';

	    _classCallCheck(this, ForgotPasswordController);

	    this.API = API;
	    this.$state = $state;
	    this.formSubmitted = false;
	    this.serverError = '';
	  }

	  _createClass(ForgotPasswordController, [{
	    key: '$onInit',
	    value: function $onInit() {
	      this.email = '';
	    }
	  }, {
	    key: 'submit',
	    value: function submit() {
	      var _this = this;

	      this.serverError = '';

	      this.API.all('auth/password/email').post({
	        email: this.email
	      }).then(function () {
	        _this.$state.go('login', { successMsg: 'Please check your email for instructions on how to reset your password.' });
	      }, function (res) {
	        for (var error in res.data.errors) {
	          _this.serverError += res.data.errors[error] + ' ';
	        }
	        _this.formSubmitted = true;
	      });
	    }
	  }]);

	  return ForgotPasswordController;
	}();

	var ForgotPasswordComponent = exports.ForgotPasswordComponent = {
	  templateUrl: './views/app/components/forgot-password/forgot-password.component.html',
	  controller: ForgotPasswordController,
	  controllerAs: 'vm',
	  bindings: {}
	};

/***/ }),
/* 227 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var LoginFormController = function () {
	  LoginFormController.$inject = ["$rootScope", "$auth", "$state", "$stateParams", "API", "AclService"];
	  function LoginFormController($rootScope, $auth, $state, $stateParams, API, AclService) {
	    'ngInject';

	    _classCallCheck(this, LoginFormController);

	    delete $rootScope.me;

	    this.$auth = $auth;
	    this.$state = $state;
	    this.$stateParams = $stateParams;
	    this.AclService = AclService;

	    this.registerSuccess = $stateParams.registerSuccess;
	    this.successMsg = $stateParams.successMsg;
	    this.loginfailederror = '';
	    this.loginfailed = false;
	    this.unverified = false;
	  }

	  _createClass(LoginFormController, [{
	    key: '$onInit',
	    value: function $onInit() {
	      this.email = '';
	      this.password = '';
	    }
	  }, {
	    key: 'login',
	    value: function login() {
	      var _this = this;

	      this.loginfailederror = '';
	      this.loginfailed = false;
	      this.unverified = false;

	      var user = {
	        email: this.email,
	        password: this.password
	      };

	      this.$auth.login(user).then(function (response) {
	        var data = response.data.data;
	        var AclService = _this.AclService;

	        angular.forEach(data.userRole, function (value) {
	          AclService.attachRole(value);
	        });

	        AclService.setAbilities(data.abilities);
	        // this.$auth.setToken(response.data)
	        _this.$state.go('app.landing');
	      }).catch(this.failedLogin.bind(this));
	    }
	  }, {
	    key: 'failedLogin',
	    value: function failedLogin(res) {
	      if (res.status == 401) {
	        this.loginfailed = true;
	      } else {
	        if (res.data.errors.message[0] == 'Email Unverified') {
	          this.unverified = true;
	        } else {
	          // other kinds of error returned from server
	          for (var error in res.data.errors) {
	            this.loginfailederror += res.data.errors[error] + ' ';
	          }
	        }
	      }
	    }
	  }]);

	  return LoginFormController;
	}();

	var LoginFormComponent = exports.LoginFormComponent = {
	  templateUrl: './views/app/components/login-form/login-form.component.html',
	  controller: LoginFormController,
	  controllerAs: 'vm',
	  bindings: {}
	};

/***/ }),
/* 228 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Crm3020Controller = function () {
	    Crm3020Controller.$inject = ["$scope", "$state", "$log", "API", "UtilsService", "ClientService", "$stateParams", "RouteService", "AclService"];
	    function Crm3020Controller($scope, $state, $log, API, UtilsService, ClientService, $stateParams, RouteService, AclService) {
	        "ngInject";

	        _classCallCheck(this, Crm3020Controller);

	        this.$state = $state;
	        this.$log = $log;
	        this.API = API;
	        this.UtilsService = UtilsService;
	        this.ClientService = ClientService;
	        this.RouteService = RouteService;
	        this.can = AclService.can;
	        this.m = {
	            data: {},
	            init: {}
	        };
	        this.m.store_id = $stateParams.store_id;
	        this.m.isSaving = false;
	    }

	    _createClass(Crm3020Controller, [{
	        key: "$onInit",
	        value: function $onInit() {
	            this.loadInit();
	        }
	    }, {
	        key: "loadInit",
	        value: function loadInit() {
	            var _this = this;

	            var param = {
	                store_id: this.m.store_id
	            };
	            var searchService = this.API.service("search", this.API.all("crm3020"));
	            searchService.post(param).then(function (response) {
	                _this.$log.info("m init: ", response.data.data);
	                _this.m.data = response.data.data;
	                _this.m.data1 = response.data.data1; // Gán giá trị data1
	            });
	        }
	    }]);

	    return Crm3020Controller;
	}();

	var Crm3020Component = exports.Crm3020Component = {
	    templateUrl: "/views/admin.crm3020",
	    controller: Crm3020Controller,
	    controllerAs: "vm",
	    bindings: {}
	};

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _fkColSortable = __webpack_require__(230);

	var _routeBodyclass = __webpack_require__(231);

	var _passwordVerify = __webpack_require__(232);

	var _amchart = __webpack_require__(233);

	angular.module('app.components').directive('routeBodyclass', _routeBodyclass.RouteBodyClassComponent).directive('passwordVerify', _passwordVerify.PasswordVerifyClassComponent).directive('fkColSortable', _fkColSortable.FkColSortableComponent).directive('amchart', _amchart.AmchartDirective);

/***/ }),
/* 230 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	// fkColSortable.$inject = ['$rootScope']
	function fkColSortable() /*$rootScope*/{
	  return {
	    templateUrl: './views/directives/fk-col-sortable/fk-col-sortable.component.html',
	    scope: {
	      orderBy: '=orderBy',
	      columnName: '@columnName',
	      orderDirection: '=orderDirection'
	    },
	    link: function fkColSortableLink() /*scope, elem, attrs*/{},
	    restrict: 'AE'
	  };
	}

	var FkColSortableComponent = exports.FkColSortableComponent = fkColSortable;

/***/ }),
/* 231 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	routeBodyClass.$inject = ['$rootScope'];
	function routeBodyClass($rootScope) {
	  return {
	    scope: { ngModel: '=ngModel' },
	    link: function routeBodyClassLink(scope, elem) {
	      $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState) {
	        // eslint-disable-line angular/on-watch
	        var fromClassnames = angular.isDefined(fromState.data) && angular.isDefined(fromState.data.bodyClass) ? fromState.data.bodyClass : null;
	        var toClassnames = angular.isDefined(toState.data) && angular.isDefined(toState.data.bodyClass) ? toState.data.bodyClass : null;

	        if (fromClassnames != toClassnames) {
	          if (fromClassnames) {
	            elem.removeClass(fromClassnames);
	          }

	          if (toClassnames) {
	            elem.addClass(toClassnames);
	          }
	        }
	      });
	    },
	    restrict: 'EA'
	  };
	}

	var RouteBodyClassComponent = exports.RouteBodyClassComponent = routeBodyClass;

/***/ }),
/* 232 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	function passwordVerifyClass() {
	  return {
	    require: 'ngModel',
	    scope: {
	      passwordVerify: '='
	    },
	    link: function link(scope, element, attrs, ctrl) {
	      scope.$watch(function () {
	        var combined;

	        if (scope.passwordVerify || ctrl.$viewValue) {
	          combined = scope.passwordVerify + '_' + ctrl.$viewValue;
	        }

	        return combined;
	      }, function (value) {
	        if (value) {
	          ctrl.$parsers.unshift(function (viewValue) {
	            var origin = scope.passwordVerify;

	            if (origin !== viewValue) {
	              ctrl.$setValidity('passwordVerify', false);
	              return undefined;
	            } else {
	              ctrl.$setValidity('passwordVerify', true);
	              return viewValue;
	            }
	          });
	        }
	      });
	    }
	  };
	}

	var PasswordVerifyClassComponent = exports.PasswordVerifyClassComponent = passwordVerifyClass;

/***/ }),
/* 233 */
/***/ (function(module, exports) {

	'use strict';

	AmchartDirective.$inject = ["$q"];
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports.AmchartDirective = AmchartDirective;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var AmchartController = function AmchartController() {
	    'ngInject';

	    //

	    _classCallCheck(this, AmchartController);
	};

	function AmchartDirective($q) {
	    'ngInject';

	    return {
	        restrict: 'E',
	        replace: true,
	        scope: {
	            options: '=',
	            chart: '=?',
	            height: '@',
	            width: '@',
	            id: '@'
	        },
	        template: '<div class="amchart"></div>',
	        controller: AmchartController,
	        link: function link(scope, element, attrs, controllers) {
	            var chartId = element.attr('id');
	            var id = getIdForUseInAmCharts();
	            element.attr('id', id);
	            var chart;
	            scope.chart = chart;

	            // allow scope.options to be a promise
	            $q.when(scope.options).then(function (options) {
	                // we can't render a chart without any data
	                if (options.data || options.dataProvider) {
	                    var renderChart = function renderChart(amChartOptions) {
	                        var o = amChartOptions || options;

	                        // set height and width
	                        var height = scope.height || '100%';
	                        var width = scope.width || '100%';

	                        element.css({
	                            'height': height,
	                            'width': width
	                        });

	                        // instantiate new chart object
	                        if (o.type === 'xy') {
	                            chart = o.theme ? new AmCharts.AmXYChart(AmCharts.themes[o.theme]) : new AmCharts.AmXYChart();
	                        } else if (o.type === 'pie') {
	                            chart = o.theme ? new AmCharts.AmPieChart(AmCharts.themes[o.theme]) : new AmCharts.AmPieChart();
	                        } else if (o.type === 'funnel') {
	                            chart = o.theme ? new AmCharts.AmFunnelChart(AmCharts.themes[o.theme]) : new AmCharts.AmFunnelChart();
	                        } else if (o.type === 'radar') {
	                            chart = o.theme ? new AmCharts.AmRadarChart(AmCharts.themes[o.theme]) : new AmCharts.AmRadarChart();
	                        } else if (o.type === 'gauge') {
	                            chart = o.theme ? new AmCharts.AmAngularGauge(AmCharts.themes[o.theme]) : new AmCharts.AmAngularGauge();
	                        } else {
	                            chart = o.theme ? new AmCharts.AmSerialChart(AmCharts.themes[o.theme]) : new AmCharts.AmSerialChart();
	                        }

	                        /** set some default values that amCharts doesnt provide **/
	                        $q.when(o.data).then(function (data) {

	                            chart.dataProvider = data;
	                            // if a category field is not specified, attempt to use the first field from an object in the array
	                            if (o.type != 'gauge') {
	                                chart.categoryField = o.categoryField || Object.keys(o.data[0])[0];
	                            }
	                            chart.startDuration = 0.5; // default animation length, because everyone loves a little pizazz

	                            // AutoMargin is on by default, but the default 20px all around seems to create unnecessary white space around the control
	                            chart.autoMargins = true;
	                            chart.marginTop = 0;
	                            chart.marginLeft = 0;
	                            chart.marginBottom = 0;
	                            chart.marginRight = 0;

	                            // modify default creditsPosition
	                            chart.creditsPosition = 'top-right';

	                            function generateGraphProperties(data) {
	                                // Assign Category Axis Properties
	                                if (o.categoryAxis) {
	                                    var categoryAxis = chart.categoryAxis;

	                                    if (categoryAxis) {
	                                        /* if we need to create any default values, we should assign them here */
	                                        categoryAxis.parseDates = true;

	                                        var keys = Object.keys(o.categoryAxis);
	                                        for (var i = 0; i < keys.length; i++) {
	                                            if (!angular.isObject(o.categoryAxis[keys[i]]) || angular.isArray(o.categoryAxis[keys[i]])) {
	                                                categoryAxis[keys[i]] = o.categoryAxis[keys[i]];
	                                            } else {
	                                                console.log('Stripped categoryAxis obj ' + keys[i]);
	                                            }
	                                        }
	                                        chart.categoryAxis = categoryAxis;
	                                    }
	                                }

	                                // Create value axis

	                                /* if we need to create any default values, we should assign them here */

	                                var addValueAxis = function addValueAxis(a) {
	                                    var valueAxis = new AmCharts.ValueAxis();

	                                    var keys = Object.keys(a);
	                                    for (var i = 0; i < keys.length; i++) {
	                                        valueAxis[keys[i]] = a[keys[i]];
	                                    }
	                                    chart.addValueAxis(valueAxis);
	                                };

	                                if (o.valueAxes && o.valueAxes.length > 0) {
	                                    for (var i = 0; i < o.valueAxes.length; i++) {
	                                        addValueAxis(o.valueAxes[i]);
	                                    }
	                                }

	                                //reusable function to create graph
	                                var addGraph = function addGraph(g) {
	                                    var graph = new AmCharts.AmGraph();
	                                    /** set some default values that amCharts doesnt provide **/
	                                    // if a category field is not specified, attempt to use the second field from an object in the array as a default value
	                                    if (g && o.data && o.data.length > 0) {
	                                        graph.valueField = g.valueField || Object.keys(o.data[0])[1];
	                                    }
	                                    graph.balloonText = '<span style="font-size:14px">[[category]]: <b>[[value]]</b></span>';
	                                    if (g) {
	                                        var keys = Object.keys(g);
	                                        // iterate over all of the properties in the graph object and apply them to the new AmGraph
	                                        for (var i = 0; i < keys.length; i++) {
	                                            graph[keys[i]] = g[keys[i]];
	                                        }
	                                    }
	                                    chart.addGraph(graph);
	                                };

	                                if (o.type == 'gauge') {
	                                    if (o.axes && o.axes.length > 0) {
	                                        for (var i = 0; i < o.axes.length; i++) {
	                                            var axis = new AmCharts.GaugeAxis();
	                                            Object.assign(axis, o.axes[i]);
	                                            chart.addAxis(axis);
	                                        }
	                                    }
	                                    if (o.arrows && o.arrows.length > 0) {
	                                        for (var i = 0; i < o.arrows.length; i++) {
	                                            var arrow = new AmCharts.GaugeArrow();
	                                            Object.assign(arrow, o.arrows[i]);
	                                            chart.addArrow(arrow);
	                                        }
	                                    }
	                                } else {
	                                    // create the graphs
	                                    if (o.graphs && o.graphs.length > 0) {
	                                        for (var i = 0; i < o.graphs.length; i++) {
	                                            addGraph(o.graphs[i]);
	                                        }
	                                    } else {
	                                        addGraph();
	                                    }
	                                }

	                                if (o.type === 'gantt' || o.type === 'serial' || o.type === 'xy') {
	                                    var chartCursor = new AmCharts.ChartCursor();
	                                    if (o.chartCursor) {
	                                        var keys = Object.keys(o.chartCursor);
	                                        for (var i = 0; i < keys.length; i++) {
	                                            if (_typeof(o.chartCursor[keys[i]]) !== 'object') {
	                                                chartCursor[keys[i]] = o.chartCursor[keys[i]];
	                                            }
	                                        }
	                                    }
	                                    chart.addChartCursor(chartCursor);
	                                }

	                                if (o.chartScrollbar) {
	                                    var scrollbar = new AmCharts.ChartScrollbar();
	                                    var keys = Object.keys(o.chartScrollbar);
	                                    for (var i = 0; i < keys.length; i++) {
	                                        scrollbar[keys[i]] = o.chartScrollbar[keys[i]];
	                                    }
	                                    chart.chartScrollbar = scrollbar;
	                                }

	                                if (o.balloon) {
	                                    chart.balloon = o.balloon;
	                                }
	                            }

	                            function generatePieProperties() {
	                                if (o.balloon) {
	                                    chart.balloon = o.balloon;
	                                }
	                                if (o.balloonFunction) {
	                                    chart.balloonFunction = o.balloonFunction;
	                                }
	                            }

	                            if (o.legend) {
	                                var legend = new AmCharts.AmLegend();
	                                var keys = Object.keys(o.legend);
	                                for (var i = 0; i < keys.length; i++) {
	                                    legend[keys[i]] = o.legend[keys[i]];
	                                }
	                                chart.legend = legend;
	                            }

	                            if (o.type === 'pie') {
	                                generatePieProperties();
	                            } else {
	                                generateGraphProperties();
	                            }

	                            if (o.titles) {
	                                for (var i = 0; i < o.titles.length; i++) {
	                                    var title = o.titles[i];
	                                    chart.addTitle(title.text, title.size, title.color, title.alpha, title.bold);
	                                };
	                            }

	                            if (o.export) {
	                                chart.amExport = o.export;
	                                chart.export = o.export;
	                            }

	                            if (o.responsive) {
	                                chart.responsive = o.responsive;
	                            }

	                            if (o.colors) {
	                                chart.colors = o.colors;
	                            }

	                            if (o.defs) {
	                                chart.defs = o.defs;
	                            }

	                            if (o.listeners) {
	                                for (var i = 0; i < o.listeners.length; i++) {
	                                    chart.addListener(o.listeners[i].event, o.listeners[i].method);
	                                }
	                            }

	                            var addEventListeners = function addEventListeners(obj, chartObj) {
	                                for (var i = 0; i < obj.length; i++) {
	                                    if (obj[i].listeners) {
	                                        var listeners = obj[i].listeners;
	                                        for (var l = 0; l < listeners.length; l++) {
	                                            chartObj[i].addListener(listeners[l].event, listeners[l].method);
	                                        }
	                                    }
	                                }
	                            };

	                            var chartKeys = Object.keys(o);
	                            for (var i = 0; i < chartKeys.length; i++) {
	                                if (_typeof(o[chartKeys[i]]) !== 'object' && typeof o[chartKeys[i]] !== 'function') {
	                                    chart[chartKeys[i]] = o[chartKeys[i]];
	                                } else if (_typeof(o[chartKeys[i]]) === 'object') {
	                                    addEventListeners(o[chartKeys[i]], chart[chartKeys[i]]);
	                                }
	                            }

	                            // WRITE
	                            chart.write(id);
	                            scope.chart = chart;
	                        });
	                    }; //renderchart


	                    var renderChart2 = function renderChart2(amChartOptions) {
	                        var o = amChartOptions || options;

	                        // set height and width
	                        var height = scope.height || '100%';
	                        var width = scope.width || '100%';

	                        element.css({
	                            'height': height,
	                            'width': width
	                        });

	                        chart = AmCharts.makeChart(id, o);
	                        // chart.write(id);
	                        scope.chart = chart;
	                    };

	                    // Render the chart
	                    // renderChart();
	                    renderChart2();

	                    // scope.$watch('options.dataProvider', function() {
	                    //     renderChart2();
	                    // });

	                    // EVENTS =========================================================================

	                    var onAmChartsTriggerChartAnimate = scope.$on('amCharts.triggerChartAnimate', function (event, id) {
	                        if (id === element[0].id || !id) {
	                            chart.animateAgain();
	                        }
	                    });

	                    var onAmChartsUpdateData = scope.$on('amCharts.updateData', function (event, data, id) {
	                        if (id === element[0].id || !id) {
	                            if (scope.options.type == 'gauge') {
	                                if (!Array.isArray(data)) data = [data];
	                                for (var i = 0; i < data.length; i++) {
	                                    chart.arrows[i] && chart.arrows[i].setValue && chart.arrows[i].setValue(data[i]);
	                                }
	                            } else {
	                                chart.dataProvider = data;
	                                chart.validateData();
	                            }
	                        }
	                    });

	                    var onAmChartsValidateNow = scope.$on('amCharts.validateNow', function (event, validateData, skipEvents, id) {
	                        if (id === element[0].id || !id) {
	                            chart.validateNow(validateData === undefined ? true : validateData, skipEvents === undefined ? false : skipEvents);
	                        }
	                    });

	                    var onAmChartsRenderChart = scope.$on('amCharts.renderChart', function (event, amChartOptions, id) {
	                        if (id === element[0].id || !id) {
	                            chart.clear();
	                            renderChart(amChartOptions);
	                        }
	                    });

	                    scope.$on('$destroy', function () {
	                        chart.clear();
	                        //Unregistering event to prevent slow down;
	                        onAmChartsTriggerChartAnimate();
	                        onAmChartsUpdateData();
	                        onAmChartsValidateNow();
	                        onAmChartsRenderChart();
	                    });
	                }
	            });

	            function getIdForUseInAmCharts() {
	                var id = scope.id; // try to use existing outer id to create new id

	                if (!id) {
	                    //generate a UUID
	                    var guid = function guid() {
	                        function s4() {
	                            return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
	                        }

	                        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
	                    };
	                    id = guid();
	                }
	                return id;
	            }
	        }
	    };
	}

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _dialog = __webpack_require__(235);

	var _Client = __webpack_require__(236);

	var _Utils = __webpack_require__(237);

	var _Route = __webpack_require__(238);

	var _context = __webpack_require__(239);

	var _API = __webpack_require__(240);

	var _chart = __webpack_require__(241);

	// import { StoreDialogController } from './dialogs/store_dialog/store_dialog.dialog'

	angular.module('app.services').service('DialogService', _dialog.DialogService).service('ClientService', _Client.ClientService).service('UtilsService', _Utils.UtilsService).service('RouteService', _Route.RouteService).service('ContextService', _context.ContextService).service('API', _API.APIService).service('ChartService', _chart.ChartService);
	// .controller('StoreDialogController', StoreDialogController)

/***/ }),
/* 235 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var DialogService = exports.DialogService = function () {
	    DialogService.$inject = ["$uibModal", "$uibModalStack", "$log"];
	    function DialogService($uibModal, $uibModalStack, $log) {
	        'ngInject';

	        _classCallCheck(this, DialogService);

	        this.$uibModal = $uibModal;
	        this.$uibModalStack = $uibModalStack;
	        this.$log = $log;
	    }

	    _createClass(DialogService, [{
	        key: 'open',
	        value: function open(template, options) {
	            this.$log.debug('template ', template);
	            if (!template) {
	                return false;
	            }

	            if (!options) {
	                options = {};
	            }

	            var defaultOptions = {
	                animation: true,
	                controllerAs: 'vm',
	                templateUrl: '/views/admin.dialogs.' + template,
	                size: 300
	            };

	            options = angular.extend(defaultOptions, options);
	            this.$log.debug(options);

	            // options.templateUrl = './views/dialogs/' + template + '/' + template + '.dialog.html'
	            // options.templateUrl = '/views/admin.dialogs.' + template;

	            //return this.$mdDialog.show(options);
	            return this.$uibModal.open(options);

	            /*
	            // var modalInstance = this.$uibModal.open({
	            //     animation: true,
	            //     templateUrl: '/views/admin.dialogs.store_dialog',
	            //     controller: this.modalcontroller,
	            //     controllerAs: 'mvm',
	            //     size: 300,
	            //     // resolve: {
	            //     //     items: () => {
	            //     //         return items
	            //     //     }
	            //     // }
	            // }) */
	        }
	    }, {
	        key: 'close',
	        value: function close(params) {
	            var hideParam = {
	                type: 'hide',
	                params: params || null
	            };
	            // this.$uibModal.close(hideParam);
	            // this.$uibModalStack.close(modalInstance, result);
	            var top = this.$uibModalStack.getTop();
	            if (top) {
	                this.$uibModalStack.close(top.key, hideParam);
	            }
	        }
	    }, {
	        key: 'cancel',
	        value: function cancel(params) {
	            var cancelParam = {
	                type: 'cancel',
	                params: params
	            };

	            var top = this.$uibModalStack.getTop();
	            if (top) {
	                this.$uibModalStack.dismiss(top.key, cancelParam);
	            }
	        }

	        // alert(title, content, params) {
	        //     let alert = this.$mdDialog.alert(params)
	        //         .title(title)
	        //         .content(content)
	        //         .ariaLabel(content)
	        //         .ok('Ok');

	        //     this.$mdDialog.show(alert);
	        // }

	        // confirm(title, content, params) {
	        //     let confirm = this.$mdDialog.confirm(params)
	        //         .title(title)
	        //         .content(content)
	        //         .ariaLabel(content)
	        //         .ok('Ok')
	        //         .cancel('Cancel');

	        //     return this.$mdDialog.show(confirm);
	        // }

	        // prompt(title, content, placeholder, params) {
	        //     let prompt = this.$mdDialog.prompt(params)
	        //         .title(title)
	        //         .textContent(content)
	        //         .placeholder(placeholder)
	        //         .ariaLabel(placeholder)
	        //         .ok('Ok')
	        //         .cancel('Cancel');

	        //     return this.$mdDialog.show(prompt);
	        // }

	    }]);

	    return DialogService;
	}();

/***/ }),
/* 236 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ClientService = exports.ClientService = function () {
	    ClientService.$inject = ["toaster", "$window"];
	    function ClientService(toaster, $window) {
	        'ngInject';

	        _classCallCheck(this, ClientService);

	        this.toaster = toaster;
	        this.$window = $window;
	        this.getTitle = function (alert, defaultTitle) {
	            var result = defaultTitle;
	            if (alert !== null && !angular.isUndefined(alert)) {
	                if (alert.title !== null && !angular.isUndefined(alert.title)) {
	                    result = alert.title;
	                }
	            }

	            return result;
	        };
	    }

	    /**
	     * Show alert
	     * @param  {Object, List} alerts List alert or one
	     * @return {None} 
	     */


	    _createClass(ClientService, [{
	        key: 'show',
	        value: function show(alerts) {

	            if (alerts === null || !angular.isUndefined(alerts)) {
	                return;
	            }

	            if (Array.isArray(alerts)) {
	                var len = alerts.length;
	                for (var i = 0; i < len; i++) {
	                    showOne(alerts[i]);
	                }
	            } else {
	                showOne(alerts);
	            }
	        }

	        /**
	         * Show alert
	         * Format: alert = { type: 'success', 'title': 'Success!', msg: 'Your message here' }
	         * Type: success, info, warning
	         * @param  {Object} alerts List alert or one
	         * @return {None} 
	         */

	    }, {
	        key: 'showOne',
	        value: function showOne(alert) {
	            if (alerts === null || !angular.isUndefined(alerts)) {
	                return;
	            }

	            var type = alert.type;
	            if (type === 'success') {
	                var title = this.getTitle(alert, 'Success!');
	                this.toaster.pop(type, title, body, 5000, 'trustedHtml');
	            } else if (type === 'info') {
	                var _title = this.getTitle(alert, 'Infomation!');
	                this.toaster.pop(type, _title, body, 5000, 'trustedHtml');
	            } else if (type === 'warning') {
	                var _title2 = this.getTitle(alert, 'Warning!');
	                this.toaster.pop(type, _title2, body, 5000, 'trustedHtml');
	            } else if (type === 'error') {
	                var _title3 = this.getTitle(alert, 'Error!');
	                this.toaster.pop(type, _title3, body, 60000, 'trustedHtml');
	            }
	        }
	    }, {
	        key: 'success',
	        value: function success(body) {
	            this.toaster.pop('success', "Success", body, 5000, 'trustedHtml');
	        }
	    }, {
	        key: 'error',
	        value: function error(body) {
	            this.toaster.pop('error', "Error", body, 60000, 'trustedHtml');
	        }
	    }, {
	        key: 'warning',
	        value: function warning(body) {
	            this.toaster.pop('warning', "Warning", body, 5000, 'trustedHtml');
	        }
	    }, {
	        key: 'downloadFile',
	        value: function downloadFile(action, params) {
	            var path = getContextPath() + action;
	            var form = document.createElement("form");
	            form._submit_function_ = form.submit;

	            form.setAttribute("method", "POST");
	            form.setAttribute("action", path);
	            form.setAttribute("name", "form");

	            for (var key in params) {
	                if (params.hasOwnProperty(key)) {
	                    if (params[key] != undefined && params[key] != null) {
	                        var hiddenField = document.createElement("input");
	                        hiddenField.setAttribute("type", "hidden");
	                        hiddenField.setAttribute("name", key);
	                        hiddenField.setAttribute("value", params[key]);
	                        form.appendChild(hiddenField);
	                    }
	                }
	            }

	            document.body.appendChild(form);
	            form._submit_function_();
	        }
	    }, {
	        key: 'postUrl',
	        value: function postUrl(winURL, params) {
	            var winName = 'MyWindow';
	            // var winURL='search.action';
	            var windowoption = 'resizable=yes,height=600,width=800,location=0,menubar=0,scrollbars=1';
	            // var params = { 'param1' : '1','param2' :'2'};         
	            var form = document.createElement("form");
	            form.setAttribute("method", "post");
	            form.setAttribute("action", winURL);
	            form.setAttribute("target", winName);
	            for (var i in params) {
	                if (params.hasOwnProperty(i)) {
	                    var input = document.createElement('input');
	                    input.type = 'hidden';
	                    input.name = i;
	                    input.value = params[i];
	                    form.appendChild(input);
	                }
	            }
	            document.body.appendChild(form);
	            window.open('', winName, windowoption);
	            form.target = winName;
	            form.submit();
	            document.body.removeChild(form);
	        }
	    }, {
	        key: 'downloadFileOneTime',
	        value: function downloadFileOneTime(file) {
	            this.$window.open('/download/one/' + file);
	        }
	    }]);

	    return ClientService;
	}();

/***/ }),
/* 237 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var UtilsService = exports.UtilsService = function () {
	    function UtilsService() {
	        'ngInject';

	        _classCallCheck(this, UtilsService);
	    }

	    /**
	     * Get Order by
	     * @param  {[type]} newOrderBy            [description]
	     * @param  {[type]} currentOrderBy        [description]
	     * @param  {[type]} currentOrderDirection [description]
	     * @return {[type]}                       [description]
	     */


	    _createClass(UtilsService, [{
	        key: 'getOrderBy',
	        value: function getOrderBy(newOrderBy, currentOrderBy, currentOrderDirection) {
	            var result = {
	                orderBy: currentOrderBy,
	                orderDirection: currentOrderDirection
	            };

	            if (newOrderBy === currentOrderBy) {
	                if (currentOrderDirection !== 'asc') {
	                    result.orderDirection = "asc";
	                } else {
	                    result.orderDirection = "desc";
	                }
	            } else {
	                result.orderBy = newOrderBy;
	                result.orderDirection = "asc";
	            }

	            return result;
	        }
	    }, {
	        key: 'joinMessageList',
	        value: function joinMessageList(list) {
	            var result = "";
	            if (angular.isDefined(list) && list != null) {
	                var isFirst = true;
	                angular.forEach(list, function (value /*, key*/) {
	                    if (isFirst) {
	                        result = value;
	                    } else {
	                        result = result + "\r\n" + value;
	                    }
	                });
	            }
	            return result;
	        }
	    }, {
	        key: 'momentToStringFormat',
	        value: function momentToStringFormat(field, format) {
	            if (field == null || field == undefined) {
	                return null;
	            }
	            return moment(field).format(format);
	        }
	    }, {
	        key: 'momentToStringDate',
	        value: function momentToStringDate(field) {
	            return this.momentToStringFormat(field, 'YYYY-MM-DD');
	        }
	    }]);

	    return UtilsService;
	}();

/***/ }),
/* 238 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var RouteService = exports.RouteService = function () {
	    RouteService.$inject = ["$state", "$stateParams", "$rootScope", "$log"];
	    function RouteService($state, $stateParams, $rootScope, $log) {
	        'ngInject';

	        _classCallCheck(this, RouteService);

	        this.$state = $state;
	        this.$rootScope = $rootScope;
	        this.$log = $log;
	    }

	    _createClass(RouteService, [{
	        key: 'goState',
	        value: function goState(state, params, options) {
	            var $rootScope = this.$rootScope;
	            var $log = this.$log;
	            var $state = this.$state;
	            var destroyListener = $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
	                // $log.debug(event)
	                // $log.debug(toState)
	                // $log.debug(toParams)
	                // $log.debug(fromState)
	                // $log.debug(fromParams)
	                $.extend(true, toParams, params);
	                destroyListener();
	            });
	            return $state.go(state, params, options);
	        }
	    }]);

	    return RouteService;
	}();

/***/ }),
/* 239 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ContextService = exports.ContextService = function () {
	  ContextService.$inject = ["$auth", "$rootScope", "API"];
	  function ContextService($auth, $rootScope, API) {
	    'ngInject';

	    _classCallCheck(this, ContextService);

	    this.$auth = $auth;
	    this.API = API;
	    this.$rootScope = $rootScope;
	  }

	  _createClass(ContextService, [{
	    key: 'getContext',
	    value: function getContext() {
	      var $auth = this.$auth;

	      if ($auth.isAuthenticated()) {
	        var API = this.API;
	        var UserData = API.service('me', API.all('users'));

	        return UserData.one().get();
	      } else {
	        return null;
	      }
	    }
	  }, {
	    key: 'me',
	    value: function me(cb) {
	      this.$rootScope.$watch('me', function (nv) {
	        cb(nv);
	      });
	    }
	  }]);

	  return ContextService;
	}();

/***/ }),
/* 240 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var APIService = exports.APIService = ["Restangular", "$window", "$log", "ClientService", "RouteService", function APIService(Restangular, $window, $log, ClientService, RouteService) {
	  'ngInject';
	  // content negotiation

	  _classCallCheck(this, APIService);

	  var headers = {
	    'Content-Type': 'application/json',
	    'Accept': 'application/x.laravel.v1+json'
	  };

	  return Restangular.withConfig(function (RestangularConfigurer) {
	    RestangularConfigurer.setBaseUrl('/api/').setDefaultHeaders(headers).setErrorInterceptor(function (response) {
	      $log.debug('[Error]', response);
	      if (response.status === 422) {
	        ClientService.warning("Dữ liệu không hợp lệ. Vui lòng kiểm tra lại.");
	      } else if (response.status === 401) {
	        RouteService.goState("login");
	        ClientService.error("Vui lòng đăng nhập lại");
	      } else if (response.status === 503) {
	        ClientService.error("Bạn không có quyền để thực hiện chức năng này");
	      } else {
	        ClientService.error(response.statusText);
	      }
	    }).addFullRequestInterceptor(function (element, operation, what, url, headers) {
	      $log.debug('[Request]', element, operation, what, url, headers);
	      var token = $window.localStorage.satellizer_token;
	      if (token) {
	        headers.Authorization = 'Bearer ' + token;
	      }
	    }).addResponseInterceptor(function (response, operation, what) {
	      $log.debug('[Response]', operation, what, response);
	      if (operation === 'getList') {
	        var newResponse = response.data[what];
	        newResponse.error = response.error;
	        return newResponse;
	      }

	      return response;
	    });
	  });
	}];

/***/ }),
/* 241 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ChartService = exports.ChartService = function () {
	    function ChartService() {
	        'ngInject';

	        _classCallCheck(this, ChartService);
	    }

	    _createClass(ChartService, [{
	        key: 'get_angular_chart',
	        value: function get_angular_chart(series, colors, data, labels) {
	            var chart = {};
	            chart.series = series;
	            chart.colors = colors;
	            chart.data = data;
	            chart.labels = labels;
	            chart.options = {
	                maintainAspectRatio: false,
	                animation: false,
	                scales: {
	                    yAxes: [{
	                        ticks: {
	                            callback: function callback(label, index, labels) {
	                                var value = label / 1000000;
	                                return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".") + 'm';
	                                // return label/1000+'k';
	                            }
	                        },
	                        scaleLabel: {
	                            display: true,
	                            labelString: '1m = 1.000.000đ'
	                        }
	                    }]
	                },
	                tooltips: {
	                    callbacks: {
	                        label: function label(tooltipItem, data) {
	                            var label = data.datasets[tooltipItem.datasetIndex].label;
	                            var value = tooltipItem.yLabel.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".") + 'đ';
	                            return label + ': ' + value;
	                        }
	                    }
	                }
	            };
	            return chart;
	        }
	    }, {
	        key: 'sort',
	        value: function sort(arr) {
	            var index = 15;
	            for (var i = 0; i < arr.length; i++) {
	                for (var j = i + 1; j < arr.length - 1; j++) {
	                    if (arr[i]['value'] < arr[j]['value']) {
	                        var temp = arr[i];
	                        arr[i] = arr[j];
	                        arr[j] = temp;
	                    }
	                }
	            }
	            var sum = 0;
	            for (var i = index; i < arr.length; i++) {
	                sum += arr[i]['value'];
	            }
	            arr = arr.slice(0, index);
	            arr.push({
	                'key': 'others',
	                'value': sum
	            });
	            // $log.info('arr ', arr);
	            return arr;
	        }

	        // Key_name: can be store, province, product name,...
	        // category: 2019-01, 2019-02,..., 2019-12,...
	        // data: list of object
	        // param: filter of particular tab

	    }, {
	        key: 'get_vertical',
	        value: function get_vertical(data, param, title, category, key_name) {

	            // $log.info('draw vertical ', data);
	            var arr = [];

	            var amount = 0;
	            angular.forEach(data, function (value, key) {

	                // $log.info('value ', value[category]);

	                if (value[category]) {
	                    amount = parseInt(value[category]);
	                } else {
	                    amount = 0;
	                }
	                // Don't take row has key name is total
	                if (value[key_name] != "Sum colunm" && value[key_name] != "Count column" && value[key_name] != "AVG column") {
	                    arr.push({ 'key': value[key_name],
	                        'value': amount });
	                }
	            });
	            var dataProvider = [];

	            // let title = '';

	            // sort array in descending way and return 15 first highest rows.
	            dataProvider = this.sort(arr);
	            // type= 1 => bar chart 
	            var data1 = {
	                title: title[0],
	                type: 1,
	                dataProvider: dataProvider
	            };
	            // type= 2 => bar chart 
	            var data2 = {
	                title: title[1],
	                type: 3,
	                dataProvider: dataProvider
	            };

	            return [data1, data2];
	        }
	    }, {
	        key: 'get_line_by_year',
	        value: function get_line_by_year(data, title) {
	            var d = new Date();
	            var cur_year = d.getFullYear();
	            var base_year = 2016;
	            var arr = [];

	            var amount = 0;
	            for (var i = base_year; i <= cur_year; i++) {
	                var category = i.toString();
	                if (data[category]) {
	                    amount = parseInt(data[category]);
	                } else {
	                    amount = 0;
	                }
	                arr.push({ 'key': category,
	                    'value': amount });
	            };
	            var dataProvider = arr;
	            var data1 = {
	                title: title,
	                type: 1,
	                dataProvider: dataProvider
	            };
	            var data2 = {
	                title: title,
	                type: 3,
	                dataProvider: dataProvider
	            };

	            return [data1, data2];
	        }
	    }, {
	        key: 'get_line_by_month',
	        value: function get_line_by_month(data, param, title) {
	            var d = new Date();
	            var cur_year = d.getFullYear();
	            var base_year = moment(param.year).format('YYYY');
	            var arr = [];

	            var amount = 0;
	            for (var i = 1; i < 13; i++) {
	                var category = "";
	                if (i < 10) {
	                    category = base_year.toString() + '-0' + i.toString();
	                } else {
	                    category = base_year.toString() + '-' + i.toString();
	                }
	                if (data[category]) {
	                    amount = parseInt(data[category]);
	                } else {
	                    amount = 0;
	                }
	                arr.push({ 'key': category,
	                    'value': amount });
	            };
	            var dataProvider = arr;
	            var data1 = {
	                title: title,
	                type: 1,
	                dataProvider: dataProvider
	            };

	            var data2 = {
	                title: title,
	                type: 3,
	                dataProvider: dataProvider
	            };

	            return [data1, data2];
	        }

	        // For demonstrate movement of object over time.

	    }, {
	        key: 'get_compare',
	        value: function get_compare(res, param, title) {
	            var smallItem = {};
	            var data = [];
	            var d = new Date();
	            var cur_year = d.getFullYear();
	            var min_year = cur_year - 3;
	            var $log = this.$log;
	            for (var i = min_year; i <= cur_year; i++) {
	                var sdata = [];
	                for (var j = 0; j < 13; j++) {
	                    sdata.push(0);
	                };
	                data.push(sdata);
	            };

	            var temp_amount = 0;
	            angular.forEach(res, function (value, key) {
	                temp_amount = value.sum;
	                var data_type = parseInt(param['data_type']);

	                if (data_type == 2) {
	                    temp_amount = value.sum_1;
	                } else if (data_type == 3) {
	                    temp_amount = value.count;
	                } else if (data_type == 4) {
	                    temp_amount = value.avg_discount;
	                } else if (data_type == 5) {
	                    temp_amount = value.count_1;
	                } else if (data_type == 6) {
	                    temp_amount = value.count_2;
	                }
	                data[value.year - min_year][value.month] = temp_amount;
	            });

	            var dataProvider_3 = [];
	            for (var i = min_year; i <= cur_year; i++) {
	                for (var j = 1; j < 13; j++) {
	                    dataProvider_3.push({
	                        'key': j.toString() + '-' + i.toString(),
	                        'value': data[i - min_year][j]
	                    });
	                };
	            };

	            var dataProvider_1 = [];
	            for (var i = 1; i < 13; i++) {
	                smallItem = {};
	                smallItem.category = i;
	                for (var j = min_year; j <= cur_year; j++) {
	                    smallItem[j.toString()] = data[j - min_year][i];
	                }
	                dataProvider_1.push(smallItem);
	            };

	            var data_2 = data;
	            for (var i = min_year; i <= cur_year; i++) {
	                for (var j = 1; j < 13; j++) {
	                    data_2[i - min_year][j] = parseInt(data_2[i - min_year][j]) + parseInt(data_2[i - min_year][j - 1]);
	                };
	            };

	            var dataProvider_2 = [];
	            for (var i = 1; i < 13; i++) {
	                smallItem = {};
	                smallItem.category = i;
	                for (var j = min_year; j <= cur_year; j++) {
	                    smallItem[j.toString()] = data_2[j - min_year][i];
	                }
	                dataProvider_2.push(smallItem);
	            };

	            var graph = [];
	            for (var i = min_year; i <= cur_year; i++) {
	                graph.push({
	                    "title": i.toString(),
	                    "balloonText": "[[title]]: <b>[[value]]</b>",
	                    "bullet": "round",
	                    "bulletSize": 10,
	                    "bulletBorderColor": "#ffffff",
	                    "bulletBorderAlpha": 1,
	                    "bulletBorderThickness": 2,
	                    "valueField": i.toString()
	                });
	            }
	            // $log.info('dataProvider ', dataProvider);
	            // $log.info('Title ', item['Product code']);
	            // var title = item["store_name"];


	            return {
	                1: [{ 'dataProvider': dataProvider_1, 'type': 2, 'title': title[0], 'graph': graph }, { 'dataProvider': dataProvider_2, 'type': 2, 'title': title[1], 'graph': graph }, { 'dataProvider': dataProvider_3, 'type': 4, 'title': title[2], 'graph': graph }]
	            };
	        }
	    }]);

	    return ChartService;
	}();

/***/ })
/******/ ]);